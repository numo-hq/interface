// Generated by @wagmi/cli@0.1.9 on 2/20/2023 at 6:35:20 PM
import {
  getContract,
  GetContractArgs,
  writeContract,
  WriteContractArgs,
  WriteContractPreparedArgs,
  WriteContractUnpreparedArgs,
  prepareWriteContract,
  PrepareWriteContractConfig,
  readContract,
  ReadContractConfig,
  watchContractEvent,
  WatchContractEventConfig,
  WatchContractEventCallback,
} from 'wagmi/actions'

import {
  useContract,
  UseContractConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractRead,
  UseContractReadConfig,
  useContractEvent,
  UseContractEventConfig,
} from 'wagmi'
import { WriteContractMode, PrepareWriteContractResult } from 'wagmi/actions'

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Balance
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const balanceABI = [
  { type: 'error', inputs: [], name: 'BalanceReturnError' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// CallbackHelper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const callbackHelperABI = [
  { type: 'error', inputs: [], name: 'FailedTransfer' },
  { type: 'error', inputs: [], name: 'FailedTransferFrom' },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'collateral', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'mintCallback',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'pairMintCallback',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'swapCallback',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20ABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'PERMIT_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Factory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const factoryABI = [
  { type: 'error', inputs: [], name: 'DeployedError' },
  { type: 'error', inputs: [], name: 'SameTokenError' },
  { type: 'error', inputs: [], name: 'ScaleError' },
  { type: 'error', inputs: [], name: 'ZeroAddressError' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token0',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'token1',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'token0Exp',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'token1Exp',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'upperBound',
        internalType: 'uint256',
        type: 'uint256',
        indexed: true,
      },
      {
        name: 'lendgine',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'LendgineCreated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token0', internalType: 'address', type: 'address' },
      { name: 'token1', internalType: 'address', type: 'address' },
      { name: 'token0Exp', internalType: 'uint8', type: 'uint8' },
      { name: 'token1Exp', internalType: 'uint8', type: 'uint8' },
      { name: 'upperBound', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createLendgine',
    outputs: [{ name: 'lendgine', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getLendgine',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'parameters',
    outputs: [
      { name: 'token0', internalType: 'address', type: 'address' },
      { name: 'token1', internalType: 'address', type: 'address' },
      { name: 'token0Exp', internalType: 'uint128', type: 'uint128' },
      { name: 'token1Exp', internalType: 'uint128', type: 'uint128' },
      { name: 'upperBound', internalType: 'uint256', type: 'uint256' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20Permit
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20PermitABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IERC20PermitAllowed
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const ierc20PermitAllowedABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'holder', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'allowed', internalType: 'bool', type: 'bool' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IFactory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iFactoryABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'token0', internalType: 'address', type: 'address' },
      { name: 'token1', internalType: 'address', type: 'address' },
      { name: 'token0Exp', internalType: 'uint8', type: 'uint8' },
      { name: 'token1Exp', internalType: 'uint8', type: 'uint8' },
      { name: 'upperBound', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'createLendgine',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'token0', internalType: 'address', type: 'address' },
      { name: 'token1', internalType: 'address', type: 'address' },
      { name: 'token0Exp', internalType: 'uint256', type: 'uint256' },
      { name: 'token1Exp', internalType: 'uint256', type: 'uint256' },
      { name: 'upperBound', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getLendgine',
    outputs: [{ name: 'lendgine', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'parameters',
    outputs: [
      { name: 'token0', internalType: 'address', type: 'address' },
      { name: 'token1', internalType: 'address', type: 'address' },
      { name: 'token0Exp', internalType: 'uint128', type: 'uint128' },
      { name: 'token1Exp', internalType: 'uint128', type: 'uint128' },
      { name: 'upperBound', internalType: 'uint256', type: 'uint256' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IImmutableState
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iImmutableStateABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'factory',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token0',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token0Scale',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token1',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token1Scale',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'upperBound',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IJumpRate
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iJumpRateABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'borrowedLiquidity', internalType: 'uint256', type: 'uint256' },
      { name: 'totalLiquidity', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getBorrowRate',
    outputs: [{ name: 'rate', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'borrowedLiquidity', internalType: 'uint256', type: 'uint256' },
      { name: 'totalLiquidity', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getSupplyRate',
    outputs: [{ name: 'rate', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'jumpMultiplier',
    outputs: [
      { name: 'jumpMultiplier', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'kink',
    outputs: [{ name: 'kink', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'multiplier',
    outputs: [{ name: 'multiplier', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ILendgine
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iLendgineABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'accrueInterest',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'accruePositionInterest',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'burn',
    outputs: [{ name: 'collateral', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'collateralRequested', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'collect',
    outputs: [{ name: 'collateral', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'collateral', internalType: 'uint256', type: 'uint256' }],
    name: 'convertCollateralToLiquidity',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'liquidity', internalType: 'uint256', type: 'uint256' }],
    name: 'convertLiquidityToCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'liquidity', internalType: 'uint256', type: 'uint256' }],
    name: 'convertLiquidityToShare',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'shares', internalType: 'uint256', type: 'uint256' }],
    name: 'convertShareToLiquidity',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'liquidity', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'deposit',
    outputs: [{ name: 'size', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'factory',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'amount0', internalType: 'uint256', type: 'uint256' },
      { name: 'amount1', internalType: 'uint256', type: 'uint256' },
      { name: 'liquidity', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'invariant',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'lastUpdate',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'collateral', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'mint',
    outputs: [{ name: 'shares', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'positions',
    outputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'reserve0',
    outputs: [{ name: '', internalType: 'uint120', type: 'uint120' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'reserve1',
    outputs: [{ name: '', internalType: 'uint120', type: 'uint120' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'rewardPerPositionStored',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount0Out', internalType: 'uint256', type: 'uint256' },
      { name: 'amount1Out', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'swap',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token0',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token0Scale',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token1',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token1Scale',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalLiquidity',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalLiquidityBorrowed',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalPositionSize',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'upperBound',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'size', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdraw',
    outputs: [
      { name: 'amount0', internalType: 'uint256', type: 'uint256' },
      { name: 'amount1', internalType: 'uint256', type: 'uint256' },
      { name: 'liquidity', internalType: 'uint256', type: 'uint256' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IMintCallback
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iMintCallbackABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'collateral', internalType: 'uint256', type: 'uint256' },
      { name: 'amount0', internalType: 'uint256', type: 'uint256' },
      { name: 'amount1', internalType: 'uint256', type: 'uint256' },
      { name: 'liquidity', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'mintCallback',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IMulticall
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iMulticallABI = [
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'multicall',
    outputs: [{ name: 'results', internalType: 'bytes[]', type: 'bytes[]' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IMulticall3
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iMulticall3ABI = [
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'returnData', internalType: 'bytes[]', type: 'bytes[]' },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call3[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'allowFailure', internalType: 'bool', type: 'bool' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate3',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call3Value[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'allowFailure', internalType: 'bool', type: 'bool' },
          { name: 'value', internalType: 'uint256', type: 'uint256' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'aggregate3Value',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'blockAndAggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'blockHash', internalType: 'bytes32', type: 'bytes32' },
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBasefee',
    outputs: [{ name: 'basefee', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'blockNumber', internalType: 'uint256', type: 'uint256' }],
    name: 'getBlockHash',
    outputs: [{ name: 'blockHash', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getBlockNumber',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getChainId',
    outputs: [{ name: 'chainid', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockCoinbase',
    outputs: [{ name: 'coinbase', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockDifficulty',
    outputs: [{ name: 'difficulty', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockGasLimit',
    outputs: [{ name: 'gaslimit', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getCurrentBlockTimestamp',
    outputs: [{ name: 'timestamp', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'addr', internalType: 'address', type: 'address' }],
    name: 'getEthBalance',
    outputs: [{ name: 'balance', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getLastBlockHash',
    outputs: [{ name: 'blockHash', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'requireSuccess', internalType: 'bool', type: 'bool' },
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'tryAggregate',
    outputs: [
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'requireSuccess', internalType: 'bool', type: 'bool' },
      {
        name: 'calls',
        internalType: 'struct IMulticall3.Call[]',
        type: 'tuple[]',
        components: [
          { name: 'target', internalType: 'address', type: 'address' },
          { name: 'callData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
    name: 'tryBlockAndAggregate',
    outputs: [
      { name: 'blockNumber', internalType: 'uint256', type: 'uint256' },
      { name: 'blockHash', internalType: 'bytes32', type: 'bytes32' },
      {
        name: 'returnData',
        internalType: 'struct IMulticall3.Result[]',
        type: 'tuple[]',
        components: [
          { name: 'success', internalType: 'bool', type: 'bool' },
          { name: 'returnData', internalType: 'bytes', type: 'bytes' },
        ],
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IPair
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iPairABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'factory',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'amount0', internalType: 'uint256', type: 'uint256' },
      { name: 'amount1', internalType: 'uint256', type: 'uint256' },
      { name: 'liquidity', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'invariant',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'reserve0',
    outputs: [{ name: '', internalType: 'uint120', type: 'uint120' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'reserve1',
    outputs: [{ name: '', internalType: 'uint120', type: 'uint120' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount0Out', internalType: 'uint256', type: 'uint256' },
      { name: 'amount1Out', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'swap',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token0',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token0Scale',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token1',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token1Scale',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalLiquidity',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'upperBound',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IPairMintCallback
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iPairMintCallbackABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'liquidity', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'pairMintCallback',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISelfPermit
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iSelfPermitABI = [
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'selfPermit',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'selfPermitAllowed',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IUniswapV2Factory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iUniswapV2FactoryABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token0',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'token1',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'pair',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      { name: '', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'PairCreated',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'allPairs',
    outputs: [{ name: 'pair', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'allPairsLength',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenA', internalType: 'address', type: 'address' },
      { name: 'tokenB', internalType: 'address', type: 'address' },
    ],
    name: 'createPair',
    outputs: [{ name: 'pair', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'feeTo',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'feeToSetter',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tokenA', internalType: 'address', type: 'address' },
      { name: 'tokenB', internalType: 'address', type: 'address' },
    ],
    name: 'getPair',
    outputs: [{ name: 'pair', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'migrator',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'setFeeTo',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'setFeeToSetter',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'setMigrator',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ISwapCallback
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iSwapCallbackABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'amount0Out', internalType: 'uint256', type: 'uint256' },
      { name: 'amount1Out', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'swapCallback',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IUniswapV2Pair
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iUniswapV2PairABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount0',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount1',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'Burn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount0',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount1',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Mint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount0In',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount1In',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount0Out',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount1Out',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'Swap',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'reserve0',
        internalType: 'uint112',
        type: 'uint112',
        indexed: false,
      },
      {
        name: 'reserve1',
        internalType: 'uint112',
        type: 'uint112',
        indexed: false,
      },
    ],
    name: 'Sync',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'value',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'MINIMUM_LIQUIDITY',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'PERMIT_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'to', internalType: 'address', type: 'address' }],
    name: 'burn',
    outputs: [
      { name: 'amount0', internalType: 'uint256', type: 'uint256' },
      { name: 'amount1', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'factory',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'getReserves',
    outputs: [
      { name: 'reserve0', internalType: 'uint112', type: 'uint112' },
      { name: 'reserve1', internalType: 'uint112', type: 'uint112' },
      { name: 'blockTimestampLast', internalType: 'uint32', type: 'uint32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'kLast',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'to', internalType: 'address', type: 'address' }],
    name: 'mint',
    outputs: [{ name: 'liquidity', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'owner', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'price0CumulativeLast',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'price1CumulativeLast',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'to', internalType: 'address', type: 'address' }],
    name: 'skim',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'amount0Out', internalType: 'uint256', type: 'uint256' },
      { name: 'amount1Out', internalType: 'uint256', type: 'uint256' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'swap',
    outputs: [],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'sync',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token0',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token1',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IUniswapV3Factory
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iUniswapV3FactoryABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'fee', internalType: 'uint24', type: 'uint24', indexed: true },
      {
        name: 'tickSpacing',
        internalType: 'int24',
        type: 'int24',
        indexed: true,
      },
    ],
    name: 'FeeAmountEnabled',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'oldOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'newOwner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
    ],
    name: 'OwnerChanged',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'token0',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'token1',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'fee', internalType: 'uint24', type: 'uint24', indexed: true },
      {
        name: 'tickSpacing',
        internalType: 'int24',
        type: 'int24',
        indexed: false,
      },
      {
        name: 'pool',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
    ],
    name: 'PoolCreated',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tokenA', internalType: 'address', type: 'address' },
      { name: 'tokenB', internalType: 'address', type: 'address' },
      { name: 'fee', internalType: 'uint24', type: 'uint24' },
    ],
    name: 'createPool',
    outputs: [{ name: 'pool', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'fee', internalType: 'uint24', type: 'uint24' },
      { name: 'tickSpacing', internalType: 'int24', type: 'int24' },
    ],
    name: 'enableFeeAmount',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'fee', internalType: 'uint24', type: 'uint24' }],
    name: 'feeAmountTickSpacing',
    outputs: [{ name: '', internalType: 'int24', type: 'int24' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tokenA', internalType: 'address', type: 'address' },
      { name: 'tokenB', internalType: 'address', type: 'address' },
      { name: 'fee', internalType: 'uint24', type: 'uint24' },
    ],
    name: 'getPool',
    outputs: [{ name: 'pool', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'owner',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '_owner', internalType: 'address', type: 'address' }],
    name: 'setOwner',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IUniswapV3Pool
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iUniswapV3PoolABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tickLower',
        internalType: 'int24',
        type: 'int24',
        indexed: true,
      },
      {
        name: 'tickUpper',
        internalType: 'int24',
        type: 'int24',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'amount0',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount1',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Burn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'recipient',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'tickLower',
        internalType: 'int24',
        type: 'int24',
        indexed: true,
      },
      {
        name: 'tickUpper',
        internalType: 'int24',
        type: 'int24',
        indexed: true,
      },
      {
        name: 'amount0',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'amount1',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
    ],
    name: 'Collect',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'recipient',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount0',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'amount1',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
    ],
    name: 'CollectProtocol',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'recipient',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount0',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount1',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'paid0',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'paid1',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Flash',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'observationCardinalityNextOld',
        internalType: 'uint16',
        type: 'uint16',
        indexed: false,
      },
      {
        name: 'observationCardinalityNextNew',
        internalType: 'uint16',
        type: 'uint16',
        indexed: false,
      },
    ],
    name: 'IncreaseObservationCardinalityNext',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sqrtPriceX96',
        internalType: 'uint160',
        type: 'uint160',
        indexed: false,
      },
      { name: 'tick', internalType: 'int24', type: 'int24', indexed: false },
    ],
    name: 'Initialize',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tickLower',
        internalType: 'int24',
        type: 'int24',
        indexed: true,
      },
      {
        name: 'tickUpper',
        internalType: 'int24',
        type: 'int24',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'amount0',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount1',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Mint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feeProtocol0Old',
        internalType: 'uint8',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'feeProtocol1Old',
        internalType: 'uint8',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'feeProtocol0New',
        internalType: 'uint8',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'feeProtocol1New',
        internalType: 'uint8',
        type: 'uint8',
        indexed: false,
      },
    ],
    name: 'SetFeeProtocol',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'recipient',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount0',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'amount1',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'sqrtPriceX96',
        internalType: 'uint160',
        type: 'uint160',
        indexed: false,
      },
      {
        name: 'liquidity',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      { name: 'tick', internalType: 'int24', type: 'int24', indexed: false },
    ],
    name: 'Swap',
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tickLower', internalType: 'int24', type: 'int24' },
      { name: 'tickUpper', internalType: 'int24', type: 'int24' },
      { name: 'amount', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'burn',
    outputs: [
      { name: 'amount0', internalType: 'uint256', type: 'uint256' },
      { name: 'amount1', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'tickLower', internalType: 'int24', type: 'int24' },
      { name: 'tickUpper', internalType: 'int24', type: 'int24' },
      { name: 'amount0Requested', internalType: 'uint128', type: 'uint128' },
      { name: 'amount1Requested', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'collect',
    outputs: [
      { name: 'amount0', internalType: 'uint128', type: 'uint128' },
      { name: 'amount1', internalType: 'uint128', type: 'uint128' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount0Requested', internalType: 'uint128', type: 'uint128' },
      { name: 'amount1Requested', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'collectProtocol',
    outputs: [
      { name: 'amount0', internalType: 'uint128', type: 'uint128' },
      { name: 'amount1', internalType: 'uint128', type: 'uint128' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'factory',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'fee',
    outputs: [{ name: '', internalType: 'uint24', type: 'uint24' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'feeGrowthGlobal0X128',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'feeGrowthGlobal1X128',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount0', internalType: 'uint256', type: 'uint256' },
      { name: 'amount1', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'flash',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'observationCardinalityNext',
        internalType: 'uint16',
        type: 'uint16',
      },
    ],
    name: 'increaseObservationCardinalityNext',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sqrtPriceX96', internalType: 'uint160', type: 'uint160' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'liquidity',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'maxLiquidityPerTick',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'tickLower', internalType: 'int24', type: 'int24' },
      { name: 'tickUpper', internalType: 'int24', type: 'int24' },
      { name: 'amount', internalType: 'uint128', type: 'uint128' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'mint',
    outputs: [
      { name: 'amount0', internalType: 'uint256', type: 'uint256' },
      { name: 'amount1', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'observations',
    outputs: [
      { name: 'blockTimestamp', internalType: 'uint32', type: 'uint32' },
      { name: 'tickCumulative', internalType: 'int56', type: 'int56' },
      {
        name: 'secondsPerLiquidityCumulativeX128',
        internalType: 'uint160',
        type: 'uint160',
      },
      { name: 'initialized', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'secondsAgos', internalType: 'uint32[]', type: 'uint32[]' },
    ],
    name: 'observe',
    outputs: [
      { name: 'tickCumulatives', internalType: 'int56[]', type: 'int56[]' },
      {
        name: 'secondsPerLiquidityCumulativeX128s',
        internalType: 'uint160[]',
        type: 'uint160[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'key', internalType: 'bytes32', type: 'bytes32' }],
    name: 'positions',
    outputs: [
      { name: '_liquidity', internalType: 'uint128', type: 'uint128' },
      {
        name: 'feeGrowthInside0LastX128',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'feeGrowthInside1LastX128',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'tokensOwed0', internalType: 'uint128', type: 'uint128' },
      { name: 'tokensOwed1', internalType: 'uint128', type: 'uint128' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'protocolFees',
    outputs: [
      { name: 'token0', internalType: 'uint128', type: 'uint128' },
      { name: 'token1', internalType: 'uint128', type: 'uint128' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feeProtocol0', internalType: 'uint8', type: 'uint8' },
      { name: 'feeProtocol1', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'setFeeProtocol',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'slot0',
    outputs: [
      { name: 'sqrtPriceX96', internalType: 'uint160', type: 'uint160' },
      { name: 'tick', internalType: 'int24', type: 'int24' },
      { name: 'observationIndex', internalType: 'uint16', type: 'uint16' },
      {
        name: 'observationCardinality',
        internalType: 'uint16',
        type: 'uint16',
      },
      {
        name: 'observationCardinalityNext',
        internalType: 'uint16',
        type: 'uint16',
      },
      { name: 'feeProtocol', internalType: 'uint8', type: 'uint8' },
      { name: 'unlocked', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tickLower', internalType: 'int24', type: 'int24' },
      { name: 'tickUpper', internalType: 'int24', type: 'int24' },
    ],
    name: 'snapshotCumulativesInside',
    outputs: [
      { name: 'tickCumulativeInside', internalType: 'int56', type: 'int56' },
      {
        name: 'secondsPerLiquidityInsideX128',
        internalType: 'uint160',
        type: 'uint160',
      },
      { name: 'secondsInside', internalType: 'uint32', type: 'uint32' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'zeroForOne', internalType: 'bool', type: 'bool' },
      { name: 'amountSpecified', internalType: 'int256', type: 'int256' },
      { name: 'sqrtPriceLimitX96', internalType: 'uint160', type: 'uint160' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'swap',
    outputs: [
      { name: 'amount0', internalType: 'int256', type: 'int256' },
      { name: 'amount1', internalType: 'int256', type: 'int256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'wordPosition', internalType: 'int16', type: 'int16' }],
    name: 'tickBitmap',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'tickSpacing',
    outputs: [{ name: '', internalType: 'int24', type: 'int24' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tick', internalType: 'int24', type: 'int24' }],
    name: 'ticks',
    outputs: [
      { name: 'liquidityGross', internalType: 'uint128', type: 'uint128' },
      { name: 'liquidityNet', internalType: 'int128', type: 'int128' },
      {
        name: 'feeGrowthOutside0X128',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'feeGrowthOutside1X128',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'tickCumulativeOutside', internalType: 'int56', type: 'int56' },
      {
        name: 'secondsPerLiquidityOutsideX128',
        internalType: 'uint160',
        type: 'uint160',
      },
      { name: 'secondsOutside', internalType: 'uint32', type: 'uint32' },
      { name: 'initialized', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token0',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token1',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IUniswapV3PoolActions
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iUniswapV3PoolActionsABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'tickLower', internalType: 'int24', type: 'int24' },
      { name: 'tickUpper', internalType: 'int24', type: 'int24' },
      { name: 'amount', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'burn',
    outputs: [
      { name: 'amount0', internalType: 'uint256', type: 'uint256' },
      { name: 'amount1', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'tickLower', internalType: 'int24', type: 'int24' },
      { name: 'tickUpper', internalType: 'int24', type: 'int24' },
      { name: 'amount0Requested', internalType: 'uint128', type: 'uint128' },
      { name: 'amount1Requested', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'collect',
    outputs: [
      { name: 'amount0', internalType: 'uint128', type: 'uint128' },
      { name: 'amount1', internalType: 'uint128', type: 'uint128' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount0', internalType: 'uint256', type: 'uint256' },
      { name: 'amount1', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'flash',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      {
        name: 'observationCardinalityNext',
        internalType: 'uint16',
        type: 'uint16',
      },
    ],
    name: 'increaseObservationCardinalityNext',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'sqrtPriceX96', internalType: 'uint160', type: 'uint160' },
    ],
    name: 'initialize',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'tickLower', internalType: 'int24', type: 'int24' },
      { name: 'tickUpper', internalType: 'int24', type: 'int24' },
      { name: 'amount', internalType: 'uint128', type: 'uint128' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'mint',
    outputs: [
      { name: 'amount0', internalType: 'uint256', type: 'uint256' },
      { name: 'amount1', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'zeroForOne', internalType: 'bool', type: 'bool' },
      { name: 'amountSpecified', internalType: 'int256', type: 'int256' },
      { name: 'sqrtPriceLimitX96', internalType: 'uint160', type: 'uint160' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'swap',
    outputs: [
      { name: 'amount0', internalType: 'int256', type: 'int256' },
      { name: 'amount1', internalType: 'int256', type: 'int256' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IUniswapV3PoolDerivedState
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iUniswapV3PoolDerivedStateABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'secondsAgos', internalType: 'uint32[]', type: 'uint32[]' },
    ],
    name: 'observe',
    outputs: [
      { name: 'tickCumulatives', internalType: 'int56[]', type: 'int56[]' },
      {
        name: 'secondsPerLiquidityCumulativeX128s',
        internalType: 'uint160[]',
        type: 'uint160[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'tickLower', internalType: 'int24', type: 'int24' },
      { name: 'tickUpper', internalType: 'int24', type: 'int24' },
    ],
    name: 'snapshotCumulativesInside',
    outputs: [
      { name: 'tickCumulativeInside', internalType: 'int56', type: 'int56' },
      {
        name: 'secondsPerLiquidityInsideX128',
        internalType: 'uint160',
        type: 'uint160',
      },
      { name: 'secondsInside', internalType: 'uint32', type: 'uint32' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IUniswapV3PoolEvents
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iUniswapV3PoolEventsABI = [
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tickLower',
        internalType: 'int24',
        type: 'int24',
        indexed: true,
      },
      {
        name: 'tickUpper',
        internalType: 'int24',
        type: 'int24',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'amount0',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount1',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Burn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'recipient',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'tickLower',
        internalType: 'int24',
        type: 'int24',
        indexed: true,
      },
      {
        name: 'tickUpper',
        internalType: 'int24',
        type: 'int24',
        indexed: true,
      },
      {
        name: 'amount0',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'amount1',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
    ],
    name: 'Collect',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'recipient',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount0',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'amount1',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
    ],
    name: 'CollectProtocol',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'recipient',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount0',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount1',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'paid0',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'paid1',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Flash',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'observationCardinalityNextOld',
        internalType: 'uint16',
        type: 'uint16',
        indexed: false,
      },
      {
        name: 'observationCardinalityNextNew',
        internalType: 'uint16',
        type: 'uint16',
        indexed: false,
      },
    ],
    name: 'IncreaseObservationCardinalityNext',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sqrtPriceX96',
        internalType: 'uint160',
        type: 'uint160',
        indexed: false,
      },
      { name: 'tick', internalType: 'int24', type: 'int24', indexed: false },
    ],
    name: 'Initialize',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: false,
      },
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'tickLower',
        internalType: 'int24',
        type: 'int24',
        indexed: true,
      },
      {
        name: 'tickUpper',
        internalType: 'int24',
        type: 'int24',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      {
        name: 'amount0',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount1',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Mint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'feeProtocol0Old',
        internalType: 'uint8',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'feeProtocol1Old',
        internalType: 'uint8',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'feeProtocol0New',
        internalType: 'uint8',
        type: 'uint8',
        indexed: false,
      },
      {
        name: 'feeProtocol1New',
        internalType: 'uint8',
        type: 'uint8',
        indexed: false,
      },
    ],
    name: 'SetFeeProtocol',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'recipient',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount0',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'amount1',
        internalType: 'int256',
        type: 'int256',
        indexed: false,
      },
      {
        name: 'sqrtPriceX96',
        internalType: 'uint160',
        type: 'uint160',
        indexed: false,
      },
      {
        name: 'liquidity',
        internalType: 'uint128',
        type: 'uint128',
        indexed: false,
      },
      { name: 'tick', internalType: 'int24', type: 'int24', indexed: false },
    ],
    name: 'Swap',
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IUniswapV3PoolImmutables
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iUniswapV3PoolImmutablesABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'factory',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'fee',
    outputs: [{ name: '', internalType: 'uint24', type: 'uint24' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'maxLiquidityPerTick',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'tickSpacing',
    outputs: [{ name: '', internalType: 'int24', type: 'int24' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token0',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token1',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IUniswapV3PoolOwnerActions
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iUniswapV3PoolOwnerActionsABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'recipient', internalType: 'address', type: 'address' },
      { name: 'amount0Requested', internalType: 'uint128', type: 'uint128' },
      { name: 'amount1Requested', internalType: 'uint128', type: 'uint128' },
    ],
    name: 'collectProtocol',
    outputs: [
      { name: 'amount0', internalType: 'uint128', type: 'uint128' },
      { name: 'amount1', internalType: 'uint128', type: 'uint128' },
    ],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'feeProtocol0', internalType: 'uint8', type: 'uint8' },
      { name: 'feeProtocol1', internalType: 'uint8', type: 'uint8' },
    ],
    name: 'setFeeProtocol',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IUniswapV3PoolState
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iUniswapV3PoolStateABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'feeGrowthGlobal0X128',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'feeGrowthGlobal1X128',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'liquidity',
    outputs: [{ name: '', internalType: 'uint128', type: 'uint128' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'index', internalType: 'uint256', type: 'uint256' }],
    name: 'observations',
    outputs: [
      { name: 'blockTimestamp', internalType: 'uint32', type: 'uint32' },
      { name: 'tickCumulative', internalType: 'int56', type: 'int56' },
      {
        name: 'secondsPerLiquidityCumulativeX128',
        internalType: 'uint160',
        type: 'uint160',
      },
      { name: 'initialized', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'key', internalType: 'bytes32', type: 'bytes32' }],
    name: 'positions',
    outputs: [
      { name: '_liquidity', internalType: 'uint128', type: 'uint128' },
      {
        name: 'feeGrowthInside0LastX128',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'feeGrowthInside1LastX128',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'tokensOwed0', internalType: 'uint128', type: 'uint128' },
      { name: 'tokensOwed1', internalType: 'uint128', type: 'uint128' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'protocolFees',
    outputs: [
      { name: 'token0', internalType: 'uint128', type: 'uint128' },
      { name: 'token1', internalType: 'uint128', type: 'uint128' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'slot0',
    outputs: [
      { name: 'sqrtPriceX96', internalType: 'uint160', type: 'uint160' },
      { name: 'tick', internalType: 'int24', type: 'int24' },
      { name: 'observationIndex', internalType: 'uint16', type: 'uint16' },
      {
        name: 'observationCardinality',
        internalType: 'uint16',
        type: 'uint16',
      },
      {
        name: 'observationCardinalityNext',
        internalType: 'uint16',
        type: 'uint16',
      },
      { name: 'feeProtocol', internalType: 'uint8', type: 'uint8' },
      { name: 'unlocked', internalType: 'bool', type: 'bool' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'wordPosition', internalType: 'int16', type: 'int16' }],
    name: 'tickBitmap',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'tick', internalType: 'int24', type: 'int24' }],
    name: 'ticks',
    outputs: [
      { name: 'liquidityGross', internalType: 'uint128', type: 'uint128' },
      { name: 'liquidityNet', internalType: 'int128', type: 'int128' },
      {
        name: 'feeGrowthOutside0X128',
        internalType: 'uint256',
        type: 'uint256',
      },
      {
        name: 'feeGrowthOutside1X128',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'tickCumulativeOutside', internalType: 'int56', type: 'int56' },
      {
        name: 'secondsPerLiquidityOutsideX128',
        internalType: 'uint160',
        type: 'uint160',
      },
      { name: 'secondsOutside', internalType: 'uint32', type: 'uint32' },
      { name: 'initialized', internalType: 'bool', type: 'bool' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IUniswapV3SwapCallback
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iUniswapV3SwapCallbackABI = [
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'amount0Delta', internalType: 'int256', type: 'int256' },
      { name: 'amount1Delta', internalType: 'int256', type: 'int256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'uniswapV3SwapCallback',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IWETH9
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iweth9ABI = [
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [],
    name: 'deposit',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
    name: 'withdraw',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ImmutableState
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const immutableStateABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'factory',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token0',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token0Scale',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token1',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token1Scale',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'upperBound',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// JumpRate
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const jumpRateABI = [
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'borrowedLiquidity', internalType: 'uint256', type: 'uint256' },
      { name: 'totalLiquidity', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getBorrowRate',
    outputs: [{ name: 'rate', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'borrowedLiquidity', internalType: 'uint256', type: 'uint256' },
      { name: 'totalLiquidity', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getSupplyRate',
    outputs: [{ name: 'rate', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'jumpMultiplier',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'kink',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'multiplier',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Lendgine
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const lendgineABI = [
  { type: 'error', inputs: [], name: 'BalanceReturnError' },
  { type: 'error', inputs: [], name: 'CompleteUtilizationError' },
  { type: 'error', inputs: [], name: 'FailedTransfer' },
  { type: 'error', inputs: [], name: 'InputError' },
  { type: 'error', inputs: [], name: 'InsufficientInputError' },
  { type: 'error', inputs: [], name: 'InsufficientOutputError' },
  { type: 'error', inputs: [], name: 'InsufficientPositionError' },
  { type: 'error', inputs: [], name: 'InvariantError' },
  { type: 'error', inputs: [], name: 'NoPositionError' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'timeElapsed',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'collateral',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'liquidity',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AccrueInterest',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'rewardPerPosition',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'AccruePositionInterest',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'collateral',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'shares',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'liquidity',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'Burn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'amount0Out',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount1Out',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'liquidity',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'Burn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Collect',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'size',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'liquidity',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'Deposit',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'collateral',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'shares',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'liquidity',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'Mint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'amount0In',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount1In',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'liquidity',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Mint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'amount0Out',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount1Out',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount0In',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount1In',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'Swap',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'sender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'size',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'liquidity',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'Withdraw',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'PERMIT_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'accrueInterest',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'accruePositionInterest',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'burn',
    outputs: [{ name: 'collateral', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'collateralRequested', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'collect',
    outputs: [{ name: 'collateral', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'collateral', internalType: 'uint256', type: 'uint256' }],
    name: 'convertCollateralToLiquidity',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'liquidity', internalType: 'uint256', type: 'uint256' }],
    name: 'convertLiquidityToCollateral',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'liquidity', internalType: 'uint256', type: 'uint256' }],
    name: 'convertLiquidityToShare',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: 'shares', internalType: 'uint256', type: 'uint256' }],
    name: 'convertShareToLiquidity',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'liquidity', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'deposit',
    outputs: [{ name: 'size', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'factory',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'borrowedLiquidity', internalType: 'uint256', type: 'uint256' },
      { name: 'totalLiquidity', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getBorrowRate',
    outputs: [{ name: 'rate', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'pure',
    type: 'function',
    inputs: [
      { name: 'borrowedLiquidity', internalType: 'uint256', type: 'uint256' },
      { name: 'totalLiquidity', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'getSupplyRate',
    outputs: [{ name: 'rate', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'amount0', internalType: 'uint256', type: 'uint256' },
      { name: 'amount1', internalType: 'uint256', type: 'uint256' },
      { name: 'liquidity', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'invariant',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'jumpMultiplier',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'kink',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'lastUpdate',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'collateral', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'mint',
    outputs: [{ name: 'shares', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'multiplier',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'positions',
    outputs: [
      { name: 'size', internalType: 'uint256', type: 'uint256' },
      {
        name: 'rewardPerPositionPaid',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'tokensOwed', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'reserve0',
    outputs: [{ name: '', internalType: 'uint120', type: 'uint120' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'reserve1',
    outputs: [{ name: '', internalType: 'uint120', type: 'uint120' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'rewardPerPositionStored',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount0Out', internalType: 'uint256', type: 'uint256' },
      { name: 'amount1Out', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'swap',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token0',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token0Scale',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token1',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token1Scale',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalLiquidity',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalLiquidityBorrowed',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalPositionSize',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'upperBound',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'size', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'withdraw',
    outputs: [
      { name: 'amount0', internalType: 'uint256', type: 'uint256' },
      { name: 'amount1', internalType: 'uint256', type: 'uint256' },
      { name: 'liquidity', internalType: 'uint256', type: 'uint256' },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LendgineRouter
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const lendgineRouterABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_factory', internalType: 'address', type: 'address' },
      { name: '_uniswapV2Factory', internalType: 'address', type: 'address' },
      { name: '_uniswapV3Factory', internalType: 'address', type: 'address' },
      { name: '_weth', internalType: 'address', type: 'address' },
    ],
  },
  { type: 'error', inputs: [], name: 'AmountError' },
  { type: 'error', inputs: [], name: 'BalanceReturnError' },
  { type: 'error', inputs: [], name: 'FailedTransfer' },
  { type: 'error', inputs: [], name: 'FailedTransferETH' },
  { type: 'error', inputs: [], name: 'FailedTransferFrom' },
  { type: 'error', inputs: [], name: 'InsufficientOutputError' },
  { type: 'error', inputs: [], name: 'LivelinessError' },
  { type: 'error', inputs: [], name: 'ValidationError' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'lendgine',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'collateral',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'shares',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'Burn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'lendgine',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'collateral',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'shares',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'Mint',
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'params',
        internalType: 'struct LendgineRouter.BurnParams',
        type: 'tuple',
        components: [
          { name: 'token0', internalType: 'address', type: 'address' },
          { name: 'token1', internalType: 'address', type: 'address' },
          { name: 'token0Exp', internalType: 'uint256', type: 'uint256' },
          { name: 'token1Exp', internalType: 'uint256', type: 'uint256' },
          { name: 'upperBound', internalType: 'uint256', type: 'uint256' },
          { name: 'shares', internalType: 'uint256', type: 'uint256' },
          { name: 'collateralMin', internalType: 'uint256', type: 'uint256' },
          { name: 'amount0Min', internalType: 'uint256', type: 'uint256' },
          { name: 'amount1Min', internalType: 'uint256', type: 'uint256' },
          {
            name: 'swapType',
            internalType: 'enum SwapHelper.SwapType',
            type: 'uint8',
          },
          { name: 'swapExtraData', internalType: 'bytes', type: 'bytes' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'deadline', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'burn',
    outputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'factory',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'params',
        internalType: 'struct LendgineRouter.MintParams',
        type: 'tuple',
        components: [
          { name: 'token0', internalType: 'address', type: 'address' },
          { name: 'token1', internalType: 'address', type: 'address' },
          { name: 'token0Exp', internalType: 'uint256', type: 'uint256' },
          { name: 'token1Exp', internalType: 'uint256', type: 'uint256' },
          { name: 'upperBound', internalType: 'uint256', type: 'uint256' },
          { name: 'amountIn', internalType: 'uint256', type: 'uint256' },
          { name: 'amountBorrow', internalType: 'uint256', type: 'uint256' },
          { name: 'sharesMin', internalType: 'uint256', type: 'uint256' },
          {
            name: 'swapType',
            internalType: 'enum SwapHelper.SwapType',
            type: 'uint8',
          },
          { name: 'swapExtraData', internalType: 'bytes', type: 'bytes' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'deadline', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'mint',
    outputs: [{ name: 'shares', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'collateralTotal', internalType: 'uint256', type: 'uint256' },
      { name: 'amount0', internalType: 'uint256', type: 'uint256' },
      { name: 'amount1', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'mintCallback',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'multicall',
    outputs: [{ name: 'results', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'liquidity', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'pairMintCallback',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [],
    name: 'refundETH',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'selfPermit',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'selfPermitAllowed',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'amountMinimum', internalType: 'uint256', type: 'uint256' },
      { name: 'recipient', internalType: 'address', type: 'address' },
    ],
    name: 'sweepToken',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'uniswapV2Factory',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'uniswapV3Factory',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'amount0Delta', internalType: 'int256', type: 'int256' },
      { name: 'amount1Delta', internalType: 'int256', type: 'int256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'uniswapV3SwapCallback',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'amountMinimum', internalType: 'uint256', type: 'uint256' },
      { name: 'recipient', internalType: 'address', type: 'address' },
    ],
    name: 'unwrapWETH',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'weth',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// LiquidityManager
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const liquidityManagerABI = [
  {
    stateMutability: 'nonpayable',
    type: 'constructor',
    inputs: [
      { name: '_factory', internalType: 'address', type: 'address' },
      { name: '_weth', internalType: 'address', type: 'address' },
    ],
  },
  { type: 'error', inputs: [], name: 'AmountError' },
  { type: 'error', inputs: [], name: 'BalanceReturnError' },
  { type: 'error', inputs: [], name: 'CollectError' },
  { type: 'error', inputs: [], name: 'FailedTransfer' },
  { type: 'error', inputs: [], name: 'FailedTransferETH' },
  { type: 'error', inputs: [], name: 'FailedTransferFrom' },
  { type: 'error', inputs: [], name: 'InsufficientOutputError' },
  { type: 'error', inputs: [], name: 'LivelinessError' },
  { type: 'error', inputs: [], name: 'PositionInvalidError' },
  { type: 'error', inputs: [], name: 'ValidationError' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'lendgine',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidity',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'size',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount0',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount1',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'AddLiquidity',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'lendgine',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'Collect',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'lendgine',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'liquidity',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'size',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount0',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount1',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'RemoveLiquidity',
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'params',
        internalType: 'struct LiquidityManager.AddLiquidityParams',
        type: 'tuple',
        components: [
          { name: 'token0', internalType: 'address', type: 'address' },
          { name: 'token1', internalType: 'address', type: 'address' },
          { name: 'token0Exp', internalType: 'uint256', type: 'uint256' },
          { name: 'token1Exp', internalType: 'uint256', type: 'uint256' },
          { name: 'upperBound', internalType: 'uint256', type: 'uint256' },
          { name: 'liquidity', internalType: 'uint256', type: 'uint256' },
          { name: 'amount0Min', internalType: 'uint256', type: 'uint256' },
          { name: 'amount1Min', internalType: 'uint256', type: 'uint256' },
          { name: 'sizeMin', internalType: 'uint256', type: 'uint256' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'deadline', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'addLiquidity',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'params',
        internalType: 'struct LiquidityManager.CollectParams',
        type: 'tuple',
        components: [
          { name: 'lendgine', internalType: 'address', type: 'address' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'amountRequested', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'collect',
    outputs: [{ name: 'amount', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'factory',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'multicall',
    outputs: [{ name: 'results', internalType: 'bytes[]', type: 'bytes[]' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'pairMintCallback',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'positions',
    outputs: [
      { name: 'size', internalType: 'uint256', type: 'uint256' },
      {
        name: 'rewardPerPositionPaid',
        internalType: 'uint256',
        type: 'uint256',
      },
      { name: 'tokensOwed', internalType: 'uint256', type: 'uint256' },
    ],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [],
    name: 'refundETH',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      {
        name: 'params',
        internalType: 'struct LiquidityManager.RemoveLiquidityParams',
        type: 'tuple',
        components: [
          { name: 'token0', internalType: 'address', type: 'address' },
          { name: 'token1', internalType: 'address', type: 'address' },
          { name: 'token0Exp', internalType: 'uint256', type: 'uint256' },
          { name: 'token1Exp', internalType: 'uint256', type: 'uint256' },
          { name: 'upperBound', internalType: 'uint256', type: 'uint256' },
          { name: 'size', internalType: 'uint256', type: 'uint256' },
          { name: 'amount0Min', internalType: 'uint256', type: 'uint256' },
          { name: 'amount1Min', internalType: 'uint256', type: 'uint256' },
          { name: 'recipient', internalType: 'address', type: 'address' },
          { name: 'deadline', internalType: 'uint256', type: 'uint256' },
        ],
      },
    ],
    name: 'removeLiquidity',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'selfPermit',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'selfPermitAllowed',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'amountMinimum', internalType: 'uint256', type: 'uint256' },
      { name: 'recipient', internalType: 'address', type: 'address' },
    ],
    name: 'sweepToken',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'amountMinimum', internalType: 'uint256', type: 'uint256' },
      { name: 'recipient', internalType: 'address', type: 'address' },
    ],
    name: 'unwrapWETH',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'weth',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// MockERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const mockErc20ABI = [
  { stateMutability: 'nonpayable', type: 'constructor', inputs: [] },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'owner',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'spender',
        internalType: 'address',
        type: 'address',
        indexed: true,
      },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Approval',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'from', internalType: 'address', type: 'address', indexed: true },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
      {
        name: 'amount',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Transfer',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'PERMIT_TYPEHASH',
    outputs: [{ name: '', internalType: 'bytes32', type: 'bytes32' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: '', internalType: 'address', type: 'address' },
      { name: '', internalType: 'address', type: 'address' },
    ],
    name: 'allowance',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'approve',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'balanceOf',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'burn',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'decimals',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'mint',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'name',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [{ name: '', internalType: 'address', type: 'address' }],
    name: 'nonces',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'owner', internalType: 'address', type: 'address' },
      { name: 'spender', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'permit',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'symbol',
    outputs: [{ name: '', internalType: 'string', type: 'string' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalSupply',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transfer',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'from', internalType: 'address', type: 'address' },
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'transferFrom',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Multicall
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const multicallABI = [
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [{ name: 'data', internalType: 'bytes[]', type: 'bytes[]' }],
    name: 'multicall',
    outputs: [{ name: 'results', internalType: 'bytes[]', type: 'bytes[]' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Pair
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const pairABI = [
  { type: 'error', inputs: [], name: 'BalanceReturnError' },
  { type: 'error', inputs: [], name: 'FailedTransfer' },
  { type: 'error', inputs: [], name: 'InsufficientOutputError' },
  { type: 'error', inputs: [], name: 'InvariantError' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'amount0Out',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount1Out',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'liquidity',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'Burn',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'amount0In',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount1In',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'liquidity',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'Mint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'amount0Out',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount1Out',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount0In',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      {
        name: 'amount1In',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
      { name: 'to', internalType: 'address', type: 'address', indexed: true },
    ],
    name: 'Swap',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'factory',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [
      { name: 'amount0', internalType: 'uint256', type: 'uint256' },
      { name: 'amount1', internalType: 'uint256', type: 'uint256' },
      { name: 'liquidity', internalType: 'uint256', type: 'uint256' },
    ],
    name: 'invariant',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'reserve0',
    outputs: [{ name: '', internalType: 'uint120', type: 'uint120' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'reserve1',
    outputs: [{ name: '', internalType: 'uint120', type: 'uint120' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'to', internalType: 'address', type: 'address' },
      { name: 'amount0Out', internalType: 'uint256', type: 'uint256' },
      { name: 'amount1Out', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'swap',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token0',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token0Scale',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token1',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token1Scale',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'totalLiquidity',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'upperBound',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Payment
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const paymentABI = [
  { type: 'error', inputs: [], name: 'BalanceReturnError' },
  { type: 'error', inputs: [], name: 'FailedTransfer' },
  { type: 'error', inputs: [], name: 'FailedTransferETH' },
  { type: 'error', inputs: [], name: 'InsufficientOutputError' },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [],
    name: 'refundETH',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'amountMinimum', internalType: 'uint256', type: 'uint256' },
      { name: 'recipient', internalType: 'address', type: 'address' },
    ],
    name: 'sweepToken',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'amountMinimum', internalType: 'uint256', type: 'uint256' },
      { name: 'recipient', internalType: 'address', type: 'address' },
    ],
    name: 'unwrapWETH',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'weth',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  { stateMutability: 'payable', type: 'receive' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Position
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const positionABI = [
  { type: 'error', inputs: [], name: 'NoPositionError' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SafeTransferLib
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const safeTransferLibABI = [
  { type: 'error', inputs: [], name: 'FailedApprove' },
  { type: 'error', inputs: [], name: 'FailedTransfer' },
  { type: 'error', inputs: [], name: 'FailedTransferETH' },
  { type: 'error', inputs: [], name: 'FailedTransferFrom' },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SelfPermit
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const selfPermitABI = [
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'value', internalType: 'uint256', type: 'uint256' },
      { name: 'deadline', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'selfPermit',
    outputs: [],
  },
  {
    stateMutability: 'payable',
    type: 'function',
    inputs: [
      { name: 'token', internalType: 'address', type: 'address' },
      { name: 'nonce', internalType: 'uint256', type: 'uint256' },
      { name: 'expiry', internalType: 'uint256', type: 'uint256' },
      { name: 'v', internalType: 'uint8', type: 'uint8' },
      { name: 'r', internalType: 'bytes32', type: 'bytes32' },
      { name: 's', internalType: 'bytes32', type: 'bytes32' },
    ],
    name: 'selfPermitAllowed',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// StdInvariant
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const stdInvariantABI = [
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeArtifacts',
    outputs: [
      {
        name: 'excludedArtifacts_',
        internalType: 'string[]',
        type: 'string[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeContracts',
    outputs: [
      {
        name: 'excludedContracts_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeSenders',
    outputs: [
      {
        name: 'excludedSenders_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetArtifactSelectors',
    outputs: [
      {
        name: 'targetedArtifactSelectors_',
        internalType: 'struct StdInvariant.FuzzSelector[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetArtifacts',
    outputs: [
      {
        name: 'targetedArtifacts_',
        internalType: 'string[]',
        type: 'string[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetContracts',
    outputs: [
      {
        name: 'targetedContracts_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetSelectors',
    outputs: [
      {
        name: 'targetedSelectors_',
        internalType: 'struct StdInvariant.FuzzSelector[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetSenders',
    outputs: [
      {
        name: 'targetedSenders_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// SwapHelper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const swapHelperABI = [
  { type: 'error', inputs: [], name: 'FailedTransfer' },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'uniswapV2Factory',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'uniswapV3Factory',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'amount0Delta', internalType: 'int256', type: 'int256' },
      { name: 'amount1Delta', internalType: 'int256', type: 'int256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'uniswapV3SwapCallback',
    outputs: [],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// TestHelper
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const testHelperABI = [
  { type: 'error', inputs: [], name: 'FailedTransfer' },
  { type: 'error', inputs: [], name: 'FailedTransferFrom' },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      {
        name: 'val',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'log_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'address', type: 'address', indexed: false },
    ],
    name: 'log_named_address',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'uint256[]',
        type: 'uint256[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'int256[]',
        type: 'int256[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      {
        name: 'val',
        internalType: 'address[]',
        type: 'address[]',
        indexed: false,
      },
    ],
    name: 'log_named_array',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'log_named_bytes',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'bytes32', type: 'bytes32', indexed: false },
    ],
    name: 'log_named_bytes32',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
      {
        name: 'decimals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'log_named_decimal_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
      {
        name: 'decimals',
        internalType: 'uint256',
        type: 'uint256',
        indexed: false,
      },
    ],
    name: 'log_named_decimal_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'int256', type: 'int256', indexed: false },
    ],
    name: 'log_named_int',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_named_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: 'key', internalType: 'string', type: 'string', indexed: false },
      { name: 'val', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_named_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'string', type: 'string', indexed: false },
    ],
    name: 'log_string',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256', indexed: false },
    ],
    name: 'log_uint',
  },
  {
    type: 'event',
    anonymous: false,
    inputs: [
      { name: '', internalType: 'bytes', type: 'bytes', indexed: false },
    ],
    name: 'logs',
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'IS_TEST',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'cuh',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'dennis',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeArtifacts',
    outputs: [
      {
        name: 'excludedArtifacts_',
        internalType: 'string[]',
        type: 'string[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeContracts',
    outputs: [
      {
        name: 'excludedContracts_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'excludeSenders',
    outputs: [
      {
        name: 'excludedSenders_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'factory',
    outputs: [{ name: '', internalType: 'contract Factory', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [],
    name: 'failed',
    outputs: [{ name: '', internalType: 'bool', type: 'bool' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'lendgine',
    outputs: [{ name: '', internalType: 'contract Lendgine', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: 'collateral', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'mintCallback',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [{ name: 'name', internalType: 'string', type: 'string' }],
    name: 'mkaddr',
    outputs: [{ name: '', internalType: 'address', type: 'address' }],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'pairMintCallback',
    outputs: [],
  },
  {
    stateMutability: 'nonpayable',
    type: 'function',
    inputs: [
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: '', internalType: 'uint256', type: 'uint256' },
      { name: 'data', internalType: 'bytes', type: 'bytes' },
    ],
    name: 'swapCallback',
    outputs: [],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetArtifactSelectors',
    outputs: [
      {
        name: 'targetedArtifactSelectors_',
        internalType: 'struct StdInvariant.FuzzSelector[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetArtifacts',
    outputs: [
      {
        name: 'targetedArtifacts_',
        internalType: 'string[]',
        type: 'string[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetContracts',
    outputs: [
      {
        name: 'targetedContracts_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetSelectors',
    outputs: [
      {
        name: 'targetedSelectors_',
        internalType: 'struct StdInvariant.FuzzSelector[]',
        type: 'tuple[]',
        components: [
          { name: 'addr', internalType: 'address', type: 'address' },
          { name: 'selectors', internalType: 'bytes4[]', type: 'bytes4[]' },
        ],
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'targetSenders',
    outputs: [
      {
        name: 'targetedSenders_',
        internalType: 'address[]',
        type: 'address[]',
      },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token0',
    outputs: [
      { name: '', internalType: 'contract MockERC20', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token0Scale',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token1',
    outputs: [
      { name: '', internalType: 'contract MockERC20', type: 'address' },
    ],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'token1Scale',
    outputs: [{ name: '', internalType: 'uint8', type: 'uint8' }],
  },
  {
    stateMutability: 'view',
    type: 'function',
    inputs: [],
    name: 'upperBound',
    outputs: [{ name: '', internalType: 'uint256', type: 'uint256' }],
  },
] as const

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Core
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link balanceABI}__.
 */
export function getBalance(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: balanceABI, ...config })
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link callbackHelperABI}__.
 */
export function getCallbackHelper(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: callbackHelperABI, ...config })
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link callbackHelperABI}__.
 */
export function writeCallbackHelper<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof callbackHelperABI, TFunctionName>,
        'abi'
      >
    | Omit<
        WriteContractUnpreparedArgs<typeof callbackHelperABI, TFunctionName>,
        'abi'
      >,
) {
  return writeContract({
    abi: callbackHelperABI,
    ...config,
  } as WriteContractArgs<typeof callbackHelperABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link callbackHelperABI}__.
 */
export function prepareWriteCallbackHelper<
  TAbi extends readonly unknown[] = typeof callbackHelperABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: callbackHelperABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link erc20ABI}__.
 */
export function getErc20(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: erc20ABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link erc20ABI}__.
 */
export function readErc20<
  TAbi extends readonly unknown[] = typeof erc20ABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: erc20ABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link erc20ABI}__.
 */
export function writeErc20<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof erc20ABI, TFunctionName>, 'abi'>
    | Omit<WriteContractUnpreparedArgs<typeof erc20ABI, TFunctionName>, 'abi'>,
) {
  return writeContract({ abi: erc20ABI, ...config } as WriteContractArgs<
    typeof erc20ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link erc20ABI}__.
 */
export function prepareWriteErc20<
  TAbi extends readonly unknown[] = typeof erc20ABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: erc20ABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 */
export function watchErc20Event<
  TAbi extends readonly unknown[] = typeof erc20ABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: erc20ABI, ...config } as WatchContractEventConfig<TAbi, TEventName>,
    callback,
  )
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link factoryABI}__.
 */
export function getFactory(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: factoryABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link factoryABI}__.
 */
export function readFactory<
  TAbi extends readonly unknown[] = typeof factoryABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: factoryABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link factoryABI}__.
 */
export function writeFactory<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof factoryABI, TFunctionName>, 'abi'>
    | Omit<
        WriteContractUnpreparedArgs<typeof factoryABI, TFunctionName>,
        'abi'
      >,
) {
  return writeContract({ abi: factoryABI, ...config } as WriteContractArgs<
    typeof factoryABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link factoryABI}__.
 */
export function prepareWriteFactory<
  TAbi extends readonly unknown[] = typeof factoryABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: factoryABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link factoryABI}__.
 */
export function watchFactoryEvent<
  TAbi extends readonly unknown[] = typeof factoryABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: factoryABI, ...config } as WatchContractEventConfig<
      TAbi,
      TEventName
    >,
    callback,
  )
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function getIerc20Permit(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: ierc20PermitABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function readIerc20Permit<
  TAbi extends readonly unknown[] = typeof ierc20PermitABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: ierc20PermitABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function writeIerc20Permit<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof ierc20PermitABI, TFunctionName>,
        'abi'
      >
    | Omit<
        WriteContractUnpreparedArgs<typeof ierc20PermitABI, TFunctionName>,
        'abi'
      >,
) {
  return writeContract({ abi: ierc20PermitABI, ...config } as WriteContractArgs<
    typeof ierc20PermitABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function prepareWriteIerc20Permit<
  TAbi extends readonly unknown[] = typeof ierc20PermitABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: ierc20PermitABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link ierc20PermitAllowedABI}__.
 */
export function getIerc20PermitAllowed(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: ierc20PermitAllowedABI, ...config })
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link ierc20PermitAllowedABI}__.
 */
export function writeIerc20PermitAllowed<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof ierc20PermitAllowedABI, TFunctionName>,
        'abi'
      >
    | Omit<
        WriteContractUnpreparedArgs<
          typeof ierc20PermitAllowedABI,
          TFunctionName
        >,
        'abi'
      >,
) {
  return writeContract({
    abi: ierc20PermitAllowedABI,
    ...config,
  } as WriteContractArgs<typeof ierc20PermitAllowedABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link ierc20PermitAllowedABI}__.
 */
export function prepareWriteIerc20PermitAllowed<
  TAbi extends readonly unknown[] = typeof ierc20PermitAllowedABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: ierc20PermitAllowedABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link iFactoryABI}__.
 */
export function getIFactory(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: iFactoryABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link iFactoryABI}__.
 */
export function readIFactory<
  TAbi extends readonly unknown[] = typeof iFactoryABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: iFactoryABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link iFactoryABI}__.
 */
export function writeIFactory<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof iFactoryABI, TFunctionName>, 'abi'>
    | Omit<
        WriteContractUnpreparedArgs<typeof iFactoryABI, TFunctionName>,
        'abi'
      >,
) {
  return writeContract({ abi: iFactoryABI, ...config } as WriteContractArgs<
    typeof iFactoryABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link iFactoryABI}__.
 */
export function prepareWriteIFactory<
  TAbi extends readonly unknown[] = typeof iFactoryABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: iFactoryABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link iImmutableStateABI}__.
 */
export function getIImmutableState(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: iImmutableStateABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link iImmutableStateABI}__.
 */
export function readIImmutableState<
  TAbi extends readonly unknown[] = typeof iImmutableStateABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: iImmutableStateABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link iJumpRateABI}__.
 */
export function getIJumpRate(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: iJumpRateABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link iJumpRateABI}__.
 */
export function readIJumpRate<
  TAbi extends readonly unknown[] = typeof iJumpRateABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: iJumpRateABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link iLendgineABI}__.
 */
export function getILendgine(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: iLendgineABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link iLendgineABI}__.
 */
export function readILendgine<
  TAbi extends readonly unknown[] = typeof iLendgineABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: iLendgineABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link iLendgineABI}__.
 */
export function writeILendgine<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof iLendgineABI, TFunctionName>, 'abi'>
    | Omit<
        WriteContractUnpreparedArgs<typeof iLendgineABI, TFunctionName>,
        'abi'
      >,
) {
  return writeContract({ abi: iLendgineABI, ...config } as WriteContractArgs<
    typeof iLendgineABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link iLendgineABI}__.
 */
export function prepareWriteILendgine<
  TAbi extends readonly unknown[] = typeof iLendgineABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: iLendgineABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link iMintCallbackABI}__.
 */
export function getIMintCallback(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: iMintCallbackABI, ...config })
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link iMintCallbackABI}__.
 */
export function writeIMintCallback<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof iMintCallbackABI, TFunctionName>,
        'abi'
      >
    | Omit<
        WriteContractUnpreparedArgs<typeof iMintCallbackABI, TFunctionName>,
        'abi'
      >,
) {
  return writeContract({
    abi: iMintCallbackABI,
    ...config,
  } as WriteContractArgs<typeof iMintCallbackABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link iMintCallbackABI}__.
 */
export function prepareWriteIMintCallback<
  TAbi extends readonly unknown[] = typeof iMintCallbackABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: iMintCallbackABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link iMulticallABI}__.
 */
export function getIMulticall(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: iMulticallABI, ...config })
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link iMulticallABI}__.
 */
export function writeIMulticall<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof iMulticallABI, TFunctionName>,
        'abi'
      >
    | Omit<
        WriteContractUnpreparedArgs<typeof iMulticallABI, TFunctionName>,
        'abi'
      >,
) {
  return writeContract({ abi: iMulticallABI, ...config } as WriteContractArgs<
    typeof iMulticallABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link iMulticallABI}__.
 */
export function prepareWriteIMulticall<
  TAbi extends readonly unknown[] = typeof iMulticallABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: iMulticallABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function getIMulticall3(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: iMulticall3ABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function readIMulticall3<
  TAbi extends readonly unknown[] = typeof iMulticall3ABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: iMulticall3ABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function writeIMulticall3<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof iMulticall3ABI, TFunctionName>,
        'abi'
      >
    | Omit<
        WriteContractUnpreparedArgs<typeof iMulticall3ABI, TFunctionName>,
        'abi'
      >,
) {
  return writeContract({ abi: iMulticall3ABI, ...config } as WriteContractArgs<
    typeof iMulticall3ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function prepareWriteIMulticall3<
  TAbi extends readonly unknown[] = typeof iMulticall3ABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: iMulticall3ABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link iPairABI}__.
 */
export function getIPair(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: iPairABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link iPairABI}__.
 */
export function readIPair<
  TAbi extends readonly unknown[] = typeof iPairABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: iPairABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link iPairABI}__.
 */
export function writeIPair<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof iPairABI, TFunctionName>, 'abi'>
    | Omit<WriteContractUnpreparedArgs<typeof iPairABI, TFunctionName>, 'abi'>,
) {
  return writeContract({ abi: iPairABI, ...config } as WriteContractArgs<
    typeof iPairABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link iPairABI}__.
 */
export function prepareWriteIPair<
  TAbi extends readonly unknown[] = typeof iPairABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: iPairABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link iPairMintCallbackABI}__.
 */
export function getIPairMintCallback(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: iPairMintCallbackABI, ...config })
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link iPairMintCallbackABI}__.
 */
export function writeIPairMintCallback<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof iPairMintCallbackABI, TFunctionName>,
        'abi'
      >
    | Omit<
        WriteContractUnpreparedArgs<typeof iPairMintCallbackABI, TFunctionName>,
        'abi'
      >,
) {
  return writeContract({
    abi: iPairMintCallbackABI,
    ...config,
  } as WriteContractArgs<typeof iPairMintCallbackABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link iPairMintCallbackABI}__.
 */
export function prepareWriteIPairMintCallback<
  TAbi extends readonly unknown[] = typeof iPairMintCallbackABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: iPairMintCallbackABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link iSelfPermitABI}__.
 */
export function getISelfPermit(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: iSelfPermitABI, ...config })
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link iSelfPermitABI}__.
 */
export function writeISelfPermit<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof iSelfPermitABI, TFunctionName>,
        'abi'
      >
    | Omit<
        WriteContractUnpreparedArgs<typeof iSelfPermitABI, TFunctionName>,
        'abi'
      >,
) {
  return writeContract({ abi: iSelfPermitABI, ...config } as WriteContractArgs<
    typeof iSelfPermitABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link iSelfPermitABI}__.
 */
export function prepareWriteISelfPermit<
  TAbi extends readonly unknown[] = typeof iSelfPermitABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: iSelfPermitABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link iUniswapV2FactoryABI}__.
 */
export function getIUniswapV2Factory(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: iUniswapV2FactoryABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link iUniswapV2FactoryABI}__.
 */
export function readIUniswapV2Factory<
  TAbi extends readonly unknown[] = typeof iUniswapV2FactoryABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: iUniswapV2FactoryABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link iUniswapV2FactoryABI}__.
 */
export function writeIUniswapV2Factory<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof iUniswapV2FactoryABI, TFunctionName>,
        'abi'
      >
    | Omit<
        WriteContractUnpreparedArgs<typeof iUniswapV2FactoryABI, TFunctionName>,
        'abi'
      >,
) {
  return writeContract({
    abi: iUniswapV2FactoryABI,
    ...config,
  } as WriteContractArgs<typeof iUniswapV2FactoryABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link iUniswapV2FactoryABI}__.
 */
export function prepareWriteIUniswapV2Factory<
  TAbi extends readonly unknown[] = typeof iUniswapV2FactoryABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: iUniswapV2FactoryABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link iUniswapV2FactoryABI}__.
 */
export function watchIUniswapV2FactoryEvent<
  TAbi extends readonly unknown[] = typeof iUniswapV2FactoryABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: iUniswapV2FactoryABI, ...config } as WatchContractEventConfig<
      TAbi,
      TEventName
    >,
    callback,
  )
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link iSwapCallbackABI}__.
 */
export function getISwapCallback(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: iSwapCallbackABI, ...config })
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link iSwapCallbackABI}__.
 */
export function writeISwapCallback<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof iSwapCallbackABI, TFunctionName>,
        'abi'
      >
    | Omit<
        WriteContractUnpreparedArgs<typeof iSwapCallbackABI, TFunctionName>,
        'abi'
      >,
) {
  return writeContract({
    abi: iSwapCallbackABI,
    ...config,
  } as WriteContractArgs<typeof iSwapCallbackABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link iSwapCallbackABI}__.
 */
export function prepareWriteISwapCallback<
  TAbi extends readonly unknown[] = typeof iSwapCallbackABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: iSwapCallbackABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link iUniswapV2PairABI}__.
 */
export function getIUniswapV2Pair(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: iUniswapV2PairABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link iUniswapV2PairABI}__.
 */
export function readIUniswapV2Pair<
  TAbi extends readonly unknown[] = typeof iUniswapV2PairABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: iUniswapV2PairABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link iUniswapV2PairABI}__.
 */
export function writeIUniswapV2Pair<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof iUniswapV2PairABI, TFunctionName>,
        'abi'
      >
    | Omit<
        WriteContractUnpreparedArgs<typeof iUniswapV2PairABI, TFunctionName>,
        'abi'
      >,
) {
  return writeContract({
    abi: iUniswapV2PairABI,
    ...config,
  } as WriteContractArgs<typeof iUniswapV2PairABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link iUniswapV2PairABI}__.
 */
export function prepareWriteIUniswapV2Pair<
  TAbi extends readonly unknown[] = typeof iUniswapV2PairABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: iUniswapV2PairABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link iUniswapV2PairABI}__.
 */
export function watchIUniswapV2PairEvent<
  TAbi extends readonly unknown[] = typeof iUniswapV2PairABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: iUniswapV2PairABI, ...config } as WatchContractEventConfig<
      TAbi,
      TEventName
    >,
    callback,
  )
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link iUniswapV3FactoryABI}__.
 */
export function getIUniswapV3Factory(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: iUniswapV3FactoryABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link iUniswapV3FactoryABI}__.
 */
export function readIUniswapV3Factory<
  TAbi extends readonly unknown[] = typeof iUniswapV3FactoryABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: iUniswapV3FactoryABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link iUniswapV3FactoryABI}__.
 */
export function writeIUniswapV3Factory<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof iUniswapV3FactoryABI, TFunctionName>,
        'abi'
      >
    | Omit<
        WriteContractUnpreparedArgs<typeof iUniswapV3FactoryABI, TFunctionName>,
        'abi'
      >,
) {
  return writeContract({
    abi: iUniswapV3FactoryABI,
    ...config,
  } as WriteContractArgs<typeof iUniswapV3FactoryABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link iUniswapV3FactoryABI}__.
 */
export function prepareWriteIUniswapV3Factory<
  TAbi extends readonly unknown[] = typeof iUniswapV3FactoryABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: iUniswapV3FactoryABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link iUniswapV3FactoryABI}__.
 */
export function watchIUniswapV3FactoryEvent<
  TAbi extends readonly unknown[] = typeof iUniswapV3FactoryABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: iUniswapV3FactoryABI, ...config } as WatchContractEventConfig<
      TAbi,
      TEventName
    >,
    callback,
  )
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link iUniswapV3PoolABI}__.
 */
export function getIUniswapV3Pool(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: iUniswapV3PoolABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link iUniswapV3PoolABI}__.
 */
export function readIUniswapV3Pool<
  TAbi extends readonly unknown[] = typeof iUniswapV3PoolABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: iUniswapV3PoolABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link iUniswapV3PoolABI}__.
 */
export function writeIUniswapV3Pool<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof iUniswapV3PoolABI, TFunctionName>,
        'abi'
      >
    | Omit<
        WriteContractUnpreparedArgs<typeof iUniswapV3PoolABI, TFunctionName>,
        'abi'
      >,
) {
  return writeContract({
    abi: iUniswapV3PoolABI,
    ...config,
  } as WriteContractArgs<typeof iUniswapV3PoolABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link iUniswapV3PoolABI}__.
 */
export function prepareWriteIUniswapV3Pool<
  TAbi extends readonly unknown[] = typeof iUniswapV3PoolABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: iUniswapV3PoolABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link iUniswapV3PoolABI}__.
 */
export function watchIUniswapV3PoolEvent<
  TAbi extends readonly unknown[] = typeof iUniswapV3PoolABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: iUniswapV3PoolABI, ...config } as WatchContractEventConfig<
      TAbi,
      TEventName
    >,
    callback,
  )
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link iUniswapV3PoolActionsABI}__.
 */
export function getIUniswapV3PoolActions(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: iUniswapV3PoolActionsABI, ...config })
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link iUniswapV3PoolActionsABI}__.
 */
export function writeIUniswapV3PoolActions<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<
          typeof iUniswapV3PoolActionsABI,
          TFunctionName
        >,
        'abi'
      >
    | Omit<
        WriteContractUnpreparedArgs<
          typeof iUniswapV3PoolActionsABI,
          TFunctionName
        >,
        'abi'
      >,
) {
  return writeContract({
    abi: iUniswapV3PoolActionsABI,
    ...config,
  } as WriteContractArgs<typeof iUniswapV3PoolActionsABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link iUniswapV3PoolActionsABI}__.
 */
export function prepareWriteIUniswapV3PoolActions<
  TAbi extends readonly unknown[] = typeof iUniswapV3PoolActionsABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: iUniswapV3PoolActionsABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link iUniswapV3PoolDerivedStateABI}__.
 */
export function getIUniswapV3PoolDerivedState(
  config: Omit<GetContractArgs, 'abi'>,
) {
  return getContract({ abi: iUniswapV3PoolDerivedStateABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link iUniswapV3PoolDerivedStateABI}__.
 */
export function readIUniswapV3PoolDerivedState<
  TAbi extends readonly unknown[] = typeof iUniswapV3PoolDerivedStateABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: iUniswapV3PoolDerivedStateABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link iUniswapV3PoolEventsABI}__.
 */
export function getIUniswapV3PoolEvents(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: iUniswapV3PoolEventsABI, ...config })
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link iUniswapV3PoolEventsABI}__.
 */
export function watchIUniswapV3PoolEventsEvent<
  TAbi extends readonly unknown[] = typeof iUniswapV3PoolEventsABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: iUniswapV3PoolEventsABI, ...config } as WatchContractEventConfig<
      TAbi,
      TEventName
    >,
    callback,
  )
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link iUniswapV3PoolImmutablesABI}__.
 */
export function getIUniswapV3PoolImmutables(
  config: Omit<GetContractArgs, 'abi'>,
) {
  return getContract({ abi: iUniswapV3PoolImmutablesABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link iUniswapV3PoolImmutablesABI}__.
 */
export function readIUniswapV3PoolImmutables<
  TAbi extends readonly unknown[] = typeof iUniswapV3PoolImmutablesABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: iUniswapV3PoolImmutablesABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link iUniswapV3PoolOwnerActionsABI}__.
 */
export function getIUniswapV3PoolOwnerActions(
  config: Omit<GetContractArgs, 'abi'>,
) {
  return getContract({ abi: iUniswapV3PoolOwnerActionsABI, ...config })
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link iUniswapV3PoolOwnerActionsABI}__.
 */
export function writeIUniswapV3PoolOwnerActions<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<
          typeof iUniswapV3PoolOwnerActionsABI,
          TFunctionName
        >,
        'abi'
      >
    | Omit<
        WriteContractUnpreparedArgs<
          typeof iUniswapV3PoolOwnerActionsABI,
          TFunctionName
        >,
        'abi'
      >,
) {
  return writeContract({
    abi: iUniswapV3PoolOwnerActionsABI,
    ...config,
  } as WriteContractArgs<typeof iUniswapV3PoolOwnerActionsABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link iUniswapV3PoolOwnerActionsABI}__.
 */
export function prepareWriteIUniswapV3PoolOwnerActions<
  TAbi extends readonly unknown[] = typeof iUniswapV3PoolOwnerActionsABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: iUniswapV3PoolOwnerActionsABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link iUniswapV3PoolStateABI}__.
 */
export function getIUniswapV3PoolState(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: iUniswapV3PoolStateABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link iUniswapV3PoolStateABI}__.
 */
export function readIUniswapV3PoolState<
  TAbi extends readonly unknown[] = typeof iUniswapV3PoolStateABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: iUniswapV3PoolStateABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link iUniswapV3SwapCallbackABI}__.
 */
export function getIUniswapV3SwapCallback(
  config: Omit<GetContractArgs, 'abi'>,
) {
  return getContract({ abi: iUniswapV3SwapCallbackABI, ...config })
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link iUniswapV3SwapCallbackABI}__.
 */
export function writeIUniswapV3SwapCallback<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<
          typeof iUniswapV3SwapCallbackABI,
          TFunctionName
        >,
        'abi'
      >
    | Omit<
        WriteContractUnpreparedArgs<
          typeof iUniswapV3SwapCallbackABI,
          TFunctionName
        >,
        'abi'
      >,
) {
  return writeContract({
    abi: iUniswapV3SwapCallbackABI,
    ...config,
  } as WriteContractArgs<typeof iUniswapV3SwapCallbackABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link iUniswapV3SwapCallbackABI}__.
 */
export function prepareWriteIUniswapV3SwapCallback<
  TAbi extends readonly unknown[] = typeof iUniswapV3SwapCallbackABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: iUniswapV3SwapCallbackABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link iweth9ABI}__.
 */
export function getIweth9(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: iweth9ABI, ...config })
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link iweth9ABI}__.
 */
export function writeIweth9<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof iweth9ABI, TFunctionName>, 'abi'>
    | Omit<WriteContractUnpreparedArgs<typeof iweth9ABI, TFunctionName>, 'abi'>,
) {
  return writeContract({ abi: iweth9ABI, ...config } as WriteContractArgs<
    typeof iweth9ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link iweth9ABI}__.
 */
export function prepareWriteIweth9<
  TAbi extends readonly unknown[] = typeof iweth9ABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: iweth9ABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link immutableStateABI}__.
 */
export function getImmutableState(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: immutableStateABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link immutableStateABI}__.
 */
export function readImmutableState<
  TAbi extends readonly unknown[] = typeof immutableStateABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: immutableStateABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link jumpRateABI}__.
 */
export function getJumpRate(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: jumpRateABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link jumpRateABI}__.
 */
export function readJumpRate<
  TAbi extends readonly unknown[] = typeof jumpRateABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: jumpRateABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link lendgineABI}__.
 */
export function getLendgine(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: lendgineABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link lendgineABI}__.
 */
export function readLendgine<
  TAbi extends readonly unknown[] = typeof lendgineABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: lendgineABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link lendgineABI}__.
 */
export function writeLendgine<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof lendgineABI, TFunctionName>, 'abi'>
    | Omit<
        WriteContractUnpreparedArgs<typeof lendgineABI, TFunctionName>,
        'abi'
      >,
) {
  return writeContract({ abi: lendgineABI, ...config } as WriteContractArgs<
    typeof lendgineABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link lendgineABI}__.
 */
export function prepareWriteLendgine<
  TAbi extends readonly unknown[] = typeof lendgineABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: lendgineABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link lendgineABI}__.
 */
export function watchLendgineEvent<
  TAbi extends readonly unknown[] = typeof lendgineABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: lendgineABI, ...config } as WatchContractEventConfig<
      TAbi,
      TEventName
    >,
    callback,
  )
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link lendgineRouterABI}__.
 */
export function getLendgineRouter(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: lendgineRouterABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link lendgineRouterABI}__.
 */
export function readLendgineRouter<
  TAbi extends readonly unknown[] = typeof lendgineRouterABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: lendgineRouterABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link lendgineRouterABI}__.
 */
export function writeLendgineRouter<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof lendgineRouterABI, TFunctionName>,
        'abi'
      >
    | Omit<
        WriteContractUnpreparedArgs<typeof lendgineRouterABI, TFunctionName>,
        'abi'
      >,
) {
  return writeContract({
    abi: lendgineRouterABI,
    ...config,
  } as WriteContractArgs<typeof lendgineRouterABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link lendgineRouterABI}__.
 */
export function prepareWriteLendgineRouter<
  TAbi extends readonly unknown[] = typeof lendgineRouterABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: lendgineRouterABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link lendgineRouterABI}__.
 */
export function watchLendgineRouterEvent<
  TAbi extends readonly unknown[] = typeof lendgineRouterABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: lendgineRouterABI, ...config } as WatchContractEventConfig<
      TAbi,
      TEventName
    >,
    callback,
  )
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link liquidityManagerABI}__.
 */
export function getLiquidityManager(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: liquidityManagerABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link liquidityManagerABI}__.
 */
export function readLiquidityManager<
  TAbi extends readonly unknown[] = typeof liquidityManagerABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: liquidityManagerABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link liquidityManagerABI}__.
 */
export function writeLiquidityManager<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof liquidityManagerABI, TFunctionName>,
        'abi'
      >
    | Omit<
        WriteContractUnpreparedArgs<typeof liquidityManagerABI, TFunctionName>,
        'abi'
      >,
) {
  return writeContract({
    abi: liquidityManagerABI,
    ...config,
  } as WriteContractArgs<typeof liquidityManagerABI, TFunctionName>)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link liquidityManagerABI}__.
 */
export function prepareWriteLiquidityManager<
  TAbi extends readonly unknown[] = typeof liquidityManagerABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: liquidityManagerABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link liquidityManagerABI}__.
 */
export function watchLiquidityManagerEvent<
  TAbi extends readonly unknown[] = typeof liquidityManagerABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: liquidityManagerABI, ...config } as WatchContractEventConfig<
      TAbi,
      TEventName
    >,
    callback,
  )
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link mockErc20ABI}__.
 */
export function getMockErc20(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: mockErc20ABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link mockErc20ABI}__.
 */
export function readMockErc20<
  TAbi extends readonly unknown[] = typeof mockErc20ABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: mockErc20ABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link mockErc20ABI}__.
 */
export function writeMockErc20<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof mockErc20ABI, TFunctionName>, 'abi'>
    | Omit<
        WriteContractUnpreparedArgs<typeof mockErc20ABI, TFunctionName>,
        'abi'
      >,
) {
  return writeContract({ abi: mockErc20ABI, ...config } as WriteContractArgs<
    typeof mockErc20ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link mockErc20ABI}__.
 */
export function prepareWriteMockErc20<
  TAbi extends readonly unknown[] = typeof mockErc20ABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: mockErc20ABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link mockErc20ABI}__.
 */
export function watchMockErc20Event<
  TAbi extends readonly unknown[] = typeof mockErc20ABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: mockErc20ABI, ...config } as WatchContractEventConfig<
      TAbi,
      TEventName
    >,
    callback,
  )
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link multicallABI}__.
 */
export function getMulticall(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: multicallABI, ...config })
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link multicallABI}__.
 */
export function writeMulticall<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof multicallABI, TFunctionName>, 'abi'>
    | Omit<
        WriteContractUnpreparedArgs<typeof multicallABI, TFunctionName>,
        'abi'
      >,
) {
  return writeContract({ abi: multicallABI, ...config } as WriteContractArgs<
    typeof multicallABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link multicallABI}__.
 */
export function prepareWriteMulticall<
  TAbi extends readonly unknown[] = typeof multicallABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: multicallABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link pairABI}__.
 */
export function getPair(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: pairABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link pairABI}__.
 */
export function readPair<
  TAbi extends readonly unknown[] = typeof pairABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: pairABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link pairABI}__.
 */
export function writePair<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof pairABI, TFunctionName>, 'abi'>
    | Omit<WriteContractUnpreparedArgs<typeof pairABI, TFunctionName>, 'abi'>,
) {
  return writeContract({ abi: pairABI, ...config } as WriteContractArgs<
    typeof pairABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link pairABI}__.
 */
export function prepareWritePair<
  TAbi extends readonly unknown[] = typeof pairABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: pairABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link pairABI}__.
 */
export function watchPairEvent<
  TAbi extends readonly unknown[] = typeof pairABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: pairABI, ...config } as WatchContractEventConfig<TAbi, TEventName>,
    callback,
  )
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link paymentABI}__.
 */
export function getPayment(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: paymentABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link paymentABI}__.
 */
export function readPayment<
  TAbi extends readonly unknown[] = typeof paymentABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: paymentABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link paymentABI}__.
 */
export function writePayment<TFunctionName extends string>(
  config:
    | Omit<WriteContractPreparedArgs<typeof paymentABI, TFunctionName>, 'abi'>
    | Omit<
        WriteContractUnpreparedArgs<typeof paymentABI, TFunctionName>,
        'abi'
      >,
) {
  return writeContract({ abi: paymentABI, ...config } as WriteContractArgs<
    typeof paymentABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link paymentABI}__.
 */
export function prepareWritePayment<
  TAbi extends readonly unknown[] = typeof paymentABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: paymentABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link positionABI}__.
 */
export function getPosition(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: positionABI, ...config })
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link safeTransferLibABI}__.
 */
export function getSafeTransferLib(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: safeTransferLibABI, ...config })
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link selfPermitABI}__.
 */
export function getSelfPermit(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: selfPermitABI, ...config })
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link selfPermitABI}__.
 */
export function writeSelfPermit<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof selfPermitABI, TFunctionName>,
        'abi'
      >
    | Omit<
        WriteContractUnpreparedArgs<typeof selfPermitABI, TFunctionName>,
        'abi'
      >,
) {
  return writeContract({ abi: selfPermitABI, ...config } as WriteContractArgs<
    typeof selfPermitABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link selfPermitABI}__.
 */
export function prepareWriteSelfPermit<
  TAbi extends readonly unknown[] = typeof selfPermitABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: selfPermitABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link stdInvariantABI}__.
 */
export function getStdInvariant(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: stdInvariantABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link stdInvariantABI}__.
 */
export function readStdInvariant<
  TAbi extends readonly unknown[] = typeof stdInvariantABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: stdInvariantABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link swapHelperABI}__.
 */
export function getSwapHelper(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: swapHelperABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link swapHelperABI}__.
 */
export function readSwapHelper<
  TAbi extends readonly unknown[] = typeof swapHelperABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: swapHelperABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link swapHelperABI}__.
 */
export function writeSwapHelper<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof swapHelperABI, TFunctionName>,
        'abi'
      >
    | Omit<
        WriteContractUnpreparedArgs<typeof swapHelperABI, TFunctionName>,
        'abi'
      >,
) {
  return writeContract({ abi: swapHelperABI, ...config } as WriteContractArgs<
    typeof swapHelperABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link swapHelperABI}__.
 */
export function prepareWriteSwapHelper<
  TAbi extends readonly unknown[] = typeof swapHelperABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: swapHelperABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link getContract}__ with `abi` set to __{@link testHelperABI}__.
 */
export function getTestHelper(config: Omit<GetContractArgs, 'abi'>) {
  return getContract({ abi: testHelperABI, ...config })
}

/**
 * Wraps __{@link readContract}__ with `abi` set to __{@link testHelperABI}__.
 */
export function readTestHelper<
  TAbi extends readonly unknown[] = typeof testHelperABI,
  TFunctionName extends string = string,
>(config: Omit<ReadContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return readContract({
    abi: testHelperABI,
    ...config,
  } as unknown as ReadContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link writeContract}__ with `abi` set to __{@link testHelperABI}__.
 */
export function writeTestHelper<TFunctionName extends string>(
  config:
    | Omit<
        WriteContractPreparedArgs<typeof testHelperABI, TFunctionName>,
        'abi'
      >
    | Omit<
        WriteContractUnpreparedArgs<typeof testHelperABI, TFunctionName>,
        'abi'
      >,
) {
  return writeContract({ abi: testHelperABI, ...config } as WriteContractArgs<
    typeof testHelperABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link prepareWriteContract}__ with `abi` set to __{@link testHelperABI}__.
 */
export function prepareWriteTestHelper<
  TAbi extends readonly unknown[] = typeof testHelperABI,
  TFunctionName extends string = string,
>(config: Omit<PrepareWriteContractConfig<TAbi, TFunctionName>, 'abi'>) {
  return prepareWriteContract({
    abi: testHelperABI,
    ...config,
  } as unknown as PrepareWriteContractConfig<TAbi, TFunctionName>)
}

/**
 * Wraps __{@link watchContractEvent}__ with `abi` set to __{@link testHelperABI}__.
 */
export function watchTestHelperEvent<
  TAbi extends readonly unknown[] = typeof testHelperABI,
  TEventName extends string = string,
>(
  config: Omit<WatchContractEventConfig<TAbi, TEventName>, 'abi'>,
  callback: WatchContractEventCallback<TAbi, TEventName>,
) {
  return watchContractEvent(
    { abi: testHelperABI, ...config } as WatchContractEventConfig<
      TAbi,
      TEventName
    >,
    callback,
  )
}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link balanceABI}__.
 */
export function useBalance(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: balanceABI, ...config })
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link callbackHelperABI}__.
 */
export function useCallbackHelper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: callbackHelperABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link callbackHelperABI}__.
 */
export function useCallbackHelperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof callbackHelperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof callbackHelperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof callbackHelperABI, TFunctionName>({
    abi: callbackHelperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link callbackHelperABI}__ and `functionName` set to `"mintCallback"`.
 */
export function useCallbackHelperMintCallback<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof callbackHelperABI,
          'mintCallback'
        >['abi'],
        'mintCallback'
      > & { functionName?: 'mintCallback' }
    : UseContractWriteConfig<
        TMode,
        typeof callbackHelperABI,
        'mintCallback'
      > & {
        abi?: never
        functionName?: 'mintCallback'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof callbackHelperABI, 'mintCallback'>({
    abi: callbackHelperABI,
    functionName: 'mintCallback',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link callbackHelperABI}__ and `functionName` set to `"pairMintCallback"`.
 */
export function useCallbackHelperPairMintCallback<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof callbackHelperABI,
          'pairMintCallback'
        >['abi'],
        'pairMintCallback'
      > & { functionName?: 'pairMintCallback' }
    : UseContractWriteConfig<
        TMode,
        typeof callbackHelperABI,
        'pairMintCallback'
      > & {
        abi?: never
        functionName?: 'pairMintCallback'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof callbackHelperABI, 'pairMintCallback'>({
    abi: callbackHelperABI,
    functionName: 'pairMintCallback',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link callbackHelperABI}__ and `functionName` set to `"swapCallback"`.
 */
export function useCallbackHelperSwapCallback<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof callbackHelperABI,
          'swapCallback'
        >['abi'],
        'swapCallback'
      > & { functionName?: 'swapCallback' }
    : UseContractWriteConfig<
        TMode,
        typeof callbackHelperABI,
        'swapCallback'
      > & {
        abi?: never
        functionName?: 'swapCallback'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof callbackHelperABI, 'swapCallback'>({
    abi: callbackHelperABI,
    functionName: 'swapCallback',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link callbackHelperABI}__.
 */
export function usePrepareCallbackHelperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof callbackHelperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: callbackHelperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof callbackHelperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link callbackHelperABI}__ and `functionName` set to `"mintCallback"`.
 */
export function usePrepareCallbackHelperMintCallback(
  config: Omit<
    UsePrepareContractWriteConfig<typeof callbackHelperABI, 'mintCallback'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: callbackHelperABI,
    functionName: 'mintCallback',
    ...config,
  } as UsePrepareContractWriteConfig<typeof callbackHelperABI, 'mintCallback'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link callbackHelperABI}__ and `functionName` set to `"pairMintCallback"`.
 */
export function usePrepareCallbackHelperPairMintCallback(
  config: Omit<
    UsePrepareContractWriteConfig<typeof callbackHelperABI, 'pairMintCallback'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: callbackHelperABI,
    functionName: 'pairMintCallback',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof callbackHelperABI,
    'pairMintCallback'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link callbackHelperABI}__ and `functionName` set to `"swapCallback"`.
 */
export function usePrepareCallbackHelperSwapCallback(
  config: Omit<
    UsePrepareContractWriteConfig<typeof callbackHelperABI, 'swapCallback'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: callbackHelperABI,
    functionName: 'swapCallback',
    ...config,
  } as UsePrepareContractWriteConfig<typeof callbackHelperABI, 'swapCallback'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: erc20ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Read<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: erc20ABI, ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useErc20DomainSeparator(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'DOMAIN_SEPARATOR'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'DOMAIN_SEPARATOR'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"PERMIT_TYPEHASH"`.
 */
export function useErc20PermitTypehash(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'PERMIT_TYPEHASH'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'PERMIT_TYPEHASH',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'PERMIT_TYPEHASH'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20Allowance(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'allowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'allowance'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BalanceOf(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'balanceOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20Decimals(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'decimals'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'decimals'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"name"`.
 */
export function useErc20Name(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'name'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'name'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"nonces"`.
 */
export function useErc20Nonces(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'nonces'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'nonces'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20Symbol(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'symbol'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'symbol'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20TotalSupply(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, 'totalSupply'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, 'totalSupply'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc20ABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, TFunctionName>({
    abi: erc20ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'approve'>({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"permit"`.
 */
export function useErc20Permit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'permit'>['abi'],
        'permit'
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'permit'> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'permit'>({
    abi: erc20ABI,
    functionName: 'permit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20Transfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'transfer'>({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof erc20ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof erc20ABI, 'transferFrom'>({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function usePrepareErc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareErc20Permit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'permit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'permit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link factoryABI}__.
 */
export function useFactory(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: factoryABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link factoryABI}__.
 */
export function useFactoryRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof factoryABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: factoryABI,
    ...config,
  } as UseContractReadConfig<typeof factoryABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link factoryABI}__ and `functionName` set to `"getLendgine"`.
 */
export function useFactoryGetLendgine(
  config: Omit<
    UseContractReadConfig<typeof factoryABI, 'getLendgine'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: factoryABI,
    functionName: 'getLendgine',
    ...config,
  } as UseContractReadConfig<typeof factoryABI, 'getLendgine'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link factoryABI}__ and `functionName` set to `"parameters"`.
 */
export function useFactoryParameters(
  config: Omit<
    UseContractReadConfig<typeof factoryABI, 'parameters'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: factoryABI,
    functionName: 'parameters',
    ...config,
  } as UseContractReadConfig<typeof factoryABI, 'parameters'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link factoryABI}__.
 */
export function useFactoryWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof factoryABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof factoryABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof factoryABI, TFunctionName>({
    abi: factoryABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link factoryABI}__ and `functionName` set to `"createLendgine"`.
 */
export function useFactoryCreateLendgine<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof factoryABI, 'createLendgine'>['abi'],
        'createLendgine'
      > & { functionName?: 'createLendgine' }
    : UseContractWriteConfig<TMode, typeof factoryABI, 'createLendgine'> & {
        abi?: never
        functionName?: 'createLendgine'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof factoryABI, 'createLendgine'>({
    abi: factoryABI,
    functionName: 'createLendgine',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link factoryABI}__.
 */
export function usePrepareFactoryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof factoryABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: factoryABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof factoryABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link factoryABI}__ and `functionName` set to `"createLendgine"`.
 */
export function usePrepareFactoryCreateLendgine(
  config: Omit<
    UsePrepareContractWriteConfig<typeof factoryABI, 'createLendgine'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: factoryABI,
    functionName: 'createLendgine',
    ...config,
  } as UsePrepareContractWriteConfig<typeof factoryABI, 'createLendgine'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link factoryABI}__.
 */
export function useFactoryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof factoryABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: factoryABI,
    ...config,
  } as UseContractEventConfig<typeof factoryABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link factoryABI}__ and `eventName` set to `"LendgineCreated"`.
 */
export function useFactoryLendgineCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof factoryABI, 'LendgineCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: factoryABI,
    eventName: 'LendgineCreated',
    ...config,
  } as UseContractEventConfig<typeof factoryABI, 'LendgineCreated'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function useIerc20Permit(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ierc20PermitABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function useIerc20PermitRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20PermitABI,
    ...config,
  } as UseContractReadConfig<typeof ierc20PermitABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useIerc20PermitDomainSeparator(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitABI, 'DOMAIN_SEPARATOR'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20PermitABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<typeof ierc20PermitABI, 'DOMAIN_SEPARATOR'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"nonces"`.
 */
export function useIerc20PermitNonces(
  config: Omit<
    UseContractReadConfig<typeof ierc20PermitABI, 'nonces'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: ierc20PermitABI,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<typeof ierc20PermitABI, 'nonces'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function useIerc20PermitWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20PermitABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof ierc20PermitABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20PermitABI, TFunctionName>({
    abi: ierc20PermitABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"permit"`.
 */
export function useIerc20PermitPermit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof ierc20PermitABI, 'permit'>['abi'],
        'permit'
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<TMode, typeof ierc20PermitABI, 'permit'> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20PermitABI, 'permit'>({
    abi: ierc20PermitABI,
    functionName: 'permit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__.
 */
export function usePrepareIerc20PermitWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20PermitABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20PermitABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20PermitABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareIerc20PermitPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20PermitABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20PermitABI,
    functionName: 'permit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20PermitABI, 'permit'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link ierc20PermitAllowedABI}__.
 */
export function useIerc20PermitAllowed(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: ierc20PermitAllowedABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitAllowedABI}__.
 */
export function useIerc20PermitAllowedWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc20PermitAllowedABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof ierc20PermitAllowedABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20PermitAllowedABI, TFunctionName>({
    abi: ierc20PermitAllowedABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link ierc20PermitAllowedABI}__ and `functionName` set to `"permit"`.
 */
export function useIerc20PermitAllowedPermit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof ierc20PermitAllowedABI,
          'permit'
        >['abi'],
        'permit'
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<TMode, typeof ierc20PermitAllowedABI, 'permit'> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof ierc20PermitAllowedABI, 'permit'>({
    abi: ierc20PermitAllowedABI,
    functionName: 'permit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitAllowedABI}__.
 */
export function usePrepareIerc20PermitAllowedWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20PermitAllowedABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20PermitAllowedABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof ierc20PermitAllowedABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link ierc20PermitAllowedABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareIerc20PermitAllowedPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof ierc20PermitAllowedABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: ierc20PermitAllowedABI,
    functionName: 'permit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof ierc20PermitAllowedABI, 'permit'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iFactoryABI}__.
 */
export function useIFactory(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iFactoryABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iFactoryABI}__.
 */
export function useIFactoryRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof iFactoryABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iFactoryABI,
    ...config,
  } as UseContractReadConfig<typeof iFactoryABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iFactoryABI}__ and `functionName` set to `"getLendgine"`.
 */
export function useIFactoryGetLendgine(
  config: Omit<
    UseContractReadConfig<typeof iFactoryABI, 'getLendgine'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iFactoryABI,
    functionName: 'getLendgine',
    ...config,
  } as UseContractReadConfig<typeof iFactoryABI, 'getLendgine'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iFactoryABI}__ and `functionName` set to `"parameters"`.
 */
export function useIFactoryParameters(
  config: Omit<
    UseContractReadConfig<typeof iFactoryABI, 'parameters'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iFactoryABI,
    functionName: 'parameters',
    ...config,
  } as UseContractReadConfig<typeof iFactoryABI, 'parameters'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iFactoryABI}__.
 */
export function useIFactoryWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iFactoryABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iFactoryABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iFactoryABI, TFunctionName>({
    abi: iFactoryABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iFactoryABI}__ and `functionName` set to `"createLendgine"`.
 */
export function useIFactoryCreateLendgine<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iFactoryABI, 'createLendgine'>['abi'],
        'createLendgine'
      > & { functionName?: 'createLendgine' }
    : UseContractWriteConfig<TMode, typeof iFactoryABI, 'createLendgine'> & {
        abi?: never
        functionName?: 'createLendgine'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iFactoryABI, 'createLendgine'>({
    abi: iFactoryABI,
    functionName: 'createLendgine',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iFactoryABI}__.
 */
export function usePrepareIFactoryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iFactoryABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iFactoryABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iFactoryABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iFactoryABI}__ and `functionName` set to `"createLendgine"`.
 */
export function usePrepareIFactoryCreateLendgine(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iFactoryABI, 'createLendgine'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iFactoryABI,
    functionName: 'createLendgine',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iFactoryABI, 'createLendgine'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iImmutableStateABI}__.
 */
export function useIImmutableState(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iImmutableStateABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iImmutableStateABI}__.
 */
export function useIImmutableStateRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof iImmutableStateABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iImmutableStateABI,
    ...config,
  } as UseContractReadConfig<typeof iImmutableStateABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iImmutableStateABI}__ and `functionName` set to `"factory"`.
 */
export function useIImmutableStateFactory(
  config: Omit<
    UseContractReadConfig<typeof iImmutableStateABI, 'factory'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iImmutableStateABI,
    functionName: 'factory',
    ...config,
  } as UseContractReadConfig<typeof iImmutableStateABI, 'factory'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iImmutableStateABI}__ and `functionName` set to `"token0"`.
 */
export function useIImmutableStateToken0(
  config: Omit<
    UseContractReadConfig<typeof iImmutableStateABI, 'token0'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iImmutableStateABI,
    functionName: 'token0',
    ...config,
  } as UseContractReadConfig<typeof iImmutableStateABI, 'token0'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iImmutableStateABI}__ and `functionName` set to `"token0Scale"`.
 */
export function useIImmutableStateToken0Scale(
  config: Omit<
    UseContractReadConfig<typeof iImmutableStateABI, 'token0Scale'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iImmutableStateABI,
    functionName: 'token0Scale',
    ...config,
  } as UseContractReadConfig<typeof iImmutableStateABI, 'token0Scale'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iImmutableStateABI}__ and `functionName` set to `"token1"`.
 */
export function useIImmutableStateToken1(
  config: Omit<
    UseContractReadConfig<typeof iImmutableStateABI, 'token1'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iImmutableStateABI,
    functionName: 'token1',
    ...config,
  } as UseContractReadConfig<typeof iImmutableStateABI, 'token1'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iImmutableStateABI}__ and `functionName` set to `"token1Scale"`.
 */
export function useIImmutableStateToken1Scale(
  config: Omit<
    UseContractReadConfig<typeof iImmutableStateABI, 'token1Scale'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iImmutableStateABI,
    functionName: 'token1Scale',
    ...config,
  } as UseContractReadConfig<typeof iImmutableStateABI, 'token1Scale'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iImmutableStateABI}__ and `functionName` set to `"upperBound"`.
 */
export function useIImmutableStateUpperBound(
  config: Omit<
    UseContractReadConfig<typeof iImmutableStateABI, 'upperBound'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iImmutableStateABI,
    functionName: 'upperBound',
    ...config,
  } as UseContractReadConfig<typeof iImmutableStateABI, 'upperBound'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iJumpRateABI}__.
 */
export function useIJumpRate(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iJumpRateABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iJumpRateABI}__.
 */
export function useIJumpRateRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof iJumpRateABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iJumpRateABI,
    ...config,
  } as UseContractReadConfig<typeof iJumpRateABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iJumpRateABI}__ and `functionName` set to `"getBorrowRate"`.
 */
export function useIJumpRateGetBorrowRate(
  config: Omit<
    UseContractReadConfig<typeof iJumpRateABI, 'getBorrowRate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iJumpRateABI,
    functionName: 'getBorrowRate',
    ...config,
  } as UseContractReadConfig<typeof iJumpRateABI, 'getBorrowRate'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iJumpRateABI}__ and `functionName` set to `"getSupplyRate"`.
 */
export function useIJumpRateGetSupplyRate(
  config: Omit<
    UseContractReadConfig<typeof iJumpRateABI, 'getSupplyRate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iJumpRateABI,
    functionName: 'getSupplyRate',
    ...config,
  } as UseContractReadConfig<typeof iJumpRateABI, 'getSupplyRate'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iJumpRateABI}__ and `functionName` set to `"jumpMultiplier"`.
 */
export function useIJumpRateJumpMultiplier(
  config: Omit<
    UseContractReadConfig<typeof iJumpRateABI, 'jumpMultiplier'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iJumpRateABI,
    functionName: 'jumpMultiplier',
    ...config,
  } as UseContractReadConfig<typeof iJumpRateABI, 'jumpMultiplier'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iJumpRateABI}__ and `functionName` set to `"kink"`.
 */
export function useIJumpRateKink(
  config: Omit<
    UseContractReadConfig<typeof iJumpRateABI, 'kink'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iJumpRateABI,
    functionName: 'kink',
    ...config,
  } as UseContractReadConfig<typeof iJumpRateABI, 'kink'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iJumpRateABI}__ and `functionName` set to `"multiplier"`.
 */
export function useIJumpRateMultiplier(
  config: Omit<
    UseContractReadConfig<typeof iJumpRateABI, 'multiplier'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iJumpRateABI,
    functionName: 'multiplier',
    ...config,
  } as UseContractReadConfig<typeof iJumpRateABI, 'multiplier'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iLendgineABI}__.
 */
export function useILendgine(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iLendgineABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLendgineABI}__.
 */
export function useILendgineRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof iLendgineABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iLendgineABI,
    ...config,
  } as UseContractReadConfig<typeof iLendgineABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLendgineABI}__ and `functionName` set to `"convertCollateralToLiquidity"`.
 */
export function useILendgineConvertCollateralToLiquidity(
  config: Omit<
    UseContractReadConfig<typeof iLendgineABI, 'convertCollateralToLiquidity'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLendgineABI,
    functionName: 'convertCollateralToLiquidity',
    ...config,
  } as UseContractReadConfig<
    typeof iLendgineABI,
    'convertCollateralToLiquidity'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLendgineABI}__ and `functionName` set to `"convertLiquidityToCollateral"`.
 */
export function useILendgineConvertLiquidityToCollateral(
  config: Omit<
    UseContractReadConfig<typeof iLendgineABI, 'convertLiquidityToCollateral'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLendgineABI,
    functionName: 'convertLiquidityToCollateral',
    ...config,
  } as UseContractReadConfig<
    typeof iLendgineABI,
    'convertLiquidityToCollateral'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLendgineABI}__ and `functionName` set to `"convertLiquidityToShare"`.
 */
export function useILendgineConvertLiquidityToShare(
  config: Omit<
    UseContractReadConfig<typeof iLendgineABI, 'convertLiquidityToShare'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLendgineABI,
    functionName: 'convertLiquidityToShare',
    ...config,
  } as UseContractReadConfig<typeof iLendgineABI, 'convertLiquidityToShare'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLendgineABI}__ and `functionName` set to `"convertShareToLiquidity"`.
 */
export function useILendgineConvertShareToLiquidity(
  config: Omit<
    UseContractReadConfig<typeof iLendgineABI, 'convertShareToLiquidity'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLendgineABI,
    functionName: 'convertShareToLiquidity',
    ...config,
  } as UseContractReadConfig<typeof iLendgineABI, 'convertShareToLiquidity'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLendgineABI}__ and `functionName` set to `"factory"`.
 */
export function useILendgineFactory(
  config: Omit<
    UseContractReadConfig<typeof iLendgineABI, 'factory'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLendgineABI,
    functionName: 'factory',
    ...config,
  } as UseContractReadConfig<typeof iLendgineABI, 'factory'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLendgineABI}__ and `functionName` set to `"invariant"`.
 */
export function useILendgineInvariant(
  config: Omit<
    UseContractReadConfig<typeof iLendgineABI, 'invariant'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLendgineABI,
    functionName: 'invariant',
    ...config,
  } as UseContractReadConfig<typeof iLendgineABI, 'invariant'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLendgineABI}__ and `functionName` set to `"lastUpdate"`.
 */
export function useILendgineLastUpdate(
  config: Omit<
    UseContractReadConfig<typeof iLendgineABI, 'lastUpdate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLendgineABI,
    functionName: 'lastUpdate',
    ...config,
  } as UseContractReadConfig<typeof iLendgineABI, 'lastUpdate'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLendgineABI}__ and `functionName` set to `"positions"`.
 */
export function useILendginePositions(
  config: Omit<
    UseContractReadConfig<typeof iLendgineABI, 'positions'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLendgineABI,
    functionName: 'positions',
    ...config,
  } as UseContractReadConfig<typeof iLendgineABI, 'positions'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLendgineABI}__ and `functionName` set to `"reserve0"`.
 */
export function useILendgineReserve0(
  config: Omit<
    UseContractReadConfig<typeof iLendgineABI, 'reserve0'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLendgineABI,
    functionName: 'reserve0',
    ...config,
  } as UseContractReadConfig<typeof iLendgineABI, 'reserve0'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLendgineABI}__ and `functionName` set to `"reserve1"`.
 */
export function useILendgineReserve1(
  config: Omit<
    UseContractReadConfig<typeof iLendgineABI, 'reserve1'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLendgineABI,
    functionName: 'reserve1',
    ...config,
  } as UseContractReadConfig<typeof iLendgineABI, 'reserve1'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLendgineABI}__ and `functionName` set to `"rewardPerPositionStored"`.
 */
export function useILendgineRewardPerPositionStored(
  config: Omit<
    UseContractReadConfig<typeof iLendgineABI, 'rewardPerPositionStored'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLendgineABI,
    functionName: 'rewardPerPositionStored',
    ...config,
  } as UseContractReadConfig<typeof iLendgineABI, 'rewardPerPositionStored'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLendgineABI}__ and `functionName` set to `"token0"`.
 */
export function useILendgineToken0(
  config: Omit<
    UseContractReadConfig<typeof iLendgineABI, 'token0'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLendgineABI,
    functionName: 'token0',
    ...config,
  } as UseContractReadConfig<typeof iLendgineABI, 'token0'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLendgineABI}__ and `functionName` set to `"token0Scale"`.
 */
export function useILendgineToken0Scale(
  config: Omit<
    UseContractReadConfig<typeof iLendgineABI, 'token0Scale'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLendgineABI,
    functionName: 'token0Scale',
    ...config,
  } as UseContractReadConfig<typeof iLendgineABI, 'token0Scale'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLendgineABI}__ and `functionName` set to `"token1"`.
 */
export function useILendgineToken1(
  config: Omit<
    UseContractReadConfig<typeof iLendgineABI, 'token1'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLendgineABI,
    functionName: 'token1',
    ...config,
  } as UseContractReadConfig<typeof iLendgineABI, 'token1'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLendgineABI}__ and `functionName` set to `"token1Scale"`.
 */
export function useILendgineToken1Scale(
  config: Omit<
    UseContractReadConfig<typeof iLendgineABI, 'token1Scale'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLendgineABI,
    functionName: 'token1Scale',
    ...config,
  } as UseContractReadConfig<typeof iLendgineABI, 'token1Scale'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLendgineABI}__ and `functionName` set to `"totalLiquidity"`.
 */
export function useILendgineTotalLiquidity(
  config: Omit<
    UseContractReadConfig<typeof iLendgineABI, 'totalLiquidity'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLendgineABI,
    functionName: 'totalLiquidity',
    ...config,
  } as UseContractReadConfig<typeof iLendgineABI, 'totalLiquidity'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLendgineABI}__ and `functionName` set to `"totalLiquidityBorrowed"`.
 */
export function useILendgineTotalLiquidityBorrowed(
  config: Omit<
    UseContractReadConfig<typeof iLendgineABI, 'totalLiquidityBorrowed'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLendgineABI,
    functionName: 'totalLiquidityBorrowed',
    ...config,
  } as UseContractReadConfig<typeof iLendgineABI, 'totalLiquidityBorrowed'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLendgineABI}__ and `functionName` set to `"totalPositionSize"`.
 */
export function useILendgineTotalPositionSize(
  config: Omit<
    UseContractReadConfig<typeof iLendgineABI, 'totalPositionSize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLendgineABI,
    functionName: 'totalPositionSize',
    ...config,
  } as UseContractReadConfig<typeof iLendgineABI, 'totalPositionSize'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iLendgineABI}__ and `functionName` set to `"upperBound"`.
 */
export function useILendgineUpperBound(
  config: Omit<
    UseContractReadConfig<typeof iLendgineABI, 'upperBound'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iLendgineABI,
    functionName: 'upperBound',
    ...config,
  } as UseContractReadConfig<typeof iLendgineABI, 'upperBound'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLendgineABI}__.
 */
export function useILendgineWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iLendgineABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iLendgineABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLendgineABI, TFunctionName>({
    abi: iLendgineABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLendgineABI}__ and `functionName` set to `"accrueInterest"`.
 */
export function useILendgineAccrueInterest<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iLendgineABI,
          'accrueInterest'
        >['abi'],
        'accrueInterest'
      > & { functionName?: 'accrueInterest' }
    : UseContractWriteConfig<TMode, typeof iLendgineABI, 'accrueInterest'> & {
        abi?: never
        functionName?: 'accrueInterest'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLendgineABI, 'accrueInterest'>({
    abi: iLendgineABI,
    functionName: 'accrueInterest',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLendgineABI}__ and `functionName` set to `"accruePositionInterest"`.
 */
export function useILendgineAccruePositionInterest<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iLendgineABI,
          'accruePositionInterest'
        >['abi'],
        'accruePositionInterest'
      > & { functionName?: 'accruePositionInterest' }
    : UseContractWriteConfig<
        TMode,
        typeof iLendgineABI,
        'accruePositionInterest'
      > & {
        abi?: never
        functionName?: 'accruePositionInterest'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLendgineABI, 'accruePositionInterest'>(
    {
      abi: iLendgineABI,
      functionName: 'accruePositionInterest',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLendgineABI}__ and `functionName` set to `"burn"`.
 */
export function useILendgineBurn<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iLendgineABI, 'burn'>['abi'],
        'burn'
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<TMode, typeof iLendgineABI, 'burn'> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLendgineABI, 'burn'>({
    abi: iLendgineABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLendgineABI}__ and `functionName` set to `"collect"`.
 */
export function useILendgineCollect<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iLendgineABI, 'collect'>['abi'],
        'collect'
      > & { functionName?: 'collect' }
    : UseContractWriteConfig<TMode, typeof iLendgineABI, 'collect'> & {
        abi?: never
        functionName?: 'collect'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLendgineABI, 'collect'>({
    abi: iLendgineABI,
    functionName: 'collect',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLendgineABI}__ and `functionName` set to `"deposit"`.
 */
export function useILendgineDeposit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iLendgineABI, 'deposit'>['abi'],
        'deposit'
      > & { functionName?: 'deposit' }
    : UseContractWriteConfig<TMode, typeof iLendgineABI, 'deposit'> & {
        abi?: never
        functionName?: 'deposit'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLendgineABI, 'deposit'>({
    abi: iLendgineABI,
    functionName: 'deposit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLendgineABI}__ and `functionName` set to `"mint"`.
 */
export function useILendgineMint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iLendgineABI, 'mint'>['abi'],
        'mint'
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<TMode, typeof iLendgineABI, 'mint'> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLendgineABI, 'mint'>({
    abi: iLendgineABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLendgineABI}__ and `functionName` set to `"swap"`.
 */
export function useILendgineSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iLendgineABI, 'swap'>['abi'],
        'swap'
      > & { functionName?: 'swap' }
    : UseContractWriteConfig<TMode, typeof iLendgineABI, 'swap'> & {
        abi?: never
        functionName?: 'swap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLendgineABI, 'swap'>({
    abi: iLendgineABI,
    functionName: 'swap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iLendgineABI}__ and `functionName` set to `"withdraw"`.
 */
export function useILendgineWithdraw<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iLendgineABI, 'withdraw'>['abi'],
        'withdraw'
      > & { functionName?: 'withdraw' }
    : UseContractWriteConfig<TMode, typeof iLendgineABI, 'withdraw'> & {
        abi?: never
        functionName?: 'withdraw'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iLendgineABI, 'withdraw'>({
    abi: iLendgineABI,
    functionName: 'withdraw',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLendgineABI}__.
 */
export function usePrepareILendgineWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLendgineABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLendgineABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iLendgineABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLendgineABI}__ and `functionName` set to `"accrueInterest"`.
 */
export function usePrepareILendgineAccrueInterest(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLendgineABI, 'accrueInterest'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLendgineABI,
    functionName: 'accrueInterest',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iLendgineABI, 'accrueInterest'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLendgineABI}__ and `functionName` set to `"accruePositionInterest"`.
 */
export function usePrepareILendgineAccruePositionInterest(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iLendgineABI,
      'accruePositionInterest'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLendgineABI,
    functionName: 'accruePositionInterest',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iLendgineABI,
    'accruePositionInterest'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLendgineABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareILendgineBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLendgineABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLendgineABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iLendgineABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLendgineABI}__ and `functionName` set to `"collect"`.
 */
export function usePrepareILendgineCollect(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLendgineABI, 'collect'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLendgineABI,
    functionName: 'collect',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iLendgineABI, 'collect'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLendgineABI}__ and `functionName` set to `"deposit"`.
 */
export function usePrepareILendgineDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLendgineABI, 'deposit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLendgineABI,
    functionName: 'deposit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iLendgineABI, 'deposit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLendgineABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareILendgineMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLendgineABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLendgineABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iLendgineABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLendgineABI}__ and `functionName` set to `"swap"`.
 */
export function usePrepareILendgineSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLendgineABI, 'swap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLendgineABI,
    functionName: 'swap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iLendgineABI, 'swap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iLendgineABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePrepareILendgineWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iLendgineABI, 'withdraw'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iLendgineABI,
    functionName: 'withdraw',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iLendgineABI, 'withdraw'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iMintCallbackABI}__.
 */
export function useIMintCallback(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iMintCallbackABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMintCallbackABI}__.
 */
export function useIMintCallbackWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iMintCallbackABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iMintCallbackABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMintCallbackABI, TFunctionName>({
    abi: iMintCallbackABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMintCallbackABI}__ and `functionName` set to `"mintCallback"`.
 */
export function useIMintCallbackMintCallback<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMintCallbackABI,
          'mintCallback'
        >['abi'],
        'mintCallback'
      > & { functionName?: 'mintCallback' }
    : UseContractWriteConfig<TMode, typeof iMintCallbackABI, 'mintCallback'> & {
        abi?: never
        functionName?: 'mintCallback'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMintCallbackABI, 'mintCallback'>({
    abi: iMintCallbackABI,
    functionName: 'mintCallback',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMintCallbackABI}__.
 */
export function usePrepareIMintCallbackWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMintCallbackABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMintCallbackABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMintCallbackABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMintCallbackABI}__ and `functionName` set to `"mintCallback"`.
 */
export function usePrepareIMintCallbackMintCallback(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMintCallbackABI, 'mintCallback'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMintCallbackABI,
    functionName: 'mintCallback',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMintCallbackABI, 'mintCallback'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iMulticallABI}__.
 */
export function useIMulticall(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iMulticallABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticallABI}__.
 */
export function useIMulticallWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iMulticallABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iMulticallABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMulticallABI, TFunctionName>({
    abi: iMulticallABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticallABI}__ and `functionName` set to `"multicall"`.
 */
export function useIMulticallMulticall<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iMulticallABI, 'multicall'>['abi'],
        'multicall'
      > & { functionName?: 'multicall' }
    : UseContractWriteConfig<TMode, typeof iMulticallABI, 'multicall'> & {
        abi?: never
        functionName?: 'multicall'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMulticallABI, 'multicall'>({
    abi: iMulticallABI,
    functionName: 'multicall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticallABI}__.
 */
export function usePrepareIMulticallWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticallABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticallABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticallABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticallABI}__ and `functionName` set to `"multicall"`.
 */
export function usePrepareIMulticallMulticall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticallABI, 'multicall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticallABI,
    functionName: 'multicall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticallABI, 'multicall'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function useIMulticall3(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iMulticall3ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function useIMulticall3Read<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBasefee"`.
 */
export function useIMulticall3GetBasefee(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, 'getBasefee'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getBasefee',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, 'getBasefee'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBlockHash"`.
 */
export function useIMulticall3GetBlockHash(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, 'getBlockHash'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getBlockHash',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, 'getBlockHash'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBlockNumber"`.
 */
export function useIMulticall3GetBlockNumber(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, 'getBlockNumber'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getBlockNumber',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, 'getBlockNumber'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getChainId"`.
 */
export function useIMulticall3GetChainId(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, 'getChainId'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getChainId',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, 'getChainId'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockCoinbase"`.
 */
export function useIMulticall3GetCurrentBlockCoinbase(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, 'getCurrentBlockCoinbase'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockCoinbase',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, 'getCurrentBlockCoinbase'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockDifficulty"`.
 */
export function useIMulticall3GetCurrentBlockDifficulty(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, 'getCurrentBlockDifficulty'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockDifficulty',
    ...config,
  } as UseContractReadConfig<
    typeof iMulticall3ABI,
    'getCurrentBlockDifficulty'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockGasLimit"`.
 */
export function useIMulticall3GetCurrentBlockGasLimit(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, 'getCurrentBlockGasLimit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockGasLimit',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, 'getCurrentBlockGasLimit'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockTimestamp"`.
 */
export function useIMulticall3GetCurrentBlockTimestamp(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, 'getCurrentBlockTimestamp'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getCurrentBlockTimestamp',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, 'getCurrentBlockTimestamp'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getEthBalance"`.
 */
export function useIMulticall3GetEthBalance(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, 'getEthBalance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getEthBalance',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, 'getEthBalance'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getLastBlockHash"`.
 */
export function useIMulticall3GetLastBlockHash(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, 'getLastBlockHash'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: 'getLastBlockHash',
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, 'getLastBlockHash'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function useIMulticall3Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iMulticall3ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iMulticall3ABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMulticall3ABI, TFunctionName>({
    abi: iMulticall3ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate"`.
 */
export function useIMulticall3Aggregate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iMulticall3ABI, 'aggregate'>['abi'],
        'aggregate'
      > & { functionName?: 'aggregate' }
    : UseContractWriteConfig<TMode, typeof iMulticall3ABI, 'aggregate'> & {
        abi?: never
        functionName?: 'aggregate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMulticall3ABI, 'aggregate'>({
    abi: iMulticall3ABI,
    functionName: 'aggregate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3"`.
 */
export function useIMulticall3Aggregate3<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iMulticall3ABI, 'aggregate3'>['abi'],
        'aggregate3'
      > & { functionName?: 'aggregate3' }
    : UseContractWriteConfig<TMode, typeof iMulticall3ABI, 'aggregate3'> & {
        abi?: never
        functionName?: 'aggregate3'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMulticall3ABI, 'aggregate3'>({
    abi: iMulticall3ABI,
    functionName: 'aggregate3',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3Value"`.
 */
export function useIMulticall3Aggregate3Value<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'aggregate3Value'
        >['abi'],
        'aggregate3Value'
      > & { functionName?: 'aggregate3Value' }
    : UseContractWriteConfig<
        TMode,
        typeof iMulticall3ABI,
        'aggregate3Value'
      > & {
        abi?: never
        functionName?: 'aggregate3Value'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMulticall3ABI, 'aggregate3Value'>({
    abi: iMulticall3ABI,
    functionName: 'aggregate3Value',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"blockAndAggregate"`.
 */
export function useIMulticall3BlockAndAggregate<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'blockAndAggregate'
        >['abi'],
        'blockAndAggregate'
      > & { functionName?: 'blockAndAggregate' }
    : UseContractWriteConfig<
        TMode,
        typeof iMulticall3ABI,
        'blockAndAggregate'
      > & {
        abi?: never
        functionName?: 'blockAndAggregate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMulticall3ABI, 'blockAndAggregate'>({
    abi: iMulticall3ABI,
    functionName: 'blockAndAggregate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryAggregate"`.
 */
export function useIMulticall3TryAggregate<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'tryAggregate'
        >['abi'],
        'tryAggregate'
      > & { functionName?: 'tryAggregate' }
    : UseContractWriteConfig<TMode, typeof iMulticall3ABI, 'tryAggregate'> & {
        abi?: never
        functionName?: 'tryAggregate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMulticall3ABI, 'tryAggregate'>({
    abi: iMulticall3ABI,
    functionName: 'tryAggregate',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryBlockAndAggregate"`.
 */
export function useIMulticall3TryBlockAndAggregate<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          'tryBlockAndAggregate'
        >['abi'],
        'tryBlockAndAggregate'
      > & { functionName?: 'tryBlockAndAggregate' }
    : UseContractWriteConfig<
        TMode,
        typeof iMulticall3ABI,
        'tryBlockAndAggregate'
      > & {
        abi?: never
        functionName?: 'tryBlockAndAggregate'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iMulticall3ABI, 'tryBlockAndAggregate'>(
    {
      abi: iMulticall3ABI,
      functionName: 'tryBlockAndAggregate',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function usePrepareIMulticall3Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate"`.
 */
export function usePrepareIMulticall3Aggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'aggregate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3"`.
 */
export function usePrepareIMulticall3Aggregate3(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'aggregate3',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3Value"`.
 */
export function usePrepareIMulticall3Aggregate3Value(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3Value'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'aggregate3Value',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'aggregate3Value'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"blockAndAggregate"`.
 */
export function usePrepareIMulticall3BlockAndAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'blockAndAggregate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'blockAndAggregate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iMulticall3ABI,
    'blockAndAggregate'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryAggregate"`.
 */
export function usePrepareIMulticall3TryAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'tryAggregate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'tryAggregate',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, 'tryAggregate'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryBlockAndAggregate"`.
 */
export function usePrepareIMulticall3TryBlockAndAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iMulticall3ABI,
      'tryBlockAndAggregate'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: 'tryBlockAndAggregate',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iMulticall3ABI,
    'tryBlockAndAggregate'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iPairABI}__.
 */
export function useIPair(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: iPairABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPairABI}__.
 */
export function useIPairRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof iPairABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: iPairABI, ...config } as UseContractReadConfig<
    typeof iPairABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPairABI}__ and `functionName` set to `"factory"`.
 */
export function useIPairFactory(
  config: Omit<
    UseContractReadConfig<typeof iPairABI, 'factory'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPairABI,
    functionName: 'factory',
    ...config,
  } as UseContractReadConfig<typeof iPairABI, 'factory'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPairABI}__ and `functionName` set to `"invariant"`.
 */
export function useIPairInvariant(
  config: Omit<
    UseContractReadConfig<typeof iPairABI, 'invariant'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPairABI,
    functionName: 'invariant',
    ...config,
  } as UseContractReadConfig<typeof iPairABI, 'invariant'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPairABI}__ and `functionName` set to `"reserve0"`.
 */
export function useIPairReserve0(
  config: Omit<
    UseContractReadConfig<typeof iPairABI, 'reserve0'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPairABI,
    functionName: 'reserve0',
    ...config,
  } as UseContractReadConfig<typeof iPairABI, 'reserve0'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPairABI}__ and `functionName` set to `"reserve1"`.
 */
export function useIPairReserve1(
  config: Omit<
    UseContractReadConfig<typeof iPairABI, 'reserve1'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPairABI,
    functionName: 'reserve1',
    ...config,
  } as UseContractReadConfig<typeof iPairABI, 'reserve1'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPairABI}__ and `functionName` set to `"token0"`.
 */
export function useIPairToken0(
  config: Omit<
    UseContractReadConfig<typeof iPairABI, 'token0'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPairABI,
    functionName: 'token0',
    ...config,
  } as UseContractReadConfig<typeof iPairABI, 'token0'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPairABI}__ and `functionName` set to `"token0Scale"`.
 */
export function useIPairToken0Scale(
  config: Omit<
    UseContractReadConfig<typeof iPairABI, 'token0Scale'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPairABI,
    functionName: 'token0Scale',
    ...config,
  } as UseContractReadConfig<typeof iPairABI, 'token0Scale'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPairABI}__ and `functionName` set to `"token1"`.
 */
export function useIPairToken1(
  config: Omit<
    UseContractReadConfig<typeof iPairABI, 'token1'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPairABI,
    functionName: 'token1',
    ...config,
  } as UseContractReadConfig<typeof iPairABI, 'token1'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPairABI}__ and `functionName` set to `"token1Scale"`.
 */
export function useIPairToken1Scale(
  config: Omit<
    UseContractReadConfig<typeof iPairABI, 'token1Scale'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPairABI,
    functionName: 'token1Scale',
    ...config,
  } as UseContractReadConfig<typeof iPairABI, 'token1Scale'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPairABI}__ and `functionName` set to `"totalLiquidity"`.
 */
export function useIPairTotalLiquidity(
  config: Omit<
    UseContractReadConfig<typeof iPairABI, 'totalLiquidity'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPairABI,
    functionName: 'totalLiquidity',
    ...config,
  } as UseContractReadConfig<typeof iPairABI, 'totalLiquidity'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iPairABI}__ and `functionName` set to `"upperBound"`.
 */
export function useIPairUpperBound(
  config: Omit<
    UseContractReadConfig<typeof iPairABI, 'upperBound'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iPairABI,
    functionName: 'upperBound',
    ...config,
  } as UseContractReadConfig<typeof iPairABI, 'upperBound'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPairABI}__.
 */
export function useIPairWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iPairABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iPairABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iPairABI, TFunctionName>({
    abi: iPairABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPairABI}__ and `functionName` set to `"swap"`.
 */
export function useIPairSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iPairABI, 'swap'>['abi'],
        'swap'
      > & { functionName?: 'swap' }
    : UseContractWriteConfig<TMode, typeof iPairABI, 'swap'> & {
        abi?: never
        functionName?: 'swap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iPairABI, 'swap'>({
    abi: iPairABI,
    functionName: 'swap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPairABI}__.
 */
export function usePrepareIPairWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPairABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPairABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPairABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPairABI}__ and `functionName` set to `"swap"`.
 */
export function usePrepareIPairSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPairABI, 'swap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPairABI,
    functionName: 'swap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iPairABI, 'swap'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iPairMintCallbackABI}__.
 */
export function useIPairMintCallback(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iPairMintCallbackABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPairMintCallbackABI}__.
 */
export function useIPairMintCallbackWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iPairMintCallbackABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof iPairMintCallbackABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iPairMintCallbackABI, TFunctionName>({
    abi: iPairMintCallbackABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iPairMintCallbackABI}__ and `functionName` set to `"pairMintCallback"`.
 */
export function useIPairMintCallbackPairMintCallback<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iPairMintCallbackABI,
          'pairMintCallback'
        >['abi'],
        'pairMintCallback'
      > & { functionName?: 'pairMintCallback' }
    : UseContractWriteConfig<
        TMode,
        typeof iPairMintCallbackABI,
        'pairMintCallback'
      > & {
        abi?: never
        functionName?: 'pairMintCallback'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iPairMintCallbackABI,
    'pairMintCallback'
  >({
    abi: iPairMintCallbackABI,
    functionName: 'pairMintCallback',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPairMintCallbackABI}__.
 */
export function usePrepareIPairMintCallbackWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iPairMintCallbackABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPairMintCallbackABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iPairMintCallbackABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iPairMintCallbackABI}__ and `functionName` set to `"pairMintCallback"`.
 */
export function usePrepareIPairMintCallbackPairMintCallback(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iPairMintCallbackABI,
      'pairMintCallback'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iPairMintCallbackABI,
    functionName: 'pairMintCallback',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iPairMintCallbackABI,
    'pairMintCallback'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iSelfPermitABI}__.
 */
export function useISelfPermit(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iSelfPermitABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSelfPermitABI}__.
 */
export function useISelfPermitWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iSelfPermitABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iSelfPermitABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iSelfPermitABI, TFunctionName>({
    abi: iSelfPermitABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSelfPermitABI}__ and `functionName` set to `"selfPermit"`.
 */
export function useISelfPermitSelfPermit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iSelfPermitABI, 'selfPermit'>['abi'],
        'selfPermit'
      > & { functionName?: 'selfPermit' }
    : UseContractWriteConfig<TMode, typeof iSelfPermitABI, 'selfPermit'> & {
        abi?: never
        functionName?: 'selfPermit'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iSelfPermitABI, 'selfPermit'>({
    abi: iSelfPermitABI,
    functionName: 'selfPermit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSelfPermitABI}__ and `functionName` set to `"selfPermitAllowed"`.
 */
export function useISelfPermitSelfPermitAllowed<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iSelfPermitABI,
          'selfPermitAllowed'
        >['abi'],
        'selfPermitAllowed'
      > & { functionName?: 'selfPermitAllowed' }
    : UseContractWriteConfig<
        TMode,
        typeof iSelfPermitABI,
        'selfPermitAllowed'
      > & {
        abi?: never
        functionName?: 'selfPermitAllowed'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iSelfPermitABI, 'selfPermitAllowed'>({
    abi: iSelfPermitABI,
    functionName: 'selfPermitAllowed',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSelfPermitABI}__.
 */
export function usePrepareISelfPermitWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSelfPermitABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSelfPermitABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSelfPermitABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSelfPermitABI}__ and `functionName` set to `"selfPermit"`.
 */
export function usePrepareISelfPermitSelfPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSelfPermitABI, 'selfPermit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSelfPermitABI,
    functionName: 'selfPermit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSelfPermitABI, 'selfPermit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSelfPermitABI}__ and `functionName` set to `"selfPermitAllowed"`.
 */
export function usePrepareISelfPermitSelfPermitAllowed(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSelfPermitABI, 'selfPermitAllowed'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSelfPermitABI,
    functionName: 'selfPermitAllowed',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iSelfPermitABI,
    'selfPermitAllowed'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iUniswapV2FactoryABI}__.
 */
export function useIUniswapV2Factory(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iUniswapV2FactoryABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV2FactoryABI}__.
 */
export function useIUniswapV2FactoryRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV2FactoryABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV2FactoryABI,
    ...config,
  } as UseContractReadConfig<typeof iUniswapV2FactoryABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV2FactoryABI}__ and `functionName` set to `"allPairs"`.
 */
export function useIUniswapV2FactoryAllPairs(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV2FactoryABI, 'allPairs'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV2FactoryABI,
    functionName: 'allPairs',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV2FactoryABI, 'allPairs'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV2FactoryABI}__ and `functionName` set to `"allPairsLength"`.
 */
export function useIUniswapV2FactoryAllPairsLength(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV2FactoryABI, 'allPairsLength'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV2FactoryABI,
    functionName: 'allPairsLength',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV2FactoryABI, 'allPairsLength'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV2FactoryABI}__ and `functionName` set to `"feeTo"`.
 */
export function useIUniswapV2FactoryFeeTo(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV2FactoryABI, 'feeTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV2FactoryABI,
    functionName: 'feeTo',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV2FactoryABI, 'feeTo'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV2FactoryABI}__ and `functionName` set to `"feeToSetter"`.
 */
export function useIUniswapV2FactoryFeeToSetter(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV2FactoryABI, 'feeToSetter'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV2FactoryABI,
    functionName: 'feeToSetter',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV2FactoryABI, 'feeToSetter'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV2FactoryABI}__ and `functionName` set to `"getPair"`.
 */
export function useIUniswapV2FactoryGetPair(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV2FactoryABI, 'getPair'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV2FactoryABI,
    functionName: 'getPair',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV2FactoryABI, 'getPair'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV2FactoryABI}__ and `functionName` set to `"migrator"`.
 */
export function useIUniswapV2FactoryMigrator(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV2FactoryABI, 'migrator'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV2FactoryABI,
    functionName: 'migrator',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV2FactoryABI, 'migrator'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iUniswapV2FactoryABI}__.
 */
export function useIUniswapV2FactoryWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iUniswapV2FactoryABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof iUniswapV2FactoryABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iUniswapV2FactoryABI, TFunctionName>({
    abi: iUniswapV2FactoryABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iUniswapV2FactoryABI}__ and `functionName` set to `"createPair"`.
 */
export function useIUniswapV2FactoryCreatePair<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iUniswapV2FactoryABI,
          'createPair'
        >['abi'],
        'createPair'
      > & { functionName?: 'createPair' }
    : UseContractWriteConfig<
        TMode,
        typeof iUniswapV2FactoryABI,
        'createPair'
      > & {
        abi?: never
        functionName?: 'createPair'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iUniswapV2FactoryABI, 'createPair'>({
    abi: iUniswapV2FactoryABI,
    functionName: 'createPair',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iUniswapV2FactoryABI}__ and `functionName` set to `"setFeeTo"`.
 */
export function useIUniswapV2FactorySetFeeTo<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iUniswapV2FactoryABI,
          'setFeeTo'
        >['abi'],
        'setFeeTo'
      > & { functionName?: 'setFeeTo' }
    : UseContractWriteConfig<TMode, typeof iUniswapV2FactoryABI, 'setFeeTo'> & {
        abi?: never
        functionName?: 'setFeeTo'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iUniswapV2FactoryABI, 'setFeeTo'>({
    abi: iUniswapV2FactoryABI,
    functionName: 'setFeeTo',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iUniswapV2FactoryABI}__ and `functionName` set to `"setFeeToSetter"`.
 */
export function useIUniswapV2FactorySetFeeToSetter<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iUniswapV2FactoryABI,
          'setFeeToSetter'
        >['abi'],
        'setFeeToSetter'
      > & { functionName?: 'setFeeToSetter' }
    : UseContractWriteConfig<
        TMode,
        typeof iUniswapV2FactoryABI,
        'setFeeToSetter'
      > & {
        abi?: never
        functionName?: 'setFeeToSetter'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iUniswapV2FactoryABI, 'setFeeToSetter'>(
    {
      abi: iUniswapV2FactoryABI,
      functionName: 'setFeeToSetter',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iUniswapV2FactoryABI}__ and `functionName` set to `"setMigrator"`.
 */
export function useIUniswapV2FactorySetMigrator<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iUniswapV2FactoryABI,
          'setMigrator'
        >['abi'],
        'setMigrator'
      > & { functionName?: 'setMigrator' }
    : UseContractWriteConfig<
        TMode,
        typeof iUniswapV2FactoryABI,
        'setMigrator'
      > & {
        abi?: never
        functionName?: 'setMigrator'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iUniswapV2FactoryABI, 'setMigrator'>({
    abi: iUniswapV2FactoryABI,
    functionName: 'setMigrator',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iUniswapV2FactoryABI}__.
 */
export function usePrepareIUniswapV2FactoryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iUniswapV2FactoryABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iUniswapV2FactoryABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iUniswapV2FactoryABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iUniswapV2FactoryABI}__ and `functionName` set to `"createPair"`.
 */
export function usePrepareIUniswapV2FactoryCreatePair(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iUniswapV2FactoryABI, 'createPair'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iUniswapV2FactoryABI,
    functionName: 'createPair',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iUniswapV2FactoryABI, 'createPair'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iUniswapV2FactoryABI}__ and `functionName` set to `"setFeeTo"`.
 */
export function usePrepareIUniswapV2FactorySetFeeTo(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iUniswapV2FactoryABI, 'setFeeTo'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iUniswapV2FactoryABI,
    functionName: 'setFeeTo',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iUniswapV2FactoryABI, 'setFeeTo'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iUniswapV2FactoryABI}__ and `functionName` set to `"setFeeToSetter"`.
 */
export function usePrepareIUniswapV2FactorySetFeeToSetter(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iUniswapV2FactoryABI,
      'setFeeToSetter'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iUniswapV2FactoryABI,
    functionName: 'setFeeToSetter',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iUniswapV2FactoryABI,
    'setFeeToSetter'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iUniswapV2FactoryABI}__ and `functionName` set to `"setMigrator"`.
 */
export function usePrepareIUniswapV2FactorySetMigrator(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iUniswapV2FactoryABI, 'setMigrator'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iUniswapV2FactoryABI,
    functionName: 'setMigrator',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iUniswapV2FactoryABI,
    'setMigrator'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iUniswapV2FactoryABI}__.
 */
export function useIUniswapV2FactoryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iUniswapV2FactoryABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iUniswapV2FactoryABI,
    ...config,
  } as UseContractEventConfig<typeof iUniswapV2FactoryABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iUniswapV2FactoryABI}__ and `eventName` set to `"PairCreated"`.
 */
export function useIUniswapV2FactoryPairCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof iUniswapV2FactoryABI, 'PairCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iUniswapV2FactoryABI,
    eventName: 'PairCreated',
    ...config,
  } as UseContractEventConfig<typeof iUniswapV2FactoryABI, 'PairCreated'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iSwapCallbackABI}__.
 */
export function useISwapCallback(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iSwapCallbackABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSwapCallbackABI}__.
 */
export function useISwapCallbackWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iSwapCallbackABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iSwapCallbackABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iSwapCallbackABI, TFunctionName>({
    abi: iSwapCallbackABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iSwapCallbackABI}__ and `functionName` set to `"swapCallback"`.
 */
export function useISwapCallbackSwapCallback<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iSwapCallbackABI,
          'swapCallback'
        >['abi'],
        'swapCallback'
      > & { functionName?: 'swapCallback' }
    : UseContractWriteConfig<TMode, typeof iSwapCallbackABI, 'swapCallback'> & {
        abi?: never
        functionName?: 'swapCallback'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iSwapCallbackABI, 'swapCallback'>({
    abi: iSwapCallbackABI,
    functionName: 'swapCallback',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSwapCallbackABI}__.
 */
export function usePrepareISwapCallbackWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSwapCallbackABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSwapCallbackABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSwapCallbackABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iSwapCallbackABI}__ and `functionName` set to `"swapCallback"`.
 */
export function usePrepareISwapCallbackSwapCallback(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iSwapCallbackABI, 'swapCallback'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iSwapCallbackABI,
    functionName: 'swapCallback',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iSwapCallbackABI, 'swapCallback'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iUniswapV2PairABI}__.
 */
export function useIUniswapV2Pair(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iUniswapV2PairABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV2PairABI}__.
 */
export function useIUniswapV2PairRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV2PairABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV2PairABI,
    ...config,
  } as UseContractReadConfig<typeof iUniswapV2PairABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV2PairABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useIUniswapV2PairDomainSeparator(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV2PairABI, 'DOMAIN_SEPARATOR'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV2PairABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV2PairABI, 'DOMAIN_SEPARATOR'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV2PairABI}__ and `functionName` set to `"MINIMUM_LIQUIDITY"`.
 */
export function useIUniswapV2PairMinimumLiquidity(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV2PairABI, 'MINIMUM_LIQUIDITY'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV2PairABI,
    functionName: 'MINIMUM_LIQUIDITY',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV2PairABI, 'MINIMUM_LIQUIDITY'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV2PairABI}__ and `functionName` set to `"PERMIT_TYPEHASH"`.
 */
export function useIUniswapV2PairPermitTypehash(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV2PairABI, 'PERMIT_TYPEHASH'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV2PairABI,
    functionName: 'PERMIT_TYPEHASH',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV2PairABI, 'PERMIT_TYPEHASH'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV2PairABI}__ and `functionName` set to `"allowance"`.
 */
export function useIUniswapV2PairAllowance(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV2PairABI, 'allowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV2PairABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV2PairABI, 'allowance'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV2PairABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useIUniswapV2PairBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV2PairABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV2PairABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV2PairABI, 'balanceOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV2PairABI}__ and `functionName` set to `"decimals"`.
 */
export function useIUniswapV2PairDecimals(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV2PairABI, 'decimals'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV2PairABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV2PairABI, 'decimals'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV2PairABI}__ and `functionName` set to `"factory"`.
 */
export function useIUniswapV2PairFactory(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV2PairABI, 'factory'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV2PairABI,
    functionName: 'factory',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV2PairABI, 'factory'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV2PairABI}__ and `functionName` set to `"getReserves"`.
 */
export function useIUniswapV2PairGetReserves(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV2PairABI, 'getReserves'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV2PairABI,
    functionName: 'getReserves',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV2PairABI, 'getReserves'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV2PairABI}__ and `functionName` set to `"kLast"`.
 */
export function useIUniswapV2PairKLast(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV2PairABI, 'kLast'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV2PairABI,
    functionName: 'kLast',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV2PairABI, 'kLast'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV2PairABI}__ and `functionName` set to `"name"`.
 */
export function useIUniswapV2PairName(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV2PairABI, 'name'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV2PairABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV2PairABI, 'name'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV2PairABI}__ and `functionName` set to `"nonces"`.
 */
export function useIUniswapV2PairNonces(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV2PairABI, 'nonces'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV2PairABI,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV2PairABI, 'nonces'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV2PairABI}__ and `functionName` set to `"price0CumulativeLast"`.
 */
export function useIUniswapV2PairPrice0CumulativeLast(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV2PairABI, 'price0CumulativeLast'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV2PairABI,
    functionName: 'price0CumulativeLast',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV2PairABI, 'price0CumulativeLast'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV2PairABI}__ and `functionName` set to `"price1CumulativeLast"`.
 */
export function useIUniswapV2PairPrice1CumulativeLast(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV2PairABI, 'price1CumulativeLast'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV2PairABI,
    functionName: 'price1CumulativeLast',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV2PairABI, 'price1CumulativeLast'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV2PairABI}__ and `functionName` set to `"symbol"`.
 */
export function useIUniswapV2PairSymbol(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV2PairABI, 'symbol'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV2PairABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV2PairABI, 'symbol'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV2PairABI}__ and `functionName` set to `"token0"`.
 */
export function useIUniswapV2PairToken0(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV2PairABI, 'token0'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV2PairABI,
    functionName: 'token0',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV2PairABI, 'token0'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV2PairABI}__ and `functionName` set to `"token1"`.
 */
export function useIUniswapV2PairToken1(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV2PairABI, 'token1'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV2PairABI,
    functionName: 'token1',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV2PairABI, 'token1'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV2PairABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useIUniswapV2PairTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV2PairABI, 'totalSupply'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV2PairABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV2PairABI, 'totalSupply'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iUniswapV2PairABI}__.
 */
export function useIUniswapV2PairWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iUniswapV2PairABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iUniswapV2PairABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iUniswapV2PairABI, TFunctionName>({
    abi: iUniswapV2PairABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iUniswapV2PairABI}__ and `functionName` set to `"approve"`.
 */
export function useIUniswapV2PairApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iUniswapV2PairABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof iUniswapV2PairABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iUniswapV2PairABI, 'approve'>({
    abi: iUniswapV2PairABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iUniswapV2PairABI}__ and `functionName` set to `"burn"`.
 */
export function useIUniswapV2PairBurn<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iUniswapV2PairABI, 'burn'>['abi'],
        'burn'
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<TMode, typeof iUniswapV2PairABI, 'burn'> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iUniswapV2PairABI, 'burn'>({
    abi: iUniswapV2PairABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iUniswapV2PairABI}__ and `functionName` set to `"initialize"`.
 */
export function useIUniswapV2PairInitialize<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iUniswapV2PairABI,
          'initialize'
        >['abi'],
        'initialize'
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<TMode, typeof iUniswapV2PairABI, 'initialize'> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iUniswapV2PairABI, 'initialize'>({
    abi: iUniswapV2PairABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iUniswapV2PairABI}__ and `functionName` set to `"mint"`.
 */
export function useIUniswapV2PairMint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iUniswapV2PairABI, 'mint'>['abi'],
        'mint'
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<TMode, typeof iUniswapV2PairABI, 'mint'> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iUniswapV2PairABI, 'mint'>({
    abi: iUniswapV2PairABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iUniswapV2PairABI}__ and `functionName` set to `"permit"`.
 */
export function useIUniswapV2PairPermit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iUniswapV2PairABI, 'permit'>['abi'],
        'permit'
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<TMode, typeof iUniswapV2PairABI, 'permit'> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iUniswapV2PairABI, 'permit'>({
    abi: iUniswapV2PairABI,
    functionName: 'permit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iUniswapV2PairABI}__ and `functionName` set to `"skim"`.
 */
export function useIUniswapV2PairSkim<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iUniswapV2PairABI, 'skim'>['abi'],
        'skim'
      > & { functionName?: 'skim' }
    : UseContractWriteConfig<TMode, typeof iUniswapV2PairABI, 'skim'> & {
        abi?: never
        functionName?: 'skim'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iUniswapV2PairABI, 'skim'>({
    abi: iUniswapV2PairABI,
    functionName: 'skim',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iUniswapV2PairABI}__ and `functionName` set to `"swap"`.
 */
export function useIUniswapV2PairSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iUniswapV2PairABI, 'swap'>['abi'],
        'swap'
      > & { functionName?: 'swap' }
    : UseContractWriteConfig<TMode, typeof iUniswapV2PairABI, 'swap'> & {
        abi?: never
        functionName?: 'swap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iUniswapV2PairABI, 'swap'>({
    abi: iUniswapV2PairABI,
    functionName: 'swap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iUniswapV2PairABI}__ and `functionName` set to `"sync"`.
 */
export function useIUniswapV2PairSync<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iUniswapV2PairABI, 'sync'>['abi'],
        'sync'
      > & { functionName?: 'sync' }
    : UseContractWriteConfig<TMode, typeof iUniswapV2PairABI, 'sync'> & {
        abi?: never
        functionName?: 'sync'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iUniswapV2PairABI, 'sync'>({
    abi: iUniswapV2PairABI,
    functionName: 'sync',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iUniswapV2PairABI}__ and `functionName` set to `"transfer"`.
 */
export function useIUniswapV2PairTransfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iUniswapV2PairABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof iUniswapV2PairABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iUniswapV2PairABI, 'transfer'>({
    abi: iUniswapV2PairABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iUniswapV2PairABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useIUniswapV2PairTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iUniswapV2PairABI,
          'transferFrom'
        >['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<
        TMode,
        typeof iUniswapV2PairABI,
        'transferFrom'
      > & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iUniswapV2PairABI, 'transferFrom'>({
    abi: iUniswapV2PairABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iUniswapV2PairABI}__.
 */
export function usePrepareIUniswapV2PairWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iUniswapV2PairABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iUniswapV2PairABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iUniswapV2PairABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iUniswapV2PairABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareIUniswapV2PairApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iUniswapV2PairABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iUniswapV2PairABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iUniswapV2PairABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iUniswapV2PairABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareIUniswapV2PairBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iUniswapV2PairABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iUniswapV2PairABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iUniswapV2PairABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iUniswapV2PairABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareIUniswapV2PairInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iUniswapV2PairABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iUniswapV2PairABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iUniswapV2PairABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iUniswapV2PairABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareIUniswapV2PairMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iUniswapV2PairABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iUniswapV2PairABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iUniswapV2PairABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iUniswapV2PairABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareIUniswapV2PairPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iUniswapV2PairABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iUniswapV2PairABI,
    functionName: 'permit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iUniswapV2PairABI, 'permit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iUniswapV2PairABI}__ and `functionName` set to `"skim"`.
 */
export function usePrepareIUniswapV2PairSkim(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iUniswapV2PairABI, 'skim'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iUniswapV2PairABI,
    functionName: 'skim',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iUniswapV2PairABI, 'skim'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iUniswapV2PairABI}__ and `functionName` set to `"swap"`.
 */
export function usePrepareIUniswapV2PairSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iUniswapV2PairABI, 'swap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iUniswapV2PairABI,
    functionName: 'swap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iUniswapV2PairABI, 'swap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iUniswapV2PairABI}__ and `functionName` set to `"sync"`.
 */
export function usePrepareIUniswapV2PairSync(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iUniswapV2PairABI, 'sync'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iUniswapV2PairABI,
    functionName: 'sync',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iUniswapV2PairABI, 'sync'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iUniswapV2PairABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareIUniswapV2PairTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iUniswapV2PairABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iUniswapV2PairABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iUniswapV2PairABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iUniswapV2PairABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareIUniswapV2PairTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iUniswapV2PairABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iUniswapV2PairABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iUniswapV2PairABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iUniswapV2PairABI}__.
 */
export function useIUniswapV2PairEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iUniswapV2PairABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iUniswapV2PairABI,
    ...config,
  } as UseContractEventConfig<typeof iUniswapV2PairABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iUniswapV2PairABI}__ and `eventName` set to `"Approval"`.
 */
export function useIUniswapV2PairApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof iUniswapV2PairABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iUniswapV2PairABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof iUniswapV2PairABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iUniswapV2PairABI}__ and `eventName` set to `"Burn"`.
 */
export function useIUniswapV2PairBurnEvent(
  config: Omit<
    UseContractEventConfig<typeof iUniswapV2PairABI, 'Burn'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iUniswapV2PairABI,
    eventName: 'Burn',
    ...config,
  } as UseContractEventConfig<typeof iUniswapV2PairABI, 'Burn'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iUniswapV2PairABI}__ and `eventName` set to `"Mint"`.
 */
export function useIUniswapV2PairMintEvent(
  config: Omit<
    UseContractEventConfig<typeof iUniswapV2PairABI, 'Mint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iUniswapV2PairABI,
    eventName: 'Mint',
    ...config,
  } as UseContractEventConfig<typeof iUniswapV2PairABI, 'Mint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iUniswapV2PairABI}__ and `eventName` set to `"Swap"`.
 */
export function useIUniswapV2PairSwapEvent(
  config: Omit<
    UseContractEventConfig<typeof iUniswapV2PairABI, 'Swap'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iUniswapV2PairABI,
    eventName: 'Swap',
    ...config,
  } as UseContractEventConfig<typeof iUniswapV2PairABI, 'Swap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iUniswapV2PairABI}__ and `eventName` set to `"Sync"`.
 */
export function useIUniswapV2PairSyncEvent(
  config: Omit<
    UseContractEventConfig<typeof iUniswapV2PairABI, 'Sync'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iUniswapV2PairABI,
    eventName: 'Sync',
    ...config,
  } as UseContractEventConfig<typeof iUniswapV2PairABI, 'Sync'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iUniswapV2PairABI}__ and `eventName` set to `"Transfer"`.
 */
export function useIUniswapV2PairTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof iUniswapV2PairABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iUniswapV2PairABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof iUniswapV2PairABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iUniswapV3FactoryABI}__.
 */
export function useIUniswapV3Factory(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iUniswapV3FactoryABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV3FactoryABI}__.
 */
export function useIUniswapV3FactoryRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV3FactoryABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV3FactoryABI,
    ...config,
  } as UseContractReadConfig<typeof iUniswapV3FactoryABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV3FactoryABI}__ and `functionName` set to `"feeAmountTickSpacing"`.
 */
export function useIUniswapV3FactoryFeeAmountTickSpacing(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV3FactoryABI, 'feeAmountTickSpacing'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV3FactoryABI,
    functionName: 'feeAmountTickSpacing',
    ...config,
  } as UseContractReadConfig<
    typeof iUniswapV3FactoryABI,
    'feeAmountTickSpacing'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV3FactoryABI}__ and `functionName` set to `"getPool"`.
 */
export function useIUniswapV3FactoryGetPool(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV3FactoryABI, 'getPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV3FactoryABI,
    functionName: 'getPool',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV3FactoryABI, 'getPool'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV3FactoryABI}__ and `functionName` set to `"owner"`.
 */
export function useIUniswapV3FactoryOwner(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV3FactoryABI, 'owner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV3FactoryABI,
    functionName: 'owner',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV3FactoryABI, 'owner'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iUniswapV3FactoryABI}__.
 */
export function useIUniswapV3FactoryWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iUniswapV3FactoryABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof iUniswapV3FactoryABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iUniswapV3FactoryABI, TFunctionName>({
    abi: iUniswapV3FactoryABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iUniswapV3FactoryABI}__ and `functionName` set to `"createPool"`.
 */
export function useIUniswapV3FactoryCreatePool<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iUniswapV3FactoryABI,
          'createPool'
        >['abi'],
        'createPool'
      > & { functionName?: 'createPool' }
    : UseContractWriteConfig<
        TMode,
        typeof iUniswapV3FactoryABI,
        'createPool'
      > & {
        abi?: never
        functionName?: 'createPool'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iUniswapV3FactoryABI, 'createPool'>({
    abi: iUniswapV3FactoryABI,
    functionName: 'createPool',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iUniswapV3FactoryABI}__ and `functionName` set to `"enableFeeAmount"`.
 */
export function useIUniswapV3FactoryEnableFeeAmount<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iUniswapV3FactoryABI,
          'enableFeeAmount'
        >['abi'],
        'enableFeeAmount'
      > & { functionName?: 'enableFeeAmount' }
    : UseContractWriteConfig<
        TMode,
        typeof iUniswapV3FactoryABI,
        'enableFeeAmount'
      > & {
        abi?: never
        functionName?: 'enableFeeAmount'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iUniswapV3FactoryABI,
    'enableFeeAmount'
  >({
    abi: iUniswapV3FactoryABI,
    functionName: 'enableFeeAmount',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iUniswapV3FactoryABI}__ and `functionName` set to `"setOwner"`.
 */
export function useIUniswapV3FactorySetOwner<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iUniswapV3FactoryABI,
          'setOwner'
        >['abi'],
        'setOwner'
      > & { functionName?: 'setOwner' }
    : UseContractWriteConfig<TMode, typeof iUniswapV3FactoryABI, 'setOwner'> & {
        abi?: never
        functionName?: 'setOwner'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iUniswapV3FactoryABI, 'setOwner'>({
    abi: iUniswapV3FactoryABI,
    functionName: 'setOwner',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iUniswapV3FactoryABI}__.
 */
export function usePrepareIUniswapV3FactoryWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iUniswapV3FactoryABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iUniswapV3FactoryABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iUniswapV3FactoryABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iUniswapV3FactoryABI}__ and `functionName` set to `"createPool"`.
 */
export function usePrepareIUniswapV3FactoryCreatePool(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iUniswapV3FactoryABI, 'createPool'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iUniswapV3FactoryABI,
    functionName: 'createPool',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iUniswapV3FactoryABI, 'createPool'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iUniswapV3FactoryABI}__ and `functionName` set to `"enableFeeAmount"`.
 */
export function usePrepareIUniswapV3FactoryEnableFeeAmount(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iUniswapV3FactoryABI,
      'enableFeeAmount'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iUniswapV3FactoryABI,
    functionName: 'enableFeeAmount',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iUniswapV3FactoryABI,
    'enableFeeAmount'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iUniswapV3FactoryABI}__ and `functionName` set to `"setOwner"`.
 */
export function usePrepareIUniswapV3FactorySetOwner(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iUniswapV3FactoryABI, 'setOwner'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iUniswapV3FactoryABI,
    functionName: 'setOwner',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iUniswapV3FactoryABI, 'setOwner'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iUniswapV3FactoryABI}__.
 */
export function useIUniswapV3FactoryEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iUniswapV3FactoryABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iUniswapV3FactoryABI,
    ...config,
  } as UseContractEventConfig<typeof iUniswapV3FactoryABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iUniswapV3FactoryABI}__ and `eventName` set to `"FeeAmountEnabled"`.
 */
export function useIUniswapV3FactoryFeeAmountEnabledEvent(
  config: Omit<
    UseContractEventConfig<typeof iUniswapV3FactoryABI, 'FeeAmountEnabled'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iUniswapV3FactoryABI,
    eventName: 'FeeAmountEnabled',
    ...config,
  } as UseContractEventConfig<typeof iUniswapV3FactoryABI, 'FeeAmountEnabled'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iUniswapV3FactoryABI}__ and `eventName` set to `"OwnerChanged"`.
 */
export function useIUniswapV3FactoryOwnerChangedEvent(
  config: Omit<
    UseContractEventConfig<typeof iUniswapV3FactoryABI, 'OwnerChanged'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iUniswapV3FactoryABI,
    eventName: 'OwnerChanged',
    ...config,
  } as UseContractEventConfig<typeof iUniswapV3FactoryABI, 'OwnerChanged'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iUniswapV3FactoryABI}__ and `eventName` set to `"PoolCreated"`.
 */
export function useIUniswapV3FactoryPoolCreatedEvent(
  config: Omit<
    UseContractEventConfig<typeof iUniswapV3FactoryABI, 'PoolCreated'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iUniswapV3FactoryABI,
    eventName: 'PoolCreated',
    ...config,
  } as UseContractEventConfig<typeof iUniswapV3FactoryABI, 'PoolCreated'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iUniswapV3PoolABI}__.
 */
export function useIUniswapV3Pool(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iUniswapV3PoolABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV3PoolABI}__.
 */
export function useIUniswapV3PoolRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV3PoolABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV3PoolABI,
    ...config,
  } as UseContractReadConfig<typeof iUniswapV3PoolABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV3PoolABI}__ and `functionName` set to `"factory"`.
 */
export function useIUniswapV3PoolFactory(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV3PoolABI, 'factory'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV3PoolABI,
    functionName: 'factory',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV3PoolABI, 'factory'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV3PoolABI}__ and `functionName` set to `"fee"`.
 */
export function useIUniswapV3PoolFee(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV3PoolABI, 'fee'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV3PoolABI,
    functionName: 'fee',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV3PoolABI, 'fee'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV3PoolABI}__ and `functionName` set to `"feeGrowthGlobal0X128"`.
 */
export function useIUniswapV3PoolFeeGrowthGlobal0X128(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV3PoolABI, 'feeGrowthGlobal0X128'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV3PoolABI,
    functionName: 'feeGrowthGlobal0X128',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV3PoolABI, 'feeGrowthGlobal0X128'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV3PoolABI}__ and `functionName` set to `"feeGrowthGlobal1X128"`.
 */
export function useIUniswapV3PoolFeeGrowthGlobal1X128(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV3PoolABI, 'feeGrowthGlobal1X128'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV3PoolABI,
    functionName: 'feeGrowthGlobal1X128',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV3PoolABI, 'feeGrowthGlobal1X128'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV3PoolABI}__ and `functionName` set to `"liquidity"`.
 */
export function useIUniswapV3PoolLiquidity(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV3PoolABI, 'liquidity'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV3PoolABI,
    functionName: 'liquidity',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV3PoolABI, 'liquidity'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV3PoolABI}__ and `functionName` set to `"maxLiquidityPerTick"`.
 */
export function useIUniswapV3PoolMaxLiquidityPerTick(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV3PoolABI, 'maxLiquidityPerTick'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV3PoolABI,
    functionName: 'maxLiquidityPerTick',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV3PoolABI, 'maxLiquidityPerTick'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV3PoolABI}__ and `functionName` set to `"observations"`.
 */
export function useIUniswapV3PoolObservations(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV3PoolABI, 'observations'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV3PoolABI,
    functionName: 'observations',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV3PoolABI, 'observations'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV3PoolABI}__ and `functionName` set to `"observe"`.
 */
export function useIUniswapV3PoolObserve(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV3PoolABI, 'observe'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV3PoolABI,
    functionName: 'observe',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV3PoolABI, 'observe'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV3PoolABI}__ and `functionName` set to `"positions"`.
 */
export function useIUniswapV3PoolPositions(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV3PoolABI, 'positions'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV3PoolABI,
    functionName: 'positions',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV3PoolABI, 'positions'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV3PoolABI}__ and `functionName` set to `"protocolFees"`.
 */
export function useIUniswapV3PoolProtocolFees(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV3PoolABI, 'protocolFees'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV3PoolABI,
    functionName: 'protocolFees',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV3PoolABI, 'protocolFees'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV3PoolABI}__ and `functionName` set to `"slot0"`.
 */
export function useIUniswapV3PoolSlot0(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV3PoolABI, 'slot0'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV3PoolABI,
    functionName: 'slot0',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV3PoolABI, 'slot0'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV3PoolABI}__ and `functionName` set to `"snapshotCumulativesInside"`.
 */
export function useIUniswapV3PoolSnapshotCumulativesInside(
  config: Omit<
    UseContractReadConfig<
      typeof iUniswapV3PoolABI,
      'snapshotCumulativesInside'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV3PoolABI,
    functionName: 'snapshotCumulativesInside',
    ...config,
  } as UseContractReadConfig<
    typeof iUniswapV3PoolABI,
    'snapshotCumulativesInside'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV3PoolABI}__ and `functionName` set to `"tickBitmap"`.
 */
export function useIUniswapV3PoolTickBitmap(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV3PoolABI, 'tickBitmap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV3PoolABI,
    functionName: 'tickBitmap',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV3PoolABI, 'tickBitmap'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV3PoolABI}__ and `functionName` set to `"tickSpacing"`.
 */
export function useIUniswapV3PoolTickSpacing(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV3PoolABI, 'tickSpacing'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV3PoolABI,
    functionName: 'tickSpacing',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV3PoolABI, 'tickSpacing'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV3PoolABI}__ and `functionName` set to `"ticks"`.
 */
export function useIUniswapV3PoolTicks(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV3PoolABI, 'ticks'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV3PoolABI,
    functionName: 'ticks',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV3PoolABI, 'ticks'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV3PoolABI}__ and `functionName` set to `"token0"`.
 */
export function useIUniswapV3PoolToken0(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV3PoolABI, 'token0'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV3PoolABI,
    functionName: 'token0',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV3PoolABI, 'token0'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV3PoolABI}__ and `functionName` set to `"token1"`.
 */
export function useIUniswapV3PoolToken1(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV3PoolABI, 'token1'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV3PoolABI,
    functionName: 'token1',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV3PoolABI, 'token1'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iUniswapV3PoolABI}__.
 */
export function useIUniswapV3PoolWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iUniswapV3PoolABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iUniswapV3PoolABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iUniswapV3PoolABI, TFunctionName>({
    abi: iUniswapV3PoolABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iUniswapV3PoolABI}__ and `functionName` set to `"burn"`.
 */
export function useIUniswapV3PoolBurn<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iUniswapV3PoolABI, 'burn'>['abi'],
        'burn'
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<TMode, typeof iUniswapV3PoolABI, 'burn'> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iUniswapV3PoolABI, 'burn'>({
    abi: iUniswapV3PoolABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iUniswapV3PoolABI}__ and `functionName` set to `"collect"`.
 */
export function useIUniswapV3PoolCollect<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iUniswapV3PoolABI, 'collect'>['abi'],
        'collect'
      > & { functionName?: 'collect' }
    : UseContractWriteConfig<TMode, typeof iUniswapV3PoolABI, 'collect'> & {
        abi?: never
        functionName?: 'collect'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iUniswapV3PoolABI, 'collect'>({
    abi: iUniswapV3PoolABI,
    functionName: 'collect',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iUniswapV3PoolABI}__ and `functionName` set to `"collectProtocol"`.
 */
export function useIUniswapV3PoolCollectProtocol<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iUniswapV3PoolABI,
          'collectProtocol'
        >['abi'],
        'collectProtocol'
      > & { functionName?: 'collectProtocol' }
    : UseContractWriteConfig<
        TMode,
        typeof iUniswapV3PoolABI,
        'collectProtocol'
      > & {
        abi?: never
        functionName?: 'collectProtocol'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iUniswapV3PoolABI, 'collectProtocol'>({
    abi: iUniswapV3PoolABI,
    functionName: 'collectProtocol',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iUniswapV3PoolABI}__ and `functionName` set to `"flash"`.
 */
export function useIUniswapV3PoolFlash<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iUniswapV3PoolABI, 'flash'>['abi'],
        'flash'
      > & { functionName?: 'flash' }
    : UseContractWriteConfig<TMode, typeof iUniswapV3PoolABI, 'flash'> & {
        abi?: never
        functionName?: 'flash'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iUniswapV3PoolABI, 'flash'>({
    abi: iUniswapV3PoolABI,
    functionName: 'flash',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iUniswapV3PoolABI}__ and `functionName` set to `"increaseObservationCardinalityNext"`.
 */
export function useIUniswapV3PoolIncreaseObservationCardinalityNext<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iUniswapV3PoolABI,
          'increaseObservationCardinalityNext'
        >['abi'],
        'increaseObservationCardinalityNext'
      > & { functionName?: 'increaseObservationCardinalityNext' }
    : UseContractWriteConfig<
        TMode,
        typeof iUniswapV3PoolABI,
        'increaseObservationCardinalityNext'
      > & {
        abi?: never
        functionName?: 'increaseObservationCardinalityNext'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iUniswapV3PoolABI,
    'increaseObservationCardinalityNext'
  >({
    abi: iUniswapV3PoolABI,
    functionName: 'increaseObservationCardinalityNext',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iUniswapV3PoolABI}__ and `functionName` set to `"initialize"`.
 */
export function useIUniswapV3PoolInitialize<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iUniswapV3PoolABI,
          'initialize'
        >['abi'],
        'initialize'
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<TMode, typeof iUniswapV3PoolABI, 'initialize'> & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iUniswapV3PoolABI, 'initialize'>({
    abi: iUniswapV3PoolABI,
    functionName: 'initialize',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iUniswapV3PoolABI}__ and `functionName` set to `"mint"`.
 */
export function useIUniswapV3PoolMint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iUniswapV3PoolABI, 'mint'>['abi'],
        'mint'
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<TMode, typeof iUniswapV3PoolABI, 'mint'> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iUniswapV3PoolABI, 'mint'>({
    abi: iUniswapV3PoolABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iUniswapV3PoolABI}__ and `functionName` set to `"setFeeProtocol"`.
 */
export function useIUniswapV3PoolSetFeeProtocol<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iUniswapV3PoolABI,
          'setFeeProtocol'
        >['abi'],
        'setFeeProtocol'
      > & { functionName?: 'setFeeProtocol' }
    : UseContractWriteConfig<
        TMode,
        typeof iUniswapV3PoolABI,
        'setFeeProtocol'
      > & {
        abi?: never
        functionName?: 'setFeeProtocol'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iUniswapV3PoolABI, 'setFeeProtocol'>({
    abi: iUniswapV3PoolABI,
    functionName: 'setFeeProtocol',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iUniswapV3PoolABI}__ and `functionName` set to `"swap"`.
 */
export function useIUniswapV3PoolSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iUniswapV3PoolABI, 'swap'>['abi'],
        'swap'
      > & { functionName?: 'swap' }
    : UseContractWriteConfig<TMode, typeof iUniswapV3PoolABI, 'swap'> & {
        abi?: never
        functionName?: 'swap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iUniswapV3PoolABI, 'swap'>({
    abi: iUniswapV3PoolABI,
    functionName: 'swap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iUniswapV3PoolABI}__.
 */
export function usePrepareIUniswapV3PoolWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iUniswapV3PoolABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iUniswapV3PoolABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iUniswapV3PoolABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iUniswapV3PoolABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareIUniswapV3PoolBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iUniswapV3PoolABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iUniswapV3PoolABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iUniswapV3PoolABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iUniswapV3PoolABI}__ and `functionName` set to `"collect"`.
 */
export function usePrepareIUniswapV3PoolCollect(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iUniswapV3PoolABI, 'collect'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iUniswapV3PoolABI,
    functionName: 'collect',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iUniswapV3PoolABI, 'collect'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iUniswapV3PoolABI}__ and `functionName` set to `"collectProtocol"`.
 */
export function usePrepareIUniswapV3PoolCollectProtocol(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iUniswapV3PoolABI, 'collectProtocol'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iUniswapV3PoolABI,
    functionName: 'collectProtocol',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iUniswapV3PoolABI,
    'collectProtocol'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iUniswapV3PoolABI}__ and `functionName` set to `"flash"`.
 */
export function usePrepareIUniswapV3PoolFlash(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iUniswapV3PoolABI, 'flash'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iUniswapV3PoolABI,
    functionName: 'flash',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iUniswapV3PoolABI, 'flash'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iUniswapV3PoolABI}__ and `functionName` set to `"increaseObservationCardinalityNext"`.
 */
export function usePrepareIUniswapV3PoolIncreaseObservationCardinalityNext(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iUniswapV3PoolABI,
      'increaseObservationCardinalityNext'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iUniswapV3PoolABI,
    functionName: 'increaseObservationCardinalityNext',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iUniswapV3PoolABI,
    'increaseObservationCardinalityNext'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iUniswapV3PoolABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareIUniswapV3PoolInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iUniswapV3PoolABI, 'initialize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iUniswapV3PoolABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iUniswapV3PoolABI, 'initialize'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iUniswapV3PoolABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareIUniswapV3PoolMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iUniswapV3PoolABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iUniswapV3PoolABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iUniswapV3PoolABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iUniswapV3PoolABI}__ and `functionName` set to `"setFeeProtocol"`.
 */
export function usePrepareIUniswapV3PoolSetFeeProtocol(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iUniswapV3PoolABI, 'setFeeProtocol'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iUniswapV3PoolABI,
    functionName: 'setFeeProtocol',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iUniswapV3PoolABI,
    'setFeeProtocol'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iUniswapV3PoolABI}__ and `functionName` set to `"swap"`.
 */
export function usePrepareIUniswapV3PoolSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iUniswapV3PoolABI, 'swap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iUniswapV3PoolABI,
    functionName: 'swap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iUniswapV3PoolABI, 'swap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iUniswapV3PoolABI}__.
 */
export function useIUniswapV3PoolEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iUniswapV3PoolABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iUniswapV3PoolABI,
    ...config,
  } as UseContractEventConfig<typeof iUniswapV3PoolABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iUniswapV3PoolABI}__ and `eventName` set to `"Burn"`.
 */
export function useIUniswapV3PoolBurnEvent(
  config: Omit<
    UseContractEventConfig<typeof iUniswapV3PoolABI, 'Burn'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iUniswapV3PoolABI,
    eventName: 'Burn',
    ...config,
  } as UseContractEventConfig<typeof iUniswapV3PoolABI, 'Burn'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iUniswapV3PoolABI}__ and `eventName` set to `"Collect"`.
 */
export function useIUniswapV3PoolCollectEvent(
  config: Omit<
    UseContractEventConfig<typeof iUniswapV3PoolABI, 'Collect'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iUniswapV3PoolABI,
    eventName: 'Collect',
    ...config,
  } as UseContractEventConfig<typeof iUniswapV3PoolABI, 'Collect'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iUniswapV3PoolABI}__ and `eventName` set to `"CollectProtocol"`.
 */
export function useIUniswapV3PoolCollectProtocolEvent(
  config: Omit<
    UseContractEventConfig<typeof iUniswapV3PoolABI, 'CollectProtocol'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iUniswapV3PoolABI,
    eventName: 'CollectProtocol',
    ...config,
  } as UseContractEventConfig<typeof iUniswapV3PoolABI, 'CollectProtocol'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iUniswapV3PoolABI}__ and `eventName` set to `"Flash"`.
 */
export function useIUniswapV3PoolFlashEvent(
  config: Omit<
    UseContractEventConfig<typeof iUniswapV3PoolABI, 'Flash'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iUniswapV3PoolABI,
    eventName: 'Flash',
    ...config,
  } as UseContractEventConfig<typeof iUniswapV3PoolABI, 'Flash'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iUniswapV3PoolABI}__ and `eventName` set to `"IncreaseObservationCardinalityNext"`.
 */
export function useIUniswapV3PoolIncreaseObservationCardinalityNextEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iUniswapV3PoolABI,
      'IncreaseObservationCardinalityNext'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iUniswapV3PoolABI,
    eventName: 'IncreaseObservationCardinalityNext',
    ...config,
  } as UseContractEventConfig<
    typeof iUniswapV3PoolABI,
    'IncreaseObservationCardinalityNext'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iUniswapV3PoolABI}__ and `eventName` set to `"Initialize"`.
 */
export function useIUniswapV3PoolInitializeEvent(
  config: Omit<
    UseContractEventConfig<typeof iUniswapV3PoolABI, 'Initialize'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iUniswapV3PoolABI,
    eventName: 'Initialize',
    ...config,
  } as UseContractEventConfig<typeof iUniswapV3PoolABI, 'Initialize'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iUniswapV3PoolABI}__ and `eventName` set to `"Mint"`.
 */
export function useIUniswapV3PoolMintEvent(
  config: Omit<
    UseContractEventConfig<typeof iUniswapV3PoolABI, 'Mint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iUniswapV3PoolABI,
    eventName: 'Mint',
    ...config,
  } as UseContractEventConfig<typeof iUniswapV3PoolABI, 'Mint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iUniswapV3PoolABI}__ and `eventName` set to `"SetFeeProtocol"`.
 */
export function useIUniswapV3PoolSetFeeProtocolEvent(
  config: Omit<
    UseContractEventConfig<typeof iUniswapV3PoolABI, 'SetFeeProtocol'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iUniswapV3PoolABI,
    eventName: 'SetFeeProtocol',
    ...config,
  } as UseContractEventConfig<typeof iUniswapV3PoolABI, 'SetFeeProtocol'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iUniswapV3PoolABI}__ and `eventName` set to `"Swap"`.
 */
export function useIUniswapV3PoolSwapEvent(
  config: Omit<
    UseContractEventConfig<typeof iUniswapV3PoolABI, 'Swap'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iUniswapV3PoolABI,
    eventName: 'Swap',
    ...config,
  } as UseContractEventConfig<typeof iUniswapV3PoolABI, 'Swap'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iUniswapV3PoolActionsABI}__.
 */
export function useIUniswapV3PoolActions(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iUniswapV3PoolActionsABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iUniswapV3PoolActionsABI}__.
 */
export function useIUniswapV3PoolActionsWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iUniswapV3PoolActionsABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof iUniswapV3PoolActionsABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iUniswapV3PoolActionsABI,
    TFunctionName
  >({ abi: iUniswapV3PoolActionsABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iUniswapV3PoolActionsABI}__ and `functionName` set to `"burn"`.
 */
export function useIUniswapV3PoolActionsBurn<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iUniswapV3PoolActionsABI,
          'burn'
        >['abi'],
        'burn'
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<TMode, typeof iUniswapV3PoolActionsABI, 'burn'> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iUniswapV3PoolActionsABI, 'burn'>({
    abi: iUniswapV3PoolActionsABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iUniswapV3PoolActionsABI}__ and `functionName` set to `"collect"`.
 */
export function useIUniswapV3PoolActionsCollect<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iUniswapV3PoolActionsABI,
          'collect'
        >['abi'],
        'collect'
      > & { functionName?: 'collect' }
    : UseContractWriteConfig<
        TMode,
        typeof iUniswapV3PoolActionsABI,
        'collect'
      > & {
        abi?: never
        functionName?: 'collect'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iUniswapV3PoolActionsABI, 'collect'>({
    abi: iUniswapV3PoolActionsABI,
    functionName: 'collect',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iUniswapV3PoolActionsABI}__ and `functionName` set to `"flash"`.
 */
export function useIUniswapV3PoolActionsFlash<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iUniswapV3PoolActionsABI,
          'flash'
        >['abi'],
        'flash'
      > & { functionName?: 'flash' }
    : UseContractWriteConfig<
        TMode,
        typeof iUniswapV3PoolActionsABI,
        'flash'
      > & {
        abi?: never
        functionName?: 'flash'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iUniswapV3PoolActionsABI, 'flash'>({
    abi: iUniswapV3PoolActionsABI,
    functionName: 'flash',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iUniswapV3PoolActionsABI}__ and `functionName` set to `"increaseObservationCardinalityNext"`.
 */
export function useIUniswapV3PoolActionsIncreaseObservationCardinalityNext<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iUniswapV3PoolActionsABI,
          'increaseObservationCardinalityNext'
        >['abi'],
        'increaseObservationCardinalityNext'
      > & { functionName?: 'increaseObservationCardinalityNext' }
    : UseContractWriteConfig<
        TMode,
        typeof iUniswapV3PoolActionsABI,
        'increaseObservationCardinalityNext'
      > & {
        abi?: never
        functionName?: 'increaseObservationCardinalityNext'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iUniswapV3PoolActionsABI,
    'increaseObservationCardinalityNext'
  >({
    abi: iUniswapV3PoolActionsABI,
    functionName: 'increaseObservationCardinalityNext',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iUniswapV3PoolActionsABI}__ and `functionName` set to `"initialize"`.
 */
export function useIUniswapV3PoolActionsInitialize<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iUniswapV3PoolActionsABI,
          'initialize'
        >['abi'],
        'initialize'
      > & { functionName?: 'initialize' }
    : UseContractWriteConfig<
        TMode,
        typeof iUniswapV3PoolActionsABI,
        'initialize'
      > & {
        abi?: never
        functionName?: 'initialize'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iUniswapV3PoolActionsABI, 'initialize'>(
    {
      abi: iUniswapV3PoolActionsABI,
      functionName: 'initialize',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iUniswapV3PoolActionsABI}__ and `functionName` set to `"mint"`.
 */
export function useIUniswapV3PoolActionsMint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iUniswapV3PoolActionsABI,
          'mint'
        >['abi'],
        'mint'
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<TMode, typeof iUniswapV3PoolActionsABI, 'mint'> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iUniswapV3PoolActionsABI, 'mint'>({
    abi: iUniswapV3PoolActionsABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iUniswapV3PoolActionsABI}__ and `functionName` set to `"swap"`.
 */
export function useIUniswapV3PoolActionsSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iUniswapV3PoolActionsABI,
          'swap'
        >['abi'],
        'swap'
      > & { functionName?: 'swap' }
    : UseContractWriteConfig<TMode, typeof iUniswapV3PoolActionsABI, 'swap'> & {
        abi?: never
        functionName?: 'swap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iUniswapV3PoolActionsABI, 'swap'>({
    abi: iUniswapV3PoolActionsABI,
    functionName: 'swap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iUniswapV3PoolActionsABI}__.
 */
export function usePrepareIUniswapV3PoolActionsWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iUniswapV3PoolActionsABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iUniswapV3PoolActionsABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iUniswapV3PoolActionsABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iUniswapV3PoolActionsABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareIUniswapV3PoolActionsBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iUniswapV3PoolActionsABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iUniswapV3PoolActionsABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iUniswapV3PoolActionsABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iUniswapV3PoolActionsABI}__ and `functionName` set to `"collect"`.
 */
export function usePrepareIUniswapV3PoolActionsCollect(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iUniswapV3PoolActionsABI, 'collect'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iUniswapV3PoolActionsABI,
    functionName: 'collect',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iUniswapV3PoolActionsABI,
    'collect'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iUniswapV3PoolActionsABI}__ and `functionName` set to `"flash"`.
 */
export function usePrepareIUniswapV3PoolActionsFlash(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iUniswapV3PoolActionsABI, 'flash'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iUniswapV3PoolActionsABI,
    functionName: 'flash',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iUniswapV3PoolActionsABI, 'flash'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iUniswapV3PoolActionsABI}__ and `functionName` set to `"increaseObservationCardinalityNext"`.
 */
export function usePrepareIUniswapV3PoolActionsIncreaseObservationCardinalityNext(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iUniswapV3PoolActionsABI,
      'increaseObservationCardinalityNext'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iUniswapV3PoolActionsABI,
    functionName: 'increaseObservationCardinalityNext',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iUniswapV3PoolActionsABI,
    'increaseObservationCardinalityNext'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iUniswapV3PoolActionsABI}__ and `functionName` set to `"initialize"`.
 */
export function usePrepareIUniswapV3PoolActionsInitialize(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iUniswapV3PoolActionsABI,
      'initialize'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iUniswapV3PoolActionsABI,
    functionName: 'initialize',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iUniswapV3PoolActionsABI,
    'initialize'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iUniswapV3PoolActionsABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareIUniswapV3PoolActionsMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iUniswapV3PoolActionsABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iUniswapV3PoolActionsABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iUniswapV3PoolActionsABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iUniswapV3PoolActionsABI}__ and `functionName` set to `"swap"`.
 */
export function usePrepareIUniswapV3PoolActionsSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iUniswapV3PoolActionsABI, 'swap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iUniswapV3PoolActionsABI,
    functionName: 'swap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iUniswapV3PoolActionsABI, 'swap'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iUniswapV3PoolDerivedStateABI}__.
 */
export function useIUniswapV3PoolDerivedState(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iUniswapV3PoolDerivedStateABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV3PoolDerivedStateABI}__.
 */
export function useIUniswapV3PoolDerivedStateRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV3PoolDerivedStateABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV3PoolDerivedStateABI,
    ...config,
  } as UseContractReadConfig<
    typeof iUniswapV3PoolDerivedStateABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV3PoolDerivedStateABI}__ and `functionName` set to `"observe"`.
 */
export function useIUniswapV3PoolDerivedStateObserve(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV3PoolDerivedStateABI, 'observe'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV3PoolDerivedStateABI,
    functionName: 'observe',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV3PoolDerivedStateABI, 'observe'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV3PoolDerivedStateABI}__ and `functionName` set to `"snapshotCumulativesInside"`.
 */
export function useIUniswapV3PoolDerivedStateSnapshotCumulativesInside(
  config: Omit<
    UseContractReadConfig<
      typeof iUniswapV3PoolDerivedStateABI,
      'snapshotCumulativesInside'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV3PoolDerivedStateABI,
    functionName: 'snapshotCumulativesInside',
    ...config,
  } as UseContractReadConfig<
    typeof iUniswapV3PoolDerivedStateABI,
    'snapshotCumulativesInside'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iUniswapV3PoolEventsABI}__.
 */
export function useIUniswapV3PoolEvents(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iUniswapV3PoolEventsABI, ...config })
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iUniswapV3PoolEventsABI}__.
 */
export function useIUniswapV3PoolEventsEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof iUniswapV3PoolEventsABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: iUniswapV3PoolEventsABI,
    ...config,
  } as UseContractEventConfig<typeof iUniswapV3PoolEventsABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iUniswapV3PoolEventsABI}__ and `eventName` set to `"Burn"`.
 */
export function useIUniswapV3PoolEventsBurnEvent(
  config: Omit<
    UseContractEventConfig<typeof iUniswapV3PoolEventsABI, 'Burn'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iUniswapV3PoolEventsABI,
    eventName: 'Burn',
    ...config,
  } as UseContractEventConfig<typeof iUniswapV3PoolEventsABI, 'Burn'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iUniswapV3PoolEventsABI}__ and `eventName` set to `"Collect"`.
 */
export function useIUniswapV3PoolEventsCollectEvent(
  config: Omit<
    UseContractEventConfig<typeof iUniswapV3PoolEventsABI, 'Collect'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iUniswapV3PoolEventsABI,
    eventName: 'Collect',
    ...config,
  } as UseContractEventConfig<typeof iUniswapV3PoolEventsABI, 'Collect'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iUniswapV3PoolEventsABI}__ and `eventName` set to `"CollectProtocol"`.
 */
export function useIUniswapV3PoolEventsCollectProtocolEvent(
  config: Omit<
    UseContractEventConfig<typeof iUniswapV3PoolEventsABI, 'CollectProtocol'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iUniswapV3PoolEventsABI,
    eventName: 'CollectProtocol',
    ...config,
  } as UseContractEventConfig<
    typeof iUniswapV3PoolEventsABI,
    'CollectProtocol'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iUniswapV3PoolEventsABI}__ and `eventName` set to `"Flash"`.
 */
export function useIUniswapV3PoolEventsFlashEvent(
  config: Omit<
    UseContractEventConfig<typeof iUniswapV3PoolEventsABI, 'Flash'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iUniswapV3PoolEventsABI,
    eventName: 'Flash',
    ...config,
  } as UseContractEventConfig<typeof iUniswapV3PoolEventsABI, 'Flash'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iUniswapV3PoolEventsABI}__ and `eventName` set to `"IncreaseObservationCardinalityNext"`.
 */
export function useIUniswapV3PoolEventsIncreaseObservationCardinalityNextEvent(
  config: Omit<
    UseContractEventConfig<
      typeof iUniswapV3PoolEventsABI,
      'IncreaseObservationCardinalityNext'
    >,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iUniswapV3PoolEventsABI,
    eventName: 'IncreaseObservationCardinalityNext',
    ...config,
  } as UseContractEventConfig<
    typeof iUniswapV3PoolEventsABI,
    'IncreaseObservationCardinalityNext'
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iUniswapV3PoolEventsABI}__ and `eventName` set to `"Initialize"`.
 */
export function useIUniswapV3PoolEventsInitializeEvent(
  config: Omit<
    UseContractEventConfig<typeof iUniswapV3PoolEventsABI, 'Initialize'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iUniswapV3PoolEventsABI,
    eventName: 'Initialize',
    ...config,
  } as UseContractEventConfig<typeof iUniswapV3PoolEventsABI, 'Initialize'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iUniswapV3PoolEventsABI}__ and `eventName` set to `"Mint"`.
 */
export function useIUniswapV3PoolEventsMintEvent(
  config: Omit<
    UseContractEventConfig<typeof iUniswapV3PoolEventsABI, 'Mint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iUniswapV3PoolEventsABI,
    eventName: 'Mint',
    ...config,
  } as UseContractEventConfig<typeof iUniswapV3PoolEventsABI, 'Mint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iUniswapV3PoolEventsABI}__ and `eventName` set to `"SetFeeProtocol"`.
 */
export function useIUniswapV3PoolEventsSetFeeProtocolEvent(
  config: Omit<
    UseContractEventConfig<typeof iUniswapV3PoolEventsABI, 'SetFeeProtocol'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iUniswapV3PoolEventsABI,
    eventName: 'SetFeeProtocol',
    ...config,
  } as UseContractEventConfig<typeof iUniswapV3PoolEventsABI, 'SetFeeProtocol'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link iUniswapV3PoolEventsABI}__ and `eventName` set to `"Swap"`.
 */
export function useIUniswapV3PoolEventsSwapEvent(
  config: Omit<
    UseContractEventConfig<typeof iUniswapV3PoolEventsABI, 'Swap'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: iUniswapV3PoolEventsABI,
    eventName: 'Swap',
    ...config,
  } as UseContractEventConfig<typeof iUniswapV3PoolEventsABI, 'Swap'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iUniswapV3PoolImmutablesABI}__.
 */
export function useIUniswapV3PoolImmutables(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iUniswapV3PoolImmutablesABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV3PoolImmutablesABI}__.
 */
export function useIUniswapV3PoolImmutablesRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV3PoolImmutablesABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV3PoolImmutablesABI,
    ...config,
  } as UseContractReadConfig<typeof iUniswapV3PoolImmutablesABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV3PoolImmutablesABI}__ and `functionName` set to `"factory"`.
 */
export function useIUniswapV3PoolImmutablesFactory(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV3PoolImmutablesABI, 'factory'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV3PoolImmutablesABI,
    functionName: 'factory',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV3PoolImmutablesABI, 'factory'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV3PoolImmutablesABI}__ and `functionName` set to `"fee"`.
 */
export function useIUniswapV3PoolImmutablesFee(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV3PoolImmutablesABI, 'fee'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV3PoolImmutablesABI,
    functionName: 'fee',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV3PoolImmutablesABI, 'fee'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV3PoolImmutablesABI}__ and `functionName` set to `"maxLiquidityPerTick"`.
 */
export function useIUniswapV3PoolImmutablesMaxLiquidityPerTick(
  config: Omit<
    UseContractReadConfig<
      typeof iUniswapV3PoolImmutablesABI,
      'maxLiquidityPerTick'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV3PoolImmutablesABI,
    functionName: 'maxLiquidityPerTick',
    ...config,
  } as UseContractReadConfig<
    typeof iUniswapV3PoolImmutablesABI,
    'maxLiquidityPerTick'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV3PoolImmutablesABI}__ and `functionName` set to `"tickSpacing"`.
 */
export function useIUniswapV3PoolImmutablesTickSpacing(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV3PoolImmutablesABI, 'tickSpacing'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV3PoolImmutablesABI,
    functionName: 'tickSpacing',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV3PoolImmutablesABI, 'tickSpacing'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV3PoolImmutablesABI}__ and `functionName` set to `"token0"`.
 */
export function useIUniswapV3PoolImmutablesToken0(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV3PoolImmutablesABI, 'token0'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV3PoolImmutablesABI,
    functionName: 'token0',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV3PoolImmutablesABI, 'token0'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV3PoolImmutablesABI}__ and `functionName` set to `"token1"`.
 */
export function useIUniswapV3PoolImmutablesToken1(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV3PoolImmutablesABI, 'token1'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV3PoolImmutablesABI,
    functionName: 'token1',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV3PoolImmutablesABI, 'token1'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iUniswapV3PoolOwnerActionsABI}__.
 */
export function useIUniswapV3PoolOwnerActions(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iUniswapV3PoolOwnerActionsABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iUniswapV3PoolOwnerActionsABI}__.
 */
export function useIUniswapV3PoolOwnerActionsWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iUniswapV3PoolOwnerActionsABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof iUniswapV3PoolOwnerActionsABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iUniswapV3PoolOwnerActionsABI,
    TFunctionName
  >({ abi: iUniswapV3PoolOwnerActionsABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iUniswapV3PoolOwnerActionsABI}__ and `functionName` set to `"collectProtocol"`.
 */
export function useIUniswapV3PoolOwnerActionsCollectProtocol<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iUniswapV3PoolOwnerActionsABI,
          'collectProtocol'
        >['abi'],
        'collectProtocol'
      > & { functionName?: 'collectProtocol' }
    : UseContractWriteConfig<
        TMode,
        typeof iUniswapV3PoolOwnerActionsABI,
        'collectProtocol'
      > & {
        abi?: never
        functionName?: 'collectProtocol'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iUniswapV3PoolOwnerActionsABI,
    'collectProtocol'
  >({
    abi: iUniswapV3PoolOwnerActionsABI,
    functionName: 'collectProtocol',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iUniswapV3PoolOwnerActionsABI}__ and `functionName` set to `"setFeeProtocol"`.
 */
export function useIUniswapV3PoolOwnerActionsSetFeeProtocol<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iUniswapV3PoolOwnerActionsABI,
          'setFeeProtocol'
        >['abi'],
        'setFeeProtocol'
      > & { functionName?: 'setFeeProtocol' }
    : UseContractWriteConfig<
        TMode,
        typeof iUniswapV3PoolOwnerActionsABI,
        'setFeeProtocol'
      > & {
        abi?: never
        functionName?: 'setFeeProtocol'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iUniswapV3PoolOwnerActionsABI,
    'setFeeProtocol'
  >({
    abi: iUniswapV3PoolOwnerActionsABI,
    functionName: 'setFeeProtocol',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iUniswapV3PoolOwnerActionsABI}__.
 */
export function usePrepareIUniswapV3PoolOwnerActionsWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iUniswapV3PoolOwnerActionsABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iUniswapV3PoolOwnerActionsABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iUniswapV3PoolOwnerActionsABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iUniswapV3PoolOwnerActionsABI}__ and `functionName` set to `"collectProtocol"`.
 */
export function usePrepareIUniswapV3PoolOwnerActionsCollectProtocol(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iUniswapV3PoolOwnerActionsABI,
      'collectProtocol'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iUniswapV3PoolOwnerActionsABI,
    functionName: 'collectProtocol',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iUniswapV3PoolOwnerActionsABI,
    'collectProtocol'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iUniswapV3PoolOwnerActionsABI}__ and `functionName` set to `"setFeeProtocol"`.
 */
export function usePrepareIUniswapV3PoolOwnerActionsSetFeeProtocol(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iUniswapV3PoolOwnerActionsABI,
      'setFeeProtocol'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iUniswapV3PoolOwnerActionsABI,
    functionName: 'setFeeProtocol',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iUniswapV3PoolOwnerActionsABI,
    'setFeeProtocol'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iUniswapV3PoolStateABI}__.
 */
export function useIUniswapV3PoolState(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iUniswapV3PoolStateABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV3PoolStateABI}__.
 */
export function useIUniswapV3PoolStateRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV3PoolStateABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV3PoolStateABI,
    ...config,
  } as UseContractReadConfig<typeof iUniswapV3PoolStateABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV3PoolStateABI}__ and `functionName` set to `"feeGrowthGlobal0X128"`.
 */
export function useIUniswapV3PoolStateFeeGrowthGlobal0X128(
  config: Omit<
    UseContractReadConfig<
      typeof iUniswapV3PoolStateABI,
      'feeGrowthGlobal0X128'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV3PoolStateABI,
    functionName: 'feeGrowthGlobal0X128',
    ...config,
  } as UseContractReadConfig<
    typeof iUniswapV3PoolStateABI,
    'feeGrowthGlobal0X128'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV3PoolStateABI}__ and `functionName` set to `"feeGrowthGlobal1X128"`.
 */
export function useIUniswapV3PoolStateFeeGrowthGlobal1X128(
  config: Omit<
    UseContractReadConfig<
      typeof iUniswapV3PoolStateABI,
      'feeGrowthGlobal1X128'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV3PoolStateABI,
    functionName: 'feeGrowthGlobal1X128',
    ...config,
  } as UseContractReadConfig<
    typeof iUniswapV3PoolStateABI,
    'feeGrowthGlobal1X128'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV3PoolStateABI}__ and `functionName` set to `"liquidity"`.
 */
export function useIUniswapV3PoolStateLiquidity(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV3PoolStateABI, 'liquidity'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV3PoolStateABI,
    functionName: 'liquidity',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV3PoolStateABI, 'liquidity'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV3PoolStateABI}__ and `functionName` set to `"observations"`.
 */
export function useIUniswapV3PoolStateObservations(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV3PoolStateABI, 'observations'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV3PoolStateABI,
    functionName: 'observations',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV3PoolStateABI, 'observations'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV3PoolStateABI}__ and `functionName` set to `"positions"`.
 */
export function useIUniswapV3PoolStatePositions(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV3PoolStateABI, 'positions'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV3PoolStateABI,
    functionName: 'positions',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV3PoolStateABI, 'positions'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV3PoolStateABI}__ and `functionName` set to `"protocolFees"`.
 */
export function useIUniswapV3PoolStateProtocolFees(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV3PoolStateABI, 'protocolFees'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV3PoolStateABI,
    functionName: 'protocolFees',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV3PoolStateABI, 'protocolFees'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV3PoolStateABI}__ and `functionName` set to `"slot0"`.
 */
export function useIUniswapV3PoolStateSlot0(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV3PoolStateABI, 'slot0'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV3PoolStateABI,
    functionName: 'slot0',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV3PoolStateABI, 'slot0'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV3PoolStateABI}__ and `functionName` set to `"tickBitmap"`.
 */
export function useIUniswapV3PoolStateTickBitmap(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV3PoolStateABI, 'tickBitmap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV3PoolStateABI,
    functionName: 'tickBitmap',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV3PoolStateABI, 'tickBitmap'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iUniswapV3PoolStateABI}__ and `functionName` set to `"ticks"`.
 */
export function useIUniswapV3PoolStateTicks(
  config: Omit<
    UseContractReadConfig<typeof iUniswapV3PoolStateABI, 'ticks'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: iUniswapV3PoolStateABI,
    functionName: 'ticks',
    ...config,
  } as UseContractReadConfig<typeof iUniswapV3PoolStateABI, 'ticks'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iUniswapV3SwapCallbackABI}__.
 */
export function useIUniswapV3SwapCallback(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: iUniswapV3SwapCallbackABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iUniswapV3SwapCallbackABI}__.
 */
export function useIUniswapV3SwapCallbackWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iUniswapV3SwapCallbackABI,
          string
        >['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof iUniswapV3SwapCallbackABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iUniswapV3SwapCallbackABI,
    TFunctionName
  >({ abi: iUniswapV3SwapCallbackABI, ...config } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iUniswapV3SwapCallbackABI}__ and `functionName` set to `"uniswapV3SwapCallback"`.
 */
export function useIUniswapV3SwapCallbackUniswapV3SwapCallback<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iUniswapV3SwapCallbackABI,
          'uniswapV3SwapCallback'
        >['abi'],
        'uniswapV3SwapCallback'
      > & { functionName?: 'uniswapV3SwapCallback' }
    : UseContractWriteConfig<
        TMode,
        typeof iUniswapV3SwapCallbackABI,
        'uniswapV3SwapCallback'
      > & {
        abi?: never
        functionName?: 'uniswapV3SwapCallback'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof iUniswapV3SwapCallbackABI,
    'uniswapV3SwapCallback'
  >({
    abi: iUniswapV3SwapCallbackABI,
    functionName: 'uniswapV3SwapCallback',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iUniswapV3SwapCallbackABI}__.
 */
export function usePrepareIUniswapV3SwapCallbackWrite<
  TFunctionName extends string,
>(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iUniswapV3SwapCallbackABI,
      TFunctionName
    >,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iUniswapV3SwapCallbackABI,
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iUniswapV3SwapCallbackABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iUniswapV3SwapCallbackABI}__ and `functionName` set to `"uniswapV3SwapCallback"`.
 */
export function usePrepareIUniswapV3SwapCallbackUniswapV3SwapCallback(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iUniswapV3SwapCallbackABI,
      'uniswapV3SwapCallback'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iUniswapV3SwapCallbackABI,
    functionName: 'uniswapV3SwapCallback',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof iUniswapV3SwapCallbackABI,
    'uniswapV3SwapCallback'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iweth9ABI}__.
 */
export function useIweth9(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: iweth9ABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iweth9ABI}__.
 */
export function useIweth9Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iweth9ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iweth9ABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iweth9ABI, TFunctionName>({
    abi: iweth9ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iweth9ABI}__ and `functionName` set to `"deposit"`.
 */
export function useIweth9Deposit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iweth9ABI, 'deposit'>['abi'],
        'deposit'
      > & { functionName?: 'deposit' }
    : UseContractWriteConfig<TMode, typeof iweth9ABI, 'deposit'> & {
        abi?: never
        functionName?: 'deposit'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iweth9ABI, 'deposit'>({
    abi: iweth9ABI,
    functionName: 'deposit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iweth9ABI}__ and `functionName` set to `"withdraw"`.
 */
export function useIweth9Withdraw<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iweth9ABI, 'withdraw'>['abi'],
        'withdraw'
      > & { functionName?: 'withdraw' }
    : UseContractWriteConfig<TMode, typeof iweth9ABI, 'withdraw'> & {
        abi?: never
        functionName?: 'withdraw'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof iweth9ABI, 'withdraw'>({
    abi: iweth9ABI,
    functionName: 'withdraw',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iweth9ABI}__.
 */
export function usePrepareIweth9Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iweth9ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iweth9ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iweth9ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iweth9ABI}__ and `functionName` set to `"deposit"`.
 */
export function usePrepareIweth9Deposit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iweth9ABI, 'deposit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iweth9ABI,
    functionName: 'deposit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iweth9ABI, 'deposit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iweth9ABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePrepareIweth9Withdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iweth9ABI, 'withdraw'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: iweth9ABI,
    functionName: 'withdraw',
    ...config,
  } as UsePrepareContractWriteConfig<typeof iweth9ABI, 'withdraw'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link immutableStateABI}__.
 */
export function useImmutableState(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: immutableStateABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link immutableStateABI}__.
 */
export function useImmutableStateRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof immutableStateABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: immutableStateABI,
    ...config,
  } as UseContractReadConfig<typeof immutableStateABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link immutableStateABI}__ and `functionName` set to `"factory"`.
 */
export function useImmutableStateFactory(
  config: Omit<
    UseContractReadConfig<typeof immutableStateABI, 'factory'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: immutableStateABI,
    functionName: 'factory',
    ...config,
  } as UseContractReadConfig<typeof immutableStateABI, 'factory'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link immutableStateABI}__ and `functionName` set to `"token0"`.
 */
export function useImmutableStateToken0(
  config: Omit<
    UseContractReadConfig<typeof immutableStateABI, 'token0'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: immutableStateABI,
    functionName: 'token0',
    ...config,
  } as UseContractReadConfig<typeof immutableStateABI, 'token0'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link immutableStateABI}__ and `functionName` set to `"token0Scale"`.
 */
export function useImmutableStateToken0Scale(
  config: Omit<
    UseContractReadConfig<typeof immutableStateABI, 'token0Scale'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: immutableStateABI,
    functionName: 'token0Scale',
    ...config,
  } as UseContractReadConfig<typeof immutableStateABI, 'token0Scale'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link immutableStateABI}__ and `functionName` set to `"token1"`.
 */
export function useImmutableStateToken1(
  config: Omit<
    UseContractReadConfig<typeof immutableStateABI, 'token1'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: immutableStateABI,
    functionName: 'token1',
    ...config,
  } as UseContractReadConfig<typeof immutableStateABI, 'token1'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link immutableStateABI}__ and `functionName` set to `"token1Scale"`.
 */
export function useImmutableStateToken1Scale(
  config: Omit<
    UseContractReadConfig<typeof immutableStateABI, 'token1Scale'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: immutableStateABI,
    functionName: 'token1Scale',
    ...config,
  } as UseContractReadConfig<typeof immutableStateABI, 'token1Scale'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link immutableStateABI}__ and `functionName` set to `"upperBound"`.
 */
export function useImmutableStateUpperBound(
  config: Omit<
    UseContractReadConfig<typeof immutableStateABI, 'upperBound'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: immutableStateABI,
    functionName: 'upperBound',
    ...config,
  } as UseContractReadConfig<typeof immutableStateABI, 'upperBound'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link jumpRateABI}__.
 */
export function useJumpRate(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: jumpRateABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jumpRateABI}__.
 */
export function useJumpRateRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof jumpRateABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: jumpRateABI,
    ...config,
  } as UseContractReadConfig<typeof jumpRateABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jumpRateABI}__ and `functionName` set to `"getBorrowRate"`.
 */
export function useJumpRateGetBorrowRate(
  config: Omit<
    UseContractReadConfig<typeof jumpRateABI, 'getBorrowRate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: jumpRateABI,
    functionName: 'getBorrowRate',
    ...config,
  } as UseContractReadConfig<typeof jumpRateABI, 'getBorrowRate'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jumpRateABI}__ and `functionName` set to `"getSupplyRate"`.
 */
export function useJumpRateGetSupplyRate(
  config: Omit<
    UseContractReadConfig<typeof jumpRateABI, 'getSupplyRate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: jumpRateABI,
    functionName: 'getSupplyRate',
    ...config,
  } as UseContractReadConfig<typeof jumpRateABI, 'getSupplyRate'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jumpRateABI}__ and `functionName` set to `"jumpMultiplier"`.
 */
export function useJumpRateJumpMultiplier(
  config: Omit<
    UseContractReadConfig<typeof jumpRateABI, 'jumpMultiplier'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: jumpRateABI,
    functionName: 'jumpMultiplier',
    ...config,
  } as UseContractReadConfig<typeof jumpRateABI, 'jumpMultiplier'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jumpRateABI}__ and `functionName` set to `"kink"`.
 */
export function useJumpRateKink(
  config: Omit<
    UseContractReadConfig<typeof jumpRateABI, 'kink'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: jumpRateABI,
    functionName: 'kink',
    ...config,
  } as UseContractReadConfig<typeof jumpRateABI, 'kink'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link jumpRateABI}__ and `functionName` set to `"multiplier"`.
 */
export function useJumpRateMultiplier(
  config: Omit<
    UseContractReadConfig<typeof jumpRateABI, 'multiplier'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: jumpRateABI,
    functionName: 'multiplier',
    ...config,
  } as UseContractReadConfig<typeof jumpRateABI, 'multiplier'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link lendgineABI}__.
 */
export function useLendgine(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: lendgineABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lendgineABI}__.
 */
export function useLendgineRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof lendgineABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: lendgineABI,
    ...config,
  } as UseContractReadConfig<typeof lendgineABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useLendgineDomainSeparator(
  config: Omit<
    UseContractReadConfig<typeof lendgineABI, 'DOMAIN_SEPARATOR'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lendgineABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<typeof lendgineABI, 'DOMAIN_SEPARATOR'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"PERMIT_TYPEHASH"`.
 */
export function useLendginePermitTypehash(
  config: Omit<
    UseContractReadConfig<typeof lendgineABI, 'PERMIT_TYPEHASH'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lendgineABI,
    functionName: 'PERMIT_TYPEHASH',
    ...config,
  } as UseContractReadConfig<typeof lendgineABI, 'PERMIT_TYPEHASH'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"allowance"`.
 */
export function useLendgineAllowance(
  config: Omit<
    UseContractReadConfig<typeof lendgineABI, 'allowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lendgineABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof lendgineABI, 'allowance'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useLendgineBalanceOf(
  config: Omit<
    UseContractReadConfig<typeof lendgineABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lendgineABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof lendgineABI, 'balanceOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"convertCollateralToLiquidity"`.
 */
export function useLendgineConvertCollateralToLiquidity(
  config: Omit<
    UseContractReadConfig<typeof lendgineABI, 'convertCollateralToLiquidity'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lendgineABI,
    functionName: 'convertCollateralToLiquidity',
    ...config,
  } as UseContractReadConfig<
    typeof lendgineABI,
    'convertCollateralToLiquidity'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"convertLiquidityToCollateral"`.
 */
export function useLendgineConvertLiquidityToCollateral(
  config: Omit<
    UseContractReadConfig<typeof lendgineABI, 'convertLiquidityToCollateral'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lendgineABI,
    functionName: 'convertLiquidityToCollateral',
    ...config,
  } as UseContractReadConfig<
    typeof lendgineABI,
    'convertLiquidityToCollateral'
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"convertLiquidityToShare"`.
 */
export function useLendgineConvertLiquidityToShare(
  config: Omit<
    UseContractReadConfig<typeof lendgineABI, 'convertLiquidityToShare'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lendgineABI,
    functionName: 'convertLiquidityToShare',
    ...config,
  } as UseContractReadConfig<typeof lendgineABI, 'convertLiquidityToShare'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"convertShareToLiquidity"`.
 */
export function useLendgineConvertShareToLiquidity(
  config: Omit<
    UseContractReadConfig<typeof lendgineABI, 'convertShareToLiquidity'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lendgineABI,
    functionName: 'convertShareToLiquidity',
    ...config,
  } as UseContractReadConfig<typeof lendgineABI, 'convertShareToLiquidity'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"decimals"`.
 */
export function useLendgineDecimals(
  config: Omit<
    UseContractReadConfig<typeof lendgineABI, 'decimals'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lendgineABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof lendgineABI, 'decimals'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"factory"`.
 */
export function useLendgineFactory(
  config: Omit<
    UseContractReadConfig<typeof lendgineABI, 'factory'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lendgineABI,
    functionName: 'factory',
    ...config,
  } as UseContractReadConfig<typeof lendgineABI, 'factory'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"getBorrowRate"`.
 */
export function useLendgineGetBorrowRate(
  config: Omit<
    UseContractReadConfig<typeof lendgineABI, 'getBorrowRate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lendgineABI,
    functionName: 'getBorrowRate',
    ...config,
  } as UseContractReadConfig<typeof lendgineABI, 'getBorrowRate'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"getSupplyRate"`.
 */
export function useLendgineGetSupplyRate(
  config: Omit<
    UseContractReadConfig<typeof lendgineABI, 'getSupplyRate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lendgineABI,
    functionName: 'getSupplyRate',
    ...config,
  } as UseContractReadConfig<typeof lendgineABI, 'getSupplyRate'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"invariant"`.
 */
export function useLendgineInvariant(
  config: Omit<
    UseContractReadConfig<typeof lendgineABI, 'invariant'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lendgineABI,
    functionName: 'invariant',
    ...config,
  } as UseContractReadConfig<typeof lendgineABI, 'invariant'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"jumpMultiplier"`.
 */
export function useLendgineJumpMultiplier(
  config: Omit<
    UseContractReadConfig<typeof lendgineABI, 'jumpMultiplier'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lendgineABI,
    functionName: 'jumpMultiplier',
    ...config,
  } as UseContractReadConfig<typeof lendgineABI, 'jumpMultiplier'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"kink"`.
 */
export function useLendgineKink(
  config: Omit<
    UseContractReadConfig<typeof lendgineABI, 'kink'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lendgineABI,
    functionName: 'kink',
    ...config,
  } as UseContractReadConfig<typeof lendgineABI, 'kink'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"lastUpdate"`.
 */
export function useLendgineLastUpdate(
  config: Omit<
    UseContractReadConfig<typeof lendgineABI, 'lastUpdate'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lendgineABI,
    functionName: 'lastUpdate',
    ...config,
  } as UseContractReadConfig<typeof lendgineABI, 'lastUpdate'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"multiplier"`.
 */
export function useLendgineMultiplier(
  config: Omit<
    UseContractReadConfig<typeof lendgineABI, 'multiplier'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lendgineABI,
    functionName: 'multiplier',
    ...config,
  } as UseContractReadConfig<typeof lendgineABI, 'multiplier'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"name"`.
 */
export function useLendgineName(
  config: Omit<
    UseContractReadConfig<typeof lendgineABI, 'name'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lendgineABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof lendgineABI, 'name'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"nonces"`.
 */
export function useLendgineNonces(
  config: Omit<
    UseContractReadConfig<typeof lendgineABI, 'nonces'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lendgineABI,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<typeof lendgineABI, 'nonces'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"positions"`.
 */
export function useLendginePositions(
  config: Omit<
    UseContractReadConfig<typeof lendgineABI, 'positions'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lendgineABI,
    functionName: 'positions',
    ...config,
  } as UseContractReadConfig<typeof lendgineABI, 'positions'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"reserve0"`.
 */
export function useLendgineReserve0(
  config: Omit<
    UseContractReadConfig<typeof lendgineABI, 'reserve0'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lendgineABI,
    functionName: 'reserve0',
    ...config,
  } as UseContractReadConfig<typeof lendgineABI, 'reserve0'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"reserve1"`.
 */
export function useLendgineReserve1(
  config: Omit<
    UseContractReadConfig<typeof lendgineABI, 'reserve1'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lendgineABI,
    functionName: 'reserve1',
    ...config,
  } as UseContractReadConfig<typeof lendgineABI, 'reserve1'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"rewardPerPositionStored"`.
 */
export function useLendgineRewardPerPositionStored(
  config: Omit<
    UseContractReadConfig<typeof lendgineABI, 'rewardPerPositionStored'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lendgineABI,
    functionName: 'rewardPerPositionStored',
    ...config,
  } as UseContractReadConfig<typeof lendgineABI, 'rewardPerPositionStored'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"symbol"`.
 */
export function useLendgineSymbol(
  config: Omit<
    UseContractReadConfig<typeof lendgineABI, 'symbol'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lendgineABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof lendgineABI, 'symbol'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"token0"`.
 */
export function useLendgineToken0(
  config: Omit<
    UseContractReadConfig<typeof lendgineABI, 'token0'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lendgineABI,
    functionName: 'token0',
    ...config,
  } as UseContractReadConfig<typeof lendgineABI, 'token0'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"token0Scale"`.
 */
export function useLendgineToken0Scale(
  config: Omit<
    UseContractReadConfig<typeof lendgineABI, 'token0Scale'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lendgineABI,
    functionName: 'token0Scale',
    ...config,
  } as UseContractReadConfig<typeof lendgineABI, 'token0Scale'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"token1"`.
 */
export function useLendgineToken1(
  config: Omit<
    UseContractReadConfig<typeof lendgineABI, 'token1'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lendgineABI,
    functionName: 'token1',
    ...config,
  } as UseContractReadConfig<typeof lendgineABI, 'token1'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"token1Scale"`.
 */
export function useLendgineToken1Scale(
  config: Omit<
    UseContractReadConfig<typeof lendgineABI, 'token1Scale'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lendgineABI,
    functionName: 'token1Scale',
    ...config,
  } as UseContractReadConfig<typeof lendgineABI, 'token1Scale'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"totalLiquidity"`.
 */
export function useLendgineTotalLiquidity(
  config: Omit<
    UseContractReadConfig<typeof lendgineABI, 'totalLiquidity'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lendgineABI,
    functionName: 'totalLiquidity',
    ...config,
  } as UseContractReadConfig<typeof lendgineABI, 'totalLiquidity'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"totalLiquidityBorrowed"`.
 */
export function useLendgineTotalLiquidityBorrowed(
  config: Omit<
    UseContractReadConfig<typeof lendgineABI, 'totalLiquidityBorrowed'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lendgineABI,
    functionName: 'totalLiquidityBorrowed',
    ...config,
  } as UseContractReadConfig<typeof lendgineABI, 'totalLiquidityBorrowed'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"totalPositionSize"`.
 */
export function useLendgineTotalPositionSize(
  config: Omit<
    UseContractReadConfig<typeof lendgineABI, 'totalPositionSize'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lendgineABI,
    functionName: 'totalPositionSize',
    ...config,
  } as UseContractReadConfig<typeof lendgineABI, 'totalPositionSize'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useLendgineTotalSupply(
  config: Omit<
    UseContractReadConfig<typeof lendgineABI, 'totalSupply'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lendgineABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof lendgineABI, 'totalSupply'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"upperBound"`.
 */
export function useLendgineUpperBound(
  config: Omit<
    UseContractReadConfig<typeof lendgineABI, 'upperBound'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lendgineABI,
    functionName: 'upperBound',
    ...config,
  } as UseContractReadConfig<typeof lendgineABI, 'upperBound'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lendgineABI}__.
 */
export function useLendgineWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lendgineABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof lendgineABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lendgineABI, TFunctionName>({
    abi: lendgineABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"accrueInterest"`.
 */
export function useLendgineAccrueInterest<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lendgineABI, 'accrueInterest'>['abi'],
        'accrueInterest'
      > & { functionName?: 'accrueInterest' }
    : UseContractWriteConfig<TMode, typeof lendgineABI, 'accrueInterest'> & {
        abi?: never
        functionName?: 'accrueInterest'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lendgineABI, 'accrueInterest'>({
    abi: lendgineABI,
    functionName: 'accrueInterest',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"accruePositionInterest"`.
 */
export function useLendgineAccruePositionInterest<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof lendgineABI,
          'accruePositionInterest'
        >['abi'],
        'accruePositionInterest'
      > & { functionName?: 'accruePositionInterest' }
    : UseContractWriteConfig<
        TMode,
        typeof lendgineABI,
        'accruePositionInterest'
      > & {
        abi?: never
        functionName?: 'accruePositionInterest'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lendgineABI, 'accruePositionInterest'>({
    abi: lendgineABI,
    functionName: 'accruePositionInterest',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"approve"`.
 */
export function useLendgineApprove<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lendgineABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof lendgineABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lendgineABI, 'approve'>({
    abi: lendgineABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"burn"`.
 */
export function useLendgineBurn<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lendgineABI, 'burn'>['abi'],
        'burn'
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<TMode, typeof lendgineABI, 'burn'> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lendgineABI, 'burn'>({
    abi: lendgineABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"collect"`.
 */
export function useLendgineCollect<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lendgineABI, 'collect'>['abi'],
        'collect'
      > & { functionName?: 'collect' }
    : UseContractWriteConfig<TMode, typeof lendgineABI, 'collect'> & {
        abi?: never
        functionName?: 'collect'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lendgineABI, 'collect'>({
    abi: lendgineABI,
    functionName: 'collect',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"deposit"`.
 */
export function useLendgineDeposit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lendgineABI, 'deposit'>['abi'],
        'deposit'
      > & { functionName?: 'deposit' }
    : UseContractWriteConfig<TMode, typeof lendgineABI, 'deposit'> & {
        abi?: never
        functionName?: 'deposit'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lendgineABI, 'deposit'>({
    abi: lendgineABI,
    functionName: 'deposit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"mint"`.
 */
export function useLendgineMint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lendgineABI, 'mint'>['abi'],
        'mint'
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<TMode, typeof lendgineABI, 'mint'> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lendgineABI, 'mint'>({
    abi: lendgineABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"permit"`.
 */
export function useLendginePermit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lendgineABI, 'permit'>['abi'],
        'permit'
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<TMode, typeof lendgineABI, 'permit'> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lendgineABI, 'permit'>({
    abi: lendgineABI,
    functionName: 'permit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"swap"`.
 */
export function useLendgineSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lendgineABI, 'swap'>['abi'],
        'swap'
      > & { functionName?: 'swap' }
    : UseContractWriteConfig<TMode, typeof lendgineABI, 'swap'> & {
        abi?: never
        functionName?: 'swap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lendgineABI, 'swap'>({
    abi: lendgineABI,
    functionName: 'swap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"transfer"`.
 */
export function useLendgineTransfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lendgineABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof lendgineABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lendgineABI, 'transfer'>({
    abi: lendgineABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useLendgineTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lendgineABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof lendgineABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lendgineABI, 'transferFrom'>({
    abi: lendgineABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"withdraw"`.
 */
export function useLendgineWithdraw<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lendgineABI, 'withdraw'>['abi'],
        'withdraw'
      > & { functionName?: 'withdraw' }
    : UseContractWriteConfig<TMode, typeof lendgineABI, 'withdraw'> & {
        abi?: never
        functionName?: 'withdraw'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lendgineABI, 'withdraw'>({
    abi: lendgineABI,
    functionName: 'withdraw',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lendgineABI}__.
 */
export function usePrepareLendgineWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lendgineABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lendgineABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof lendgineABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"accrueInterest"`.
 */
export function usePrepareLendgineAccrueInterest(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lendgineABI, 'accrueInterest'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lendgineABI,
    functionName: 'accrueInterest',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lendgineABI, 'accrueInterest'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"accruePositionInterest"`.
 */
export function usePrepareLendgineAccruePositionInterest(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lendgineABI, 'accruePositionInterest'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lendgineABI,
    functionName: 'accruePositionInterest',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof lendgineABI,
    'accruePositionInterest'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareLendgineApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lendgineABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lendgineABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lendgineABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareLendgineBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lendgineABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lendgineABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lendgineABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"collect"`.
 */
export function usePrepareLendgineCollect(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lendgineABI, 'collect'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lendgineABI,
    functionName: 'collect',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lendgineABI, 'collect'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"deposit"`.
 */
export function usePrepareLendgineDeposit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lendgineABI, 'deposit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lendgineABI,
    functionName: 'deposit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lendgineABI, 'deposit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareLendgineMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lendgineABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lendgineABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lendgineABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareLendginePermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lendgineABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lendgineABI,
    functionName: 'permit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lendgineABI, 'permit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"swap"`.
 */
export function usePrepareLendgineSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lendgineABI, 'swap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lendgineABI,
    functionName: 'swap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lendgineABI, 'swap'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareLendgineTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lendgineABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lendgineABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lendgineABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareLendgineTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lendgineABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lendgineABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lendgineABI, 'transferFrom'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lendgineABI}__ and `functionName` set to `"withdraw"`.
 */
export function usePrepareLendgineWithdraw(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lendgineABI, 'withdraw'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lendgineABI,
    functionName: 'withdraw',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lendgineABI, 'withdraw'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lendgineABI}__.
 */
export function useLendgineEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof lendgineABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: lendgineABI,
    ...config,
  } as UseContractEventConfig<typeof lendgineABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lendgineABI}__ and `eventName` set to `"AccrueInterest"`.
 */
export function useLendgineAccrueInterestEvent(
  config: Omit<
    UseContractEventConfig<typeof lendgineABI, 'AccrueInterest'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: lendgineABI,
    eventName: 'AccrueInterest',
    ...config,
  } as UseContractEventConfig<typeof lendgineABI, 'AccrueInterest'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lendgineABI}__ and `eventName` set to `"AccruePositionInterest"`.
 */
export function useLendgineAccruePositionInterestEvent(
  config: Omit<
    UseContractEventConfig<typeof lendgineABI, 'AccruePositionInterest'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: lendgineABI,
    eventName: 'AccruePositionInterest',
    ...config,
  } as UseContractEventConfig<typeof lendgineABI, 'AccruePositionInterest'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lendgineABI}__ and `eventName` set to `"Approval"`.
 */
export function useLendgineApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof lendgineABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: lendgineABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof lendgineABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lendgineABI}__ and `eventName` set to `"Burn"`.
 */
export function useLendgineBurnEvent(
  config: Omit<
    UseContractEventConfig<typeof lendgineABI, 'Burn'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: lendgineABI,
    eventName: 'Burn',
    ...config,
  } as UseContractEventConfig<typeof lendgineABI, 'Burn'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lendgineABI}__ and `eventName` set to `"Collect"`.
 */
export function useLendgineCollectEvent(
  config: Omit<
    UseContractEventConfig<typeof lendgineABI, 'Collect'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: lendgineABI,
    eventName: 'Collect',
    ...config,
  } as UseContractEventConfig<typeof lendgineABI, 'Collect'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lendgineABI}__ and `eventName` set to `"Deposit"`.
 */
export function useLendgineDepositEvent(
  config: Omit<
    UseContractEventConfig<typeof lendgineABI, 'Deposit'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: lendgineABI,
    eventName: 'Deposit',
    ...config,
  } as UseContractEventConfig<typeof lendgineABI, 'Deposit'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lendgineABI}__ and `eventName` set to `"Mint"`.
 */
export function useLendgineMintEvent(
  config: Omit<
    UseContractEventConfig<typeof lendgineABI, 'Mint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: lendgineABI,
    eventName: 'Mint',
    ...config,
  } as UseContractEventConfig<typeof lendgineABI, 'Mint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lendgineABI}__ and `eventName` set to `"Swap"`.
 */
export function useLendgineSwapEvent(
  config: Omit<
    UseContractEventConfig<typeof lendgineABI, 'Swap'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: lendgineABI,
    eventName: 'Swap',
    ...config,
  } as UseContractEventConfig<typeof lendgineABI, 'Swap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lendgineABI}__ and `eventName` set to `"Transfer"`.
 */
export function useLendgineTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof lendgineABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: lendgineABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof lendgineABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lendgineABI}__ and `eventName` set to `"Withdraw"`.
 */
export function useLendgineWithdrawEvent(
  config: Omit<
    UseContractEventConfig<typeof lendgineABI, 'Withdraw'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: lendgineABI,
    eventName: 'Withdraw',
    ...config,
  } as UseContractEventConfig<typeof lendgineABI, 'Withdraw'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link lendgineRouterABI}__.
 */
export function useLendgineRouter(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: lendgineRouterABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lendgineRouterABI}__.
 */
export function useLendgineRouterRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof lendgineRouterABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: lendgineRouterABI,
    ...config,
  } as UseContractReadConfig<typeof lendgineRouterABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lendgineRouterABI}__ and `functionName` set to `"factory"`.
 */
export function useLendgineRouterFactory(
  config: Omit<
    UseContractReadConfig<typeof lendgineRouterABI, 'factory'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lendgineRouterABI,
    functionName: 'factory',
    ...config,
  } as UseContractReadConfig<typeof lendgineRouterABI, 'factory'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lendgineRouterABI}__ and `functionName` set to `"uniswapV2Factory"`.
 */
export function useLendgineRouterUniswapV2Factory(
  config: Omit<
    UseContractReadConfig<typeof lendgineRouterABI, 'uniswapV2Factory'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lendgineRouterABI,
    functionName: 'uniswapV2Factory',
    ...config,
  } as UseContractReadConfig<typeof lendgineRouterABI, 'uniswapV2Factory'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lendgineRouterABI}__ and `functionName` set to `"uniswapV3Factory"`.
 */
export function useLendgineRouterUniswapV3Factory(
  config: Omit<
    UseContractReadConfig<typeof lendgineRouterABI, 'uniswapV3Factory'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lendgineRouterABI,
    functionName: 'uniswapV3Factory',
    ...config,
  } as UseContractReadConfig<typeof lendgineRouterABI, 'uniswapV3Factory'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link lendgineRouterABI}__ and `functionName` set to `"weth"`.
 */
export function useLendgineRouterWeth(
  config: Omit<
    UseContractReadConfig<typeof lendgineRouterABI, 'weth'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: lendgineRouterABI,
    functionName: 'weth',
    ...config,
  } as UseContractReadConfig<typeof lendgineRouterABI, 'weth'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lendgineRouterABI}__.
 */
export function useLendgineRouterWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lendgineRouterABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof lendgineRouterABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lendgineRouterABI, TFunctionName>({
    abi: lendgineRouterABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lendgineRouterABI}__ and `functionName` set to `"burn"`.
 */
export function useLendgineRouterBurn<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lendgineRouterABI, 'burn'>['abi'],
        'burn'
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<TMode, typeof lendgineRouterABI, 'burn'> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lendgineRouterABI, 'burn'>({
    abi: lendgineRouterABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lendgineRouterABI}__ and `functionName` set to `"mint"`.
 */
export function useLendgineRouterMint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof lendgineRouterABI, 'mint'>['abi'],
        'mint'
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<TMode, typeof lendgineRouterABI, 'mint'> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lendgineRouterABI, 'mint'>({
    abi: lendgineRouterABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lendgineRouterABI}__ and `functionName` set to `"mintCallback"`.
 */
export function useLendgineRouterMintCallback<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof lendgineRouterABI,
          'mintCallback'
        >['abi'],
        'mintCallback'
      > & { functionName?: 'mintCallback' }
    : UseContractWriteConfig<
        TMode,
        typeof lendgineRouterABI,
        'mintCallback'
      > & {
        abi?: never
        functionName?: 'mintCallback'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lendgineRouterABI, 'mintCallback'>({
    abi: lendgineRouterABI,
    functionName: 'mintCallback',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lendgineRouterABI}__ and `functionName` set to `"multicall"`.
 */
export function useLendgineRouterMulticall<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof lendgineRouterABI,
          'multicall'
        >['abi'],
        'multicall'
      > & { functionName?: 'multicall' }
    : UseContractWriteConfig<TMode, typeof lendgineRouterABI, 'multicall'> & {
        abi?: never
        functionName?: 'multicall'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lendgineRouterABI, 'multicall'>({
    abi: lendgineRouterABI,
    functionName: 'multicall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lendgineRouterABI}__ and `functionName` set to `"pairMintCallback"`.
 */
export function useLendgineRouterPairMintCallback<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof lendgineRouterABI,
          'pairMintCallback'
        >['abi'],
        'pairMintCallback'
      > & { functionName?: 'pairMintCallback' }
    : UseContractWriteConfig<
        TMode,
        typeof lendgineRouterABI,
        'pairMintCallback'
      > & {
        abi?: never
        functionName?: 'pairMintCallback'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lendgineRouterABI, 'pairMintCallback'>({
    abi: lendgineRouterABI,
    functionName: 'pairMintCallback',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lendgineRouterABI}__ and `functionName` set to `"refundETH"`.
 */
export function useLendgineRouterRefundEth<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof lendgineRouterABI,
          'refundETH'
        >['abi'],
        'refundETH'
      > & { functionName?: 'refundETH' }
    : UseContractWriteConfig<TMode, typeof lendgineRouterABI, 'refundETH'> & {
        abi?: never
        functionName?: 'refundETH'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lendgineRouterABI, 'refundETH'>({
    abi: lendgineRouterABI,
    functionName: 'refundETH',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lendgineRouterABI}__ and `functionName` set to `"selfPermit"`.
 */
export function useLendgineRouterSelfPermit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof lendgineRouterABI,
          'selfPermit'
        >['abi'],
        'selfPermit'
      > & { functionName?: 'selfPermit' }
    : UseContractWriteConfig<TMode, typeof lendgineRouterABI, 'selfPermit'> & {
        abi?: never
        functionName?: 'selfPermit'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lendgineRouterABI, 'selfPermit'>({
    abi: lendgineRouterABI,
    functionName: 'selfPermit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lendgineRouterABI}__ and `functionName` set to `"selfPermitAllowed"`.
 */
export function useLendgineRouterSelfPermitAllowed<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof lendgineRouterABI,
          'selfPermitAllowed'
        >['abi'],
        'selfPermitAllowed'
      > & { functionName?: 'selfPermitAllowed' }
    : UseContractWriteConfig<
        TMode,
        typeof lendgineRouterABI,
        'selfPermitAllowed'
      > & {
        abi?: never
        functionName?: 'selfPermitAllowed'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lendgineRouterABI, 'selfPermitAllowed'>(
    {
      abi: lendgineRouterABI,
      functionName: 'selfPermitAllowed',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lendgineRouterABI}__ and `functionName` set to `"sweepToken"`.
 */
export function useLendgineRouterSweepToken<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof lendgineRouterABI,
          'sweepToken'
        >['abi'],
        'sweepToken'
      > & { functionName?: 'sweepToken' }
    : UseContractWriteConfig<TMode, typeof lendgineRouterABI, 'sweepToken'> & {
        abi?: never
        functionName?: 'sweepToken'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lendgineRouterABI, 'sweepToken'>({
    abi: lendgineRouterABI,
    functionName: 'sweepToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lendgineRouterABI}__ and `functionName` set to `"uniswapV3SwapCallback"`.
 */
export function useLendgineRouterUniswapV3SwapCallback<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof lendgineRouterABI,
          'uniswapV3SwapCallback'
        >['abi'],
        'uniswapV3SwapCallback'
      > & { functionName?: 'uniswapV3SwapCallback' }
    : UseContractWriteConfig<
        TMode,
        typeof lendgineRouterABI,
        'uniswapV3SwapCallback'
      > & {
        abi?: never
        functionName?: 'uniswapV3SwapCallback'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof lendgineRouterABI,
    'uniswapV3SwapCallback'
  >({
    abi: lendgineRouterABI,
    functionName: 'uniswapV3SwapCallback',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link lendgineRouterABI}__ and `functionName` set to `"unwrapWETH"`.
 */
export function useLendgineRouterUnwrapWeth<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof lendgineRouterABI,
          'unwrapWETH'
        >['abi'],
        'unwrapWETH'
      > & { functionName?: 'unwrapWETH' }
    : UseContractWriteConfig<TMode, typeof lendgineRouterABI, 'unwrapWETH'> & {
        abi?: never
        functionName?: 'unwrapWETH'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof lendgineRouterABI, 'unwrapWETH'>({
    abi: lendgineRouterABI,
    functionName: 'unwrapWETH',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lendgineRouterABI}__.
 */
export function usePrepareLendgineRouterWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lendgineRouterABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lendgineRouterABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof lendgineRouterABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lendgineRouterABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareLendgineRouterBurn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lendgineRouterABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lendgineRouterABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lendgineRouterABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lendgineRouterABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareLendgineRouterMint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lendgineRouterABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lendgineRouterABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lendgineRouterABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lendgineRouterABI}__ and `functionName` set to `"mintCallback"`.
 */
export function usePrepareLendgineRouterMintCallback(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lendgineRouterABI, 'mintCallback'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lendgineRouterABI,
    functionName: 'mintCallback',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lendgineRouterABI, 'mintCallback'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lendgineRouterABI}__ and `functionName` set to `"multicall"`.
 */
export function usePrepareLendgineRouterMulticall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lendgineRouterABI, 'multicall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lendgineRouterABI,
    functionName: 'multicall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lendgineRouterABI, 'multicall'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lendgineRouterABI}__ and `functionName` set to `"pairMintCallback"`.
 */
export function usePrepareLendgineRouterPairMintCallback(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lendgineRouterABI, 'pairMintCallback'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lendgineRouterABI,
    functionName: 'pairMintCallback',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof lendgineRouterABI,
    'pairMintCallback'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lendgineRouterABI}__ and `functionName` set to `"refundETH"`.
 */
export function usePrepareLendgineRouterRefundEth(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lendgineRouterABI, 'refundETH'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lendgineRouterABI,
    functionName: 'refundETH',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lendgineRouterABI, 'refundETH'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lendgineRouterABI}__ and `functionName` set to `"selfPermit"`.
 */
export function usePrepareLendgineRouterSelfPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lendgineRouterABI, 'selfPermit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lendgineRouterABI,
    functionName: 'selfPermit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lendgineRouterABI, 'selfPermit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lendgineRouterABI}__ and `functionName` set to `"selfPermitAllowed"`.
 */
export function usePrepareLendgineRouterSelfPermitAllowed(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof lendgineRouterABI,
      'selfPermitAllowed'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lendgineRouterABI,
    functionName: 'selfPermitAllowed',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof lendgineRouterABI,
    'selfPermitAllowed'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lendgineRouterABI}__ and `functionName` set to `"sweepToken"`.
 */
export function usePrepareLendgineRouterSweepToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lendgineRouterABI, 'sweepToken'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lendgineRouterABI,
    functionName: 'sweepToken',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lendgineRouterABI, 'sweepToken'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lendgineRouterABI}__ and `functionName` set to `"uniswapV3SwapCallback"`.
 */
export function usePrepareLendgineRouterUniswapV3SwapCallback(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof lendgineRouterABI,
      'uniswapV3SwapCallback'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lendgineRouterABI,
    functionName: 'uniswapV3SwapCallback',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof lendgineRouterABI,
    'uniswapV3SwapCallback'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link lendgineRouterABI}__ and `functionName` set to `"unwrapWETH"`.
 */
export function usePrepareLendgineRouterUnwrapWeth(
  config: Omit<
    UsePrepareContractWriteConfig<typeof lendgineRouterABI, 'unwrapWETH'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: lendgineRouterABI,
    functionName: 'unwrapWETH',
    ...config,
  } as UsePrepareContractWriteConfig<typeof lendgineRouterABI, 'unwrapWETH'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lendgineRouterABI}__.
 */
export function useLendgineRouterEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof lendgineRouterABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: lendgineRouterABI,
    ...config,
  } as UseContractEventConfig<typeof lendgineRouterABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lendgineRouterABI}__ and `eventName` set to `"Burn"`.
 */
export function useLendgineRouterBurnEvent(
  config: Omit<
    UseContractEventConfig<typeof lendgineRouterABI, 'Burn'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: lendgineRouterABI,
    eventName: 'Burn',
    ...config,
  } as UseContractEventConfig<typeof lendgineRouterABI, 'Burn'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link lendgineRouterABI}__ and `eventName` set to `"Mint"`.
 */
export function useLendgineRouterMintEvent(
  config: Omit<
    UseContractEventConfig<typeof lendgineRouterABI, 'Mint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: lendgineRouterABI,
    eventName: 'Mint',
    ...config,
  } as UseContractEventConfig<typeof lendgineRouterABI, 'Mint'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link liquidityManagerABI}__.
 */
export function useLiquidityManager(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: liquidityManagerABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityManagerABI}__.
 */
export function useLiquidityManagerRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof liquidityManagerABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: liquidityManagerABI,
    ...config,
  } as UseContractReadConfig<typeof liquidityManagerABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityManagerABI}__ and `functionName` set to `"factory"`.
 */
export function useLiquidityManagerFactory(
  config: Omit<
    UseContractReadConfig<typeof liquidityManagerABI, 'factory'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: liquidityManagerABI,
    functionName: 'factory',
    ...config,
  } as UseContractReadConfig<typeof liquidityManagerABI, 'factory'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityManagerABI}__ and `functionName` set to `"positions"`.
 */
export function useLiquidityManagerPositions(
  config: Omit<
    UseContractReadConfig<typeof liquidityManagerABI, 'positions'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: liquidityManagerABI,
    functionName: 'positions',
    ...config,
  } as UseContractReadConfig<typeof liquidityManagerABI, 'positions'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link liquidityManagerABI}__ and `functionName` set to `"weth"`.
 */
export function useLiquidityManagerWeth(
  config: Omit<
    UseContractReadConfig<typeof liquidityManagerABI, 'weth'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: liquidityManagerABI,
    functionName: 'weth',
    ...config,
  } as UseContractReadConfig<typeof liquidityManagerABI, 'weth'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityManagerABI}__.
 */
export function useLiquidityManagerWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof liquidityManagerABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<
        TMode,
        typeof liquidityManagerABI,
        TFunctionName
      > & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof liquidityManagerABI, TFunctionName>({
    abi: liquidityManagerABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityManagerABI}__ and `functionName` set to `"addLiquidity"`.
 */
export function useLiquidityManagerAddLiquidity<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof liquidityManagerABI,
          'addLiquidity'
        >['abi'],
        'addLiquidity'
      > & { functionName?: 'addLiquidity' }
    : UseContractWriteConfig<
        TMode,
        typeof liquidityManagerABI,
        'addLiquidity'
      > & {
        abi?: never
        functionName?: 'addLiquidity'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof liquidityManagerABI, 'addLiquidity'>({
    abi: liquidityManagerABI,
    functionName: 'addLiquidity',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityManagerABI}__ and `functionName` set to `"collect"`.
 */
export function useLiquidityManagerCollect<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof liquidityManagerABI,
          'collect'
        >['abi'],
        'collect'
      > & { functionName?: 'collect' }
    : UseContractWriteConfig<TMode, typeof liquidityManagerABI, 'collect'> & {
        abi?: never
        functionName?: 'collect'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof liquidityManagerABI, 'collect'>({
    abi: liquidityManagerABI,
    functionName: 'collect',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityManagerABI}__ and `functionName` set to `"multicall"`.
 */
export function useLiquidityManagerMulticall<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof liquidityManagerABI,
          'multicall'
        >['abi'],
        'multicall'
      > & { functionName?: 'multicall' }
    : UseContractWriteConfig<TMode, typeof liquidityManagerABI, 'multicall'> & {
        abi?: never
        functionName?: 'multicall'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof liquidityManagerABI, 'multicall'>({
    abi: liquidityManagerABI,
    functionName: 'multicall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityManagerABI}__ and `functionName` set to `"pairMintCallback"`.
 */
export function useLiquidityManagerPairMintCallback<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof liquidityManagerABI,
          'pairMintCallback'
        >['abi'],
        'pairMintCallback'
      > & { functionName?: 'pairMintCallback' }
    : UseContractWriteConfig<
        TMode,
        typeof liquidityManagerABI,
        'pairMintCallback'
      > & {
        abi?: never
        functionName?: 'pairMintCallback'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof liquidityManagerABI,
    'pairMintCallback'
  >({
    abi: liquidityManagerABI,
    functionName: 'pairMintCallback',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityManagerABI}__ and `functionName` set to `"refundETH"`.
 */
export function useLiquidityManagerRefundEth<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof liquidityManagerABI,
          'refundETH'
        >['abi'],
        'refundETH'
      > & { functionName?: 'refundETH' }
    : UseContractWriteConfig<TMode, typeof liquidityManagerABI, 'refundETH'> & {
        abi?: never
        functionName?: 'refundETH'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof liquidityManagerABI, 'refundETH'>({
    abi: liquidityManagerABI,
    functionName: 'refundETH',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityManagerABI}__ and `functionName` set to `"removeLiquidity"`.
 */
export function useLiquidityManagerRemoveLiquidity<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof liquidityManagerABI,
          'removeLiquidity'
        >['abi'],
        'removeLiquidity'
      > & { functionName?: 'removeLiquidity' }
    : UseContractWriteConfig<
        TMode,
        typeof liquidityManagerABI,
        'removeLiquidity'
      > & {
        abi?: never
        functionName?: 'removeLiquidity'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof liquidityManagerABI, 'removeLiquidity'>(
    {
      abi: liquidityManagerABI,
      functionName: 'removeLiquidity',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityManagerABI}__ and `functionName` set to `"selfPermit"`.
 */
export function useLiquidityManagerSelfPermit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof liquidityManagerABI,
          'selfPermit'
        >['abi'],
        'selfPermit'
      > & { functionName?: 'selfPermit' }
    : UseContractWriteConfig<
        TMode,
        typeof liquidityManagerABI,
        'selfPermit'
      > & {
        abi?: never
        functionName?: 'selfPermit'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof liquidityManagerABI, 'selfPermit'>({
    abi: liquidityManagerABI,
    functionName: 'selfPermit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityManagerABI}__ and `functionName` set to `"selfPermitAllowed"`.
 */
export function useLiquidityManagerSelfPermitAllowed<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof liquidityManagerABI,
          'selfPermitAllowed'
        >['abi'],
        'selfPermitAllowed'
      > & { functionName?: 'selfPermitAllowed' }
    : UseContractWriteConfig<
        TMode,
        typeof liquidityManagerABI,
        'selfPermitAllowed'
      > & {
        abi?: never
        functionName?: 'selfPermitAllowed'
      } = {} as any,
) {
  return useContractWrite<
    TMode,
    typeof liquidityManagerABI,
    'selfPermitAllowed'
  >({
    abi: liquidityManagerABI,
    functionName: 'selfPermitAllowed',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityManagerABI}__ and `functionName` set to `"sweepToken"`.
 */
export function useLiquidityManagerSweepToken<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof liquidityManagerABI,
          'sweepToken'
        >['abi'],
        'sweepToken'
      > & { functionName?: 'sweepToken' }
    : UseContractWriteConfig<
        TMode,
        typeof liquidityManagerABI,
        'sweepToken'
      > & {
        abi?: never
        functionName?: 'sweepToken'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof liquidityManagerABI, 'sweepToken'>({
    abi: liquidityManagerABI,
    functionName: 'sweepToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link liquidityManagerABI}__ and `functionName` set to `"unwrapWETH"`.
 */
export function useLiquidityManagerUnwrapWeth<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof liquidityManagerABI,
          'unwrapWETH'
        >['abi'],
        'unwrapWETH'
      > & { functionName?: 'unwrapWETH' }
    : UseContractWriteConfig<
        TMode,
        typeof liquidityManagerABI,
        'unwrapWETH'
      > & {
        abi?: never
        functionName?: 'unwrapWETH'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof liquidityManagerABI, 'unwrapWETH'>({
    abi: liquidityManagerABI,
    functionName: 'unwrapWETH',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityManagerABI}__.
 */
export function usePrepareLiquidityManagerWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityManagerABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: liquidityManagerABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof liquidityManagerABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityManagerABI}__ and `functionName` set to `"addLiquidity"`.
 */
export function usePrepareLiquidityManagerAddLiquidity(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityManagerABI, 'addLiquidity'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: liquidityManagerABI,
    functionName: 'addLiquidity',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof liquidityManagerABI,
    'addLiquidity'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityManagerABI}__ and `functionName` set to `"collect"`.
 */
export function usePrepareLiquidityManagerCollect(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityManagerABI, 'collect'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: liquidityManagerABI,
    functionName: 'collect',
    ...config,
  } as UsePrepareContractWriteConfig<typeof liquidityManagerABI, 'collect'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityManagerABI}__ and `functionName` set to `"multicall"`.
 */
export function usePrepareLiquidityManagerMulticall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityManagerABI, 'multicall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: liquidityManagerABI,
    functionName: 'multicall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof liquidityManagerABI, 'multicall'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityManagerABI}__ and `functionName` set to `"pairMintCallback"`.
 */
export function usePrepareLiquidityManagerPairMintCallback(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof liquidityManagerABI,
      'pairMintCallback'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: liquidityManagerABI,
    functionName: 'pairMintCallback',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof liquidityManagerABI,
    'pairMintCallback'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityManagerABI}__ and `functionName` set to `"refundETH"`.
 */
export function usePrepareLiquidityManagerRefundEth(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityManagerABI, 'refundETH'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: liquidityManagerABI,
    functionName: 'refundETH',
    ...config,
  } as UsePrepareContractWriteConfig<typeof liquidityManagerABI, 'refundETH'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityManagerABI}__ and `functionName` set to `"removeLiquidity"`.
 */
export function usePrepareLiquidityManagerRemoveLiquidity(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof liquidityManagerABI,
      'removeLiquidity'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: liquidityManagerABI,
    functionName: 'removeLiquidity',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof liquidityManagerABI,
    'removeLiquidity'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityManagerABI}__ and `functionName` set to `"selfPermit"`.
 */
export function usePrepareLiquidityManagerSelfPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityManagerABI, 'selfPermit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: liquidityManagerABI,
    functionName: 'selfPermit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof liquidityManagerABI, 'selfPermit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityManagerABI}__ and `functionName` set to `"selfPermitAllowed"`.
 */
export function usePrepareLiquidityManagerSelfPermitAllowed(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof liquidityManagerABI,
      'selfPermitAllowed'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: liquidityManagerABI,
    functionName: 'selfPermitAllowed',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof liquidityManagerABI,
    'selfPermitAllowed'
  >)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityManagerABI}__ and `functionName` set to `"sweepToken"`.
 */
export function usePrepareLiquidityManagerSweepToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityManagerABI, 'sweepToken'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: liquidityManagerABI,
    functionName: 'sweepToken',
    ...config,
  } as UsePrepareContractWriteConfig<typeof liquidityManagerABI, 'sweepToken'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link liquidityManagerABI}__ and `functionName` set to `"unwrapWETH"`.
 */
export function usePrepareLiquidityManagerUnwrapWeth(
  config: Omit<
    UsePrepareContractWriteConfig<typeof liquidityManagerABI, 'unwrapWETH'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: liquidityManagerABI,
    functionName: 'unwrapWETH',
    ...config,
  } as UsePrepareContractWriteConfig<typeof liquidityManagerABI, 'unwrapWETH'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityManagerABI}__.
 */
export function useLiquidityManagerEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof liquidityManagerABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: liquidityManagerABI,
    ...config,
  } as UseContractEventConfig<typeof liquidityManagerABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityManagerABI}__ and `eventName` set to `"AddLiquidity"`.
 */
export function useLiquidityManagerAddLiquidityEvent(
  config: Omit<
    UseContractEventConfig<typeof liquidityManagerABI, 'AddLiquidity'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: liquidityManagerABI,
    eventName: 'AddLiquidity',
    ...config,
  } as UseContractEventConfig<typeof liquidityManagerABI, 'AddLiquidity'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityManagerABI}__ and `eventName` set to `"Collect"`.
 */
export function useLiquidityManagerCollectEvent(
  config: Omit<
    UseContractEventConfig<typeof liquidityManagerABI, 'Collect'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: liquidityManagerABI,
    eventName: 'Collect',
    ...config,
  } as UseContractEventConfig<typeof liquidityManagerABI, 'Collect'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link liquidityManagerABI}__ and `eventName` set to `"RemoveLiquidity"`.
 */
export function useLiquidityManagerRemoveLiquidityEvent(
  config: Omit<
    UseContractEventConfig<typeof liquidityManagerABI, 'RemoveLiquidity'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: liquidityManagerABI,
    eventName: 'RemoveLiquidity',
    ...config,
  } as UseContractEventConfig<typeof liquidityManagerABI, 'RemoveLiquidity'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link mockErc20ABI}__.
 */
export function useMockErc20(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: mockErc20ABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc20ABI}__.
 */
export function useMockErc20Read<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof mockErc20ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc20ABI,
    ...config,
  } as UseContractReadConfig<typeof mockErc20ABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useMockErc20DomainSeparator(
  config: Omit<
    UseContractReadConfig<typeof mockErc20ABI, 'DOMAIN_SEPARATOR'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc20ABI,
    functionName: 'DOMAIN_SEPARATOR',
    ...config,
  } as UseContractReadConfig<typeof mockErc20ABI, 'DOMAIN_SEPARATOR'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"PERMIT_TYPEHASH"`.
 */
export function useMockErc20PermitTypehash(
  config: Omit<
    UseContractReadConfig<typeof mockErc20ABI, 'PERMIT_TYPEHASH'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc20ABI,
    functionName: 'PERMIT_TYPEHASH',
    ...config,
  } as UseContractReadConfig<typeof mockErc20ABI, 'PERMIT_TYPEHASH'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useMockErc20Allowance(
  config: Omit<
    UseContractReadConfig<typeof mockErc20ABI, 'allowance'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc20ABI,
    functionName: 'allowance',
    ...config,
  } as UseContractReadConfig<typeof mockErc20ABI, 'allowance'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useMockErc20BalanceOf(
  config: Omit<
    UseContractReadConfig<typeof mockErc20ABI, 'balanceOf'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc20ABI,
    functionName: 'balanceOf',
    ...config,
  } as UseContractReadConfig<typeof mockErc20ABI, 'balanceOf'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useMockErc20Decimals(
  config: Omit<
    UseContractReadConfig<typeof mockErc20ABI, 'decimals'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc20ABI,
    functionName: 'decimals',
    ...config,
  } as UseContractReadConfig<typeof mockErc20ABI, 'decimals'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"name"`.
 */
export function useMockErc20Name(
  config: Omit<
    UseContractReadConfig<typeof mockErc20ABI, 'name'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc20ABI,
    functionName: 'name',
    ...config,
  } as UseContractReadConfig<typeof mockErc20ABI, 'name'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"nonces"`.
 */
export function useMockErc20Nonces(
  config: Omit<
    UseContractReadConfig<typeof mockErc20ABI, 'nonces'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc20ABI,
    functionName: 'nonces',
    ...config,
  } as UseContractReadConfig<typeof mockErc20ABI, 'nonces'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useMockErc20Symbol(
  config: Omit<
    UseContractReadConfig<typeof mockErc20ABI, 'symbol'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc20ABI,
    functionName: 'symbol',
    ...config,
  } as UseContractReadConfig<typeof mockErc20ABI, 'symbol'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useMockErc20TotalSupply(
  config: Omit<
    UseContractReadConfig<typeof mockErc20ABI, 'totalSupply'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: mockErc20ABI,
    functionName: 'totalSupply',
    ...config,
  } as UseContractReadConfig<typeof mockErc20ABI, 'totalSupply'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockErc20ABI}__.
 */
export function useMockErc20Write<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mockErc20ABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof mockErc20ABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockErc20ABI, TFunctionName>({
    abi: mockErc20ABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useMockErc20Approve<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mockErc20ABI, 'approve'>['abi'],
        'approve'
      > & { functionName?: 'approve' }
    : UseContractWriteConfig<TMode, typeof mockErc20ABI, 'approve'> & {
        abi?: never
        functionName?: 'approve'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockErc20ABI, 'approve'>({
    abi: mockErc20ABI,
    functionName: 'approve',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"burn"`.
 */
export function useMockErc20Burn<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mockErc20ABI, 'burn'>['abi'],
        'burn'
      > & { functionName?: 'burn' }
    : UseContractWriteConfig<TMode, typeof mockErc20ABI, 'burn'> & {
        abi?: never
        functionName?: 'burn'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockErc20ABI, 'burn'>({
    abi: mockErc20ABI,
    functionName: 'burn',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"mint"`.
 */
export function useMockErc20Mint<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mockErc20ABI, 'mint'>['abi'],
        'mint'
      > & { functionName?: 'mint' }
    : UseContractWriteConfig<TMode, typeof mockErc20ABI, 'mint'> & {
        abi?: never
        functionName?: 'mint'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockErc20ABI, 'mint'>({
    abi: mockErc20ABI,
    functionName: 'mint',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"permit"`.
 */
export function useMockErc20Permit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mockErc20ABI, 'permit'>['abi'],
        'permit'
      > & { functionName?: 'permit' }
    : UseContractWriteConfig<TMode, typeof mockErc20ABI, 'permit'> & {
        abi?: never
        functionName?: 'permit'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockErc20ABI, 'permit'>({
    abi: mockErc20ABI,
    functionName: 'permit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useMockErc20Transfer<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mockErc20ABI, 'transfer'>['abi'],
        'transfer'
      > & { functionName?: 'transfer' }
    : UseContractWriteConfig<TMode, typeof mockErc20ABI, 'transfer'> & {
        abi?: never
        functionName?: 'transfer'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockErc20ABI, 'transfer'>({
    abi: mockErc20ABI,
    functionName: 'transfer',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useMockErc20TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof mockErc20ABI, 'transferFrom'>['abi'],
        'transferFrom'
      > & { functionName?: 'transferFrom' }
    : UseContractWriteConfig<TMode, typeof mockErc20ABI, 'transferFrom'> & {
        abi?: never
        functionName?: 'transferFrom'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof mockErc20ABI, 'transferFrom'>({
    abi: mockErc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockErc20ABI}__.
 */
export function usePrepareMockErc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockErc20ABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockErc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockErc20ABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareMockErc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockErc20ABI, 'approve'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockErc20ABI,
    functionName: 'approve',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockErc20ABI, 'approve'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"burn"`.
 */
export function usePrepareMockErc20Burn(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockErc20ABI, 'burn'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockErc20ABI,
    functionName: 'burn',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockErc20ABI, 'burn'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"mint"`.
 */
export function usePrepareMockErc20Mint(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockErc20ABI, 'mint'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockErc20ABI,
    functionName: 'mint',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockErc20ABI, 'mint'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareMockErc20Permit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockErc20ABI, 'permit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockErc20ABI,
    functionName: 'permit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockErc20ABI, 'permit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareMockErc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockErc20ABI, 'transfer'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockErc20ABI,
    functionName: 'transfer',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockErc20ABI, 'transfer'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link mockErc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareMockErc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof mockErc20ABI, 'transferFrom'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: mockErc20ABI,
    functionName: 'transferFrom',
    ...config,
  } as UsePrepareContractWriteConfig<typeof mockErc20ABI, 'transferFrom'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockErc20ABI}__.
 */
export function useMockErc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof mockErc20ABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: mockErc20ABI,
    ...config,
  } as UseContractEventConfig<typeof mockErc20ABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockErc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useMockErc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof mockErc20ABI, 'Approval'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: mockErc20ABI,
    eventName: 'Approval',
    ...config,
  } as UseContractEventConfig<typeof mockErc20ABI, 'Approval'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link mockErc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useMockErc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof mockErc20ABI, 'Transfer'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: mockErc20ABI,
    eventName: 'Transfer',
    ...config,
  } as UseContractEventConfig<typeof mockErc20ABI, 'Transfer'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link multicallABI}__.
 */
export function useMulticall(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: multicallABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multicallABI}__.
 */
export function useMulticallWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof multicallABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof multicallABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof multicallABI, TFunctionName>({
    abi: multicallABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link multicallABI}__ and `functionName` set to `"multicall"`.
 */
export function useMulticallMulticall<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof multicallABI, 'multicall'>['abi'],
        'multicall'
      > & { functionName?: 'multicall' }
    : UseContractWriteConfig<TMode, typeof multicallABI, 'multicall'> & {
        abi?: never
        functionName?: 'multicall'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof multicallABI, 'multicall'>({
    abi: multicallABI,
    functionName: 'multicall',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multicallABI}__.
 */
export function usePrepareMulticallWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof multicallABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: multicallABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof multicallABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link multicallABI}__ and `functionName` set to `"multicall"`.
 */
export function usePrepareMulticallMulticall(
  config: Omit<
    UsePrepareContractWriteConfig<typeof multicallABI, 'multicall'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: multicallABI,
    functionName: 'multicall',
    ...config,
  } as UsePrepareContractWriteConfig<typeof multicallABI, 'multicall'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link pairABI}__.
 */
export function usePair(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: pairABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__.
 */
export function usePairRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof pairABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({ abi: pairABI, ...config } as UseContractReadConfig<
    typeof pairABI,
    TFunctionName
  >)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"factory"`.
 */
export function usePairFactory(
  config: Omit<
    UseContractReadConfig<typeof pairABI, 'factory'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'factory',
    ...config,
  } as UseContractReadConfig<typeof pairABI, 'factory'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"invariant"`.
 */
export function usePairInvariant(
  config: Omit<
    UseContractReadConfig<typeof pairABI, 'invariant'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'invariant',
    ...config,
  } as UseContractReadConfig<typeof pairABI, 'invariant'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"reserve0"`.
 */
export function usePairReserve0(
  config: Omit<
    UseContractReadConfig<typeof pairABI, 'reserve0'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'reserve0',
    ...config,
  } as UseContractReadConfig<typeof pairABI, 'reserve0'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"reserve1"`.
 */
export function usePairReserve1(
  config: Omit<
    UseContractReadConfig<typeof pairABI, 'reserve1'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'reserve1',
    ...config,
  } as UseContractReadConfig<typeof pairABI, 'reserve1'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"token0"`.
 */
export function usePairToken0(
  config: Omit<
    UseContractReadConfig<typeof pairABI, 'token0'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'token0',
    ...config,
  } as UseContractReadConfig<typeof pairABI, 'token0'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"token0Scale"`.
 */
export function usePairToken0Scale(
  config: Omit<
    UseContractReadConfig<typeof pairABI, 'token0Scale'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'token0Scale',
    ...config,
  } as UseContractReadConfig<typeof pairABI, 'token0Scale'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"token1"`.
 */
export function usePairToken1(
  config: Omit<
    UseContractReadConfig<typeof pairABI, 'token1'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'token1',
    ...config,
  } as UseContractReadConfig<typeof pairABI, 'token1'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"token1Scale"`.
 */
export function usePairToken1Scale(
  config: Omit<
    UseContractReadConfig<typeof pairABI, 'token1Scale'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'token1Scale',
    ...config,
  } as UseContractReadConfig<typeof pairABI, 'token1Scale'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"totalLiquidity"`.
 */
export function usePairTotalLiquidity(
  config: Omit<
    UseContractReadConfig<typeof pairABI, 'totalLiquidity'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'totalLiquidity',
    ...config,
  } as UseContractReadConfig<typeof pairABI, 'totalLiquidity'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"upperBound"`.
 */
export function usePairUpperBound(
  config: Omit<
    UseContractReadConfig<typeof pairABI, 'upperBound'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: pairABI,
    functionName: 'upperBound',
    ...config,
  } as UseContractReadConfig<typeof pairABI, 'upperBound'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pairABI}__.
 */
export function usePairWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pairABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof pairABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pairABI, TFunctionName>({
    abi: pairABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"swap"`.
 */
export function usePairSwap<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof pairABI, 'swap'>['abi'],
        'swap'
      > & { functionName?: 'swap' }
    : UseContractWriteConfig<TMode, typeof pairABI, 'swap'> & {
        abi?: never
        functionName?: 'swap'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof pairABI, 'swap'>({
    abi: pairABI,
    functionName: 'swap',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pairABI}__.
 */
export function usePreparePairWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pairABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pairABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof pairABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link pairABI}__ and `functionName` set to `"swap"`.
 */
export function usePreparePairSwap(
  config: Omit<
    UsePrepareContractWriteConfig<typeof pairABI, 'swap'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: pairABI,
    functionName: 'swap',
    ...config,
  } as UsePrepareContractWriteConfig<typeof pairABI, 'swap'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pairABI}__.
 */
export function usePairEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof pairABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({ abi: pairABI, ...config } as UseContractEventConfig<
    typeof pairABI,
    TEventName
  >)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pairABI}__ and `eventName` set to `"Burn"`.
 */
export function usePairBurnEvent(
  config: Omit<
    UseContractEventConfig<typeof pairABI, 'Burn'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pairABI,
    eventName: 'Burn',
    ...config,
  } as UseContractEventConfig<typeof pairABI, 'Burn'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pairABI}__ and `eventName` set to `"Mint"`.
 */
export function usePairMintEvent(
  config: Omit<
    UseContractEventConfig<typeof pairABI, 'Mint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pairABI,
    eventName: 'Mint',
    ...config,
  } as UseContractEventConfig<typeof pairABI, 'Mint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link pairABI}__ and `eventName` set to `"Swap"`.
 */
export function usePairSwapEvent(
  config: Omit<
    UseContractEventConfig<typeof pairABI, 'Swap'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: pairABI,
    eventName: 'Swap',
    ...config,
  } as UseContractEventConfig<typeof pairABI, 'Swap'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link paymentABI}__.
 */
export function usePayment(config: Omit<UseContractConfig, 'abi'> = {} as any) {
  return useContract({ abi: paymentABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link paymentABI}__.
 */
export function usePaymentRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof paymentABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: paymentABI,
    ...config,
  } as UseContractReadConfig<typeof paymentABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link paymentABI}__ and `functionName` set to `"weth"`.
 */
export function usePaymentWeth(
  config: Omit<
    UseContractReadConfig<typeof paymentABI, 'weth'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: paymentABI,
    functionName: 'weth',
    ...config,
  } as UseContractReadConfig<typeof paymentABI, 'weth'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link paymentABI}__.
 */
export function usePaymentWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof paymentABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof paymentABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof paymentABI, TFunctionName>({
    abi: paymentABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link paymentABI}__ and `functionName` set to `"refundETH"`.
 */
export function usePaymentRefundEth<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof paymentABI, 'refundETH'>['abi'],
        'refundETH'
      > & { functionName?: 'refundETH' }
    : UseContractWriteConfig<TMode, typeof paymentABI, 'refundETH'> & {
        abi?: never
        functionName?: 'refundETH'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof paymentABI, 'refundETH'>({
    abi: paymentABI,
    functionName: 'refundETH',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link paymentABI}__ and `functionName` set to `"sweepToken"`.
 */
export function usePaymentSweepToken<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof paymentABI, 'sweepToken'>['abi'],
        'sweepToken'
      > & { functionName?: 'sweepToken' }
    : UseContractWriteConfig<TMode, typeof paymentABI, 'sweepToken'> & {
        abi?: never
        functionName?: 'sweepToken'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof paymentABI, 'sweepToken'>({
    abi: paymentABI,
    functionName: 'sweepToken',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link paymentABI}__ and `functionName` set to `"unwrapWETH"`.
 */
export function usePaymentUnwrapWeth<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof paymentABI, 'unwrapWETH'>['abi'],
        'unwrapWETH'
      > & { functionName?: 'unwrapWETH' }
    : UseContractWriteConfig<TMode, typeof paymentABI, 'unwrapWETH'> & {
        abi?: never
        functionName?: 'unwrapWETH'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof paymentABI, 'unwrapWETH'>({
    abi: paymentABI,
    functionName: 'unwrapWETH',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link paymentABI}__.
 */
export function usePreparePaymentWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof paymentABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: paymentABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof paymentABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link paymentABI}__ and `functionName` set to `"refundETH"`.
 */
export function usePreparePaymentRefundEth(
  config: Omit<
    UsePrepareContractWriteConfig<typeof paymentABI, 'refundETH'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: paymentABI,
    functionName: 'refundETH',
    ...config,
  } as UsePrepareContractWriteConfig<typeof paymentABI, 'refundETH'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link paymentABI}__ and `functionName` set to `"sweepToken"`.
 */
export function usePreparePaymentSweepToken(
  config: Omit<
    UsePrepareContractWriteConfig<typeof paymentABI, 'sweepToken'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: paymentABI,
    functionName: 'sweepToken',
    ...config,
  } as UsePrepareContractWriteConfig<typeof paymentABI, 'sweepToken'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link paymentABI}__ and `functionName` set to `"unwrapWETH"`.
 */
export function usePreparePaymentUnwrapWeth(
  config: Omit<
    UsePrepareContractWriteConfig<typeof paymentABI, 'unwrapWETH'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: paymentABI,
    functionName: 'unwrapWETH',
    ...config,
  } as UsePrepareContractWriteConfig<typeof paymentABI, 'unwrapWETH'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link positionABI}__.
 */
export function usePosition(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: positionABI, ...config })
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link safeTransferLibABI}__.
 */
export function useSafeTransferLib(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: safeTransferLibABI, ...config })
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link selfPermitABI}__.
 */
export function useSelfPermit(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: selfPermitABI, ...config })
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link selfPermitABI}__.
 */
export function useSelfPermitWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof selfPermitABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof selfPermitABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof selfPermitABI, TFunctionName>({
    abi: selfPermitABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link selfPermitABI}__ and `functionName` set to `"selfPermit"`.
 */
export function useSelfPermitSelfPermit<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof selfPermitABI, 'selfPermit'>['abi'],
        'selfPermit'
      > & { functionName?: 'selfPermit' }
    : UseContractWriteConfig<TMode, typeof selfPermitABI, 'selfPermit'> & {
        abi?: never
        functionName?: 'selfPermit'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof selfPermitABI, 'selfPermit'>({
    abi: selfPermitABI,
    functionName: 'selfPermit',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link selfPermitABI}__ and `functionName` set to `"selfPermitAllowed"`.
 */
export function useSelfPermitSelfPermitAllowed<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof selfPermitABI,
          'selfPermitAllowed'
        >['abi'],
        'selfPermitAllowed'
      > & { functionName?: 'selfPermitAllowed' }
    : UseContractWriteConfig<
        TMode,
        typeof selfPermitABI,
        'selfPermitAllowed'
      > & {
        abi?: never
        functionName?: 'selfPermitAllowed'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof selfPermitABI, 'selfPermitAllowed'>({
    abi: selfPermitABI,
    functionName: 'selfPermitAllowed',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link selfPermitABI}__.
 */
export function usePrepareSelfPermitWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof selfPermitABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: selfPermitABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof selfPermitABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link selfPermitABI}__ and `functionName` set to `"selfPermit"`.
 */
export function usePrepareSelfPermitSelfPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof selfPermitABI, 'selfPermit'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: selfPermitABI,
    functionName: 'selfPermit',
    ...config,
  } as UsePrepareContractWriteConfig<typeof selfPermitABI, 'selfPermit'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link selfPermitABI}__ and `functionName` set to `"selfPermitAllowed"`.
 */
export function usePrepareSelfPermitSelfPermitAllowed(
  config: Omit<
    UsePrepareContractWriteConfig<typeof selfPermitABI, 'selfPermitAllowed'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: selfPermitABI,
    functionName: 'selfPermitAllowed',
    ...config,
  } as UsePrepareContractWriteConfig<typeof selfPermitABI, 'selfPermitAllowed'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link stdInvariantABI}__.
 */
export function useStdInvariant(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: stdInvariantABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__.
 */
export function useStdInvariantRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    ...config,
  } as UseContractReadConfig<typeof stdInvariantABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"excludeArtifacts"`.
 */
export function useStdInvariantExcludeArtifacts(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, 'excludeArtifacts'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'excludeArtifacts',
    ...config,
  } as UseContractReadConfig<typeof stdInvariantABI, 'excludeArtifacts'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"excludeContracts"`.
 */
export function useStdInvariantExcludeContracts(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, 'excludeContracts'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'excludeContracts',
    ...config,
  } as UseContractReadConfig<typeof stdInvariantABI, 'excludeContracts'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"excludeSenders"`.
 */
export function useStdInvariantExcludeSenders(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, 'excludeSenders'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'excludeSenders',
    ...config,
  } as UseContractReadConfig<typeof stdInvariantABI, 'excludeSenders'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetArtifactSelectors"`.
 */
export function useStdInvariantTargetArtifactSelectors(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, 'targetArtifactSelectors'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'targetArtifactSelectors',
    ...config,
  } as UseContractReadConfig<typeof stdInvariantABI, 'targetArtifactSelectors'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetArtifacts"`.
 */
export function useStdInvariantTargetArtifacts(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, 'targetArtifacts'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'targetArtifacts',
    ...config,
  } as UseContractReadConfig<typeof stdInvariantABI, 'targetArtifacts'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetContracts"`.
 */
export function useStdInvariantTargetContracts(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, 'targetContracts'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'targetContracts',
    ...config,
  } as UseContractReadConfig<typeof stdInvariantABI, 'targetContracts'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetSelectors"`.
 */
export function useStdInvariantTargetSelectors(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, 'targetSelectors'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'targetSelectors',
    ...config,
  } as UseContractReadConfig<typeof stdInvariantABI, 'targetSelectors'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetSenders"`.
 */
export function useStdInvariantTargetSenders(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, 'targetSenders'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: 'targetSenders',
    ...config,
  } as UseContractReadConfig<typeof stdInvariantABI, 'targetSenders'>)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link swapHelperABI}__.
 */
export function useSwapHelper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: swapHelperABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link swapHelperABI}__.
 */
export function useSwapHelperRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof swapHelperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: swapHelperABI,
    ...config,
  } as UseContractReadConfig<typeof swapHelperABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link swapHelperABI}__ and `functionName` set to `"uniswapV2Factory"`.
 */
export function useSwapHelperUniswapV2Factory(
  config: Omit<
    UseContractReadConfig<typeof swapHelperABI, 'uniswapV2Factory'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: swapHelperABI,
    functionName: 'uniswapV2Factory',
    ...config,
  } as UseContractReadConfig<typeof swapHelperABI, 'uniswapV2Factory'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link swapHelperABI}__ and `functionName` set to `"uniswapV3Factory"`.
 */
export function useSwapHelperUniswapV3Factory(
  config: Omit<
    UseContractReadConfig<typeof swapHelperABI, 'uniswapV3Factory'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: swapHelperABI,
    functionName: 'uniswapV3Factory',
    ...config,
  } as UseContractReadConfig<typeof swapHelperABI, 'uniswapV3Factory'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link swapHelperABI}__.
 */
export function useSwapHelperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof swapHelperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof swapHelperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof swapHelperABI, TFunctionName>({
    abi: swapHelperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link swapHelperABI}__ and `functionName` set to `"uniswapV3SwapCallback"`.
 */
export function useSwapHelperUniswapV3SwapCallback<
  TMode extends WriteContractMode,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof swapHelperABI,
          'uniswapV3SwapCallback'
        >['abi'],
        'uniswapV3SwapCallback'
      > & { functionName?: 'uniswapV3SwapCallback' }
    : UseContractWriteConfig<
        TMode,
        typeof swapHelperABI,
        'uniswapV3SwapCallback'
      > & {
        abi?: never
        functionName?: 'uniswapV3SwapCallback'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof swapHelperABI, 'uniswapV3SwapCallback'>(
    {
      abi: swapHelperABI,
      functionName: 'uniswapV3SwapCallback',
      ...config,
    } as any,
  )
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link swapHelperABI}__.
 */
export function usePrepareSwapHelperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof swapHelperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: swapHelperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof swapHelperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link swapHelperABI}__ and `functionName` set to `"uniswapV3SwapCallback"`.
 */
export function usePrepareSwapHelperUniswapV3SwapCallback(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof swapHelperABI,
      'uniswapV3SwapCallback'
    >,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: swapHelperABI,
    functionName: 'uniswapV3SwapCallback',
    ...config,
  } as UsePrepareContractWriteConfig<
    typeof swapHelperABI,
    'uniswapV3SwapCallback'
  >)
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link testHelperABI}__.
 */
export function useTestHelper(
  config: Omit<UseContractConfig, 'abi'> = {} as any,
) {
  return useContract({ abi: testHelperABI, ...config })
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testHelperABI}__.
 */
export function useTestHelperRead<TFunctionName extends string>(
  config: Omit<
    UseContractReadConfig<typeof testHelperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return useContractRead({
    abi: testHelperABI,
    ...config,
  } as UseContractReadConfig<typeof testHelperABI, TFunctionName>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testHelperABI}__ and `functionName` set to `"IS_TEST"`.
 */
export function useTestHelperIsTest(
  config: Omit<
    UseContractReadConfig<typeof testHelperABI, 'IS_TEST'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testHelperABI,
    functionName: 'IS_TEST',
    ...config,
  } as UseContractReadConfig<typeof testHelperABI, 'IS_TEST'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testHelperABI}__ and `functionName` set to `"cuh"`.
 */
export function useTestHelperCuh(
  config: Omit<
    UseContractReadConfig<typeof testHelperABI, 'cuh'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testHelperABI,
    functionName: 'cuh',
    ...config,
  } as UseContractReadConfig<typeof testHelperABI, 'cuh'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testHelperABI}__ and `functionName` set to `"dennis"`.
 */
export function useTestHelperDennis(
  config: Omit<
    UseContractReadConfig<typeof testHelperABI, 'dennis'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testHelperABI,
    functionName: 'dennis',
    ...config,
  } as UseContractReadConfig<typeof testHelperABI, 'dennis'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testHelperABI}__ and `functionName` set to `"excludeArtifacts"`.
 */
export function useTestHelperExcludeArtifacts(
  config: Omit<
    UseContractReadConfig<typeof testHelperABI, 'excludeArtifacts'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testHelperABI,
    functionName: 'excludeArtifacts',
    ...config,
  } as UseContractReadConfig<typeof testHelperABI, 'excludeArtifacts'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testHelperABI}__ and `functionName` set to `"excludeContracts"`.
 */
export function useTestHelperExcludeContracts(
  config: Omit<
    UseContractReadConfig<typeof testHelperABI, 'excludeContracts'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testHelperABI,
    functionName: 'excludeContracts',
    ...config,
  } as UseContractReadConfig<typeof testHelperABI, 'excludeContracts'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testHelperABI}__ and `functionName` set to `"excludeSenders"`.
 */
export function useTestHelperExcludeSenders(
  config: Omit<
    UseContractReadConfig<typeof testHelperABI, 'excludeSenders'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testHelperABI,
    functionName: 'excludeSenders',
    ...config,
  } as UseContractReadConfig<typeof testHelperABI, 'excludeSenders'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testHelperABI}__ and `functionName` set to `"factory"`.
 */
export function useTestHelperFactory(
  config: Omit<
    UseContractReadConfig<typeof testHelperABI, 'factory'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testHelperABI,
    functionName: 'factory',
    ...config,
  } as UseContractReadConfig<typeof testHelperABI, 'factory'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testHelperABI}__ and `functionName` set to `"lendgine"`.
 */
export function useTestHelperLendgine(
  config: Omit<
    UseContractReadConfig<typeof testHelperABI, 'lendgine'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testHelperABI,
    functionName: 'lendgine',
    ...config,
  } as UseContractReadConfig<typeof testHelperABI, 'lendgine'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testHelperABI}__ and `functionName` set to `"targetArtifactSelectors"`.
 */
export function useTestHelperTargetArtifactSelectors(
  config: Omit<
    UseContractReadConfig<typeof testHelperABI, 'targetArtifactSelectors'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testHelperABI,
    functionName: 'targetArtifactSelectors',
    ...config,
  } as UseContractReadConfig<typeof testHelperABI, 'targetArtifactSelectors'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testHelperABI}__ and `functionName` set to `"targetArtifacts"`.
 */
export function useTestHelperTargetArtifacts(
  config: Omit<
    UseContractReadConfig<typeof testHelperABI, 'targetArtifacts'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testHelperABI,
    functionName: 'targetArtifacts',
    ...config,
  } as UseContractReadConfig<typeof testHelperABI, 'targetArtifacts'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testHelperABI}__ and `functionName` set to `"targetContracts"`.
 */
export function useTestHelperTargetContracts(
  config: Omit<
    UseContractReadConfig<typeof testHelperABI, 'targetContracts'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testHelperABI,
    functionName: 'targetContracts',
    ...config,
  } as UseContractReadConfig<typeof testHelperABI, 'targetContracts'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testHelperABI}__ and `functionName` set to `"targetSelectors"`.
 */
export function useTestHelperTargetSelectors(
  config: Omit<
    UseContractReadConfig<typeof testHelperABI, 'targetSelectors'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testHelperABI,
    functionName: 'targetSelectors',
    ...config,
  } as UseContractReadConfig<typeof testHelperABI, 'targetSelectors'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testHelperABI}__ and `functionName` set to `"targetSenders"`.
 */
export function useTestHelperTargetSenders(
  config: Omit<
    UseContractReadConfig<typeof testHelperABI, 'targetSenders'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testHelperABI,
    functionName: 'targetSenders',
    ...config,
  } as UseContractReadConfig<typeof testHelperABI, 'targetSenders'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testHelperABI}__ and `functionName` set to `"token0"`.
 */
export function useTestHelperToken0(
  config: Omit<
    UseContractReadConfig<typeof testHelperABI, 'token0'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testHelperABI,
    functionName: 'token0',
    ...config,
  } as UseContractReadConfig<typeof testHelperABI, 'token0'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testHelperABI}__ and `functionName` set to `"token0Scale"`.
 */
export function useTestHelperToken0Scale(
  config: Omit<
    UseContractReadConfig<typeof testHelperABI, 'token0Scale'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testHelperABI,
    functionName: 'token0Scale',
    ...config,
  } as UseContractReadConfig<typeof testHelperABI, 'token0Scale'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testHelperABI}__ and `functionName` set to `"token1"`.
 */
export function useTestHelperToken1(
  config: Omit<
    UseContractReadConfig<typeof testHelperABI, 'token1'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testHelperABI,
    functionName: 'token1',
    ...config,
  } as UseContractReadConfig<typeof testHelperABI, 'token1'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testHelperABI}__ and `functionName` set to `"token1Scale"`.
 */
export function useTestHelperToken1Scale(
  config: Omit<
    UseContractReadConfig<typeof testHelperABI, 'token1Scale'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testHelperABI,
    functionName: 'token1Scale',
    ...config,
  } as UseContractReadConfig<typeof testHelperABI, 'token1Scale'>)
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link testHelperABI}__ and `functionName` set to `"upperBound"`.
 */
export function useTestHelperUpperBound(
  config: Omit<
    UseContractReadConfig<typeof testHelperABI, 'upperBound'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return useContractRead({
    abi: testHelperABI,
    functionName: 'upperBound',
    ...config,
  } as UseContractReadConfig<typeof testHelperABI, 'upperBound'>)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testHelperABI}__.
 */
export function useTestHelperWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string,
>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof testHelperABI, string>['abi'],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof testHelperABI, TFunctionName> & {
        abi?: never
      } = {} as any,
) {
  return useContractWrite<TMode, typeof testHelperABI, TFunctionName>({
    abi: testHelperABI,
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testHelperABI}__ and `functionName` set to `"failed"`.
 */
export function useTestHelperFailed<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof testHelperABI, 'failed'>['abi'],
        'failed'
      > & { functionName?: 'failed' }
    : UseContractWriteConfig<TMode, typeof testHelperABI, 'failed'> & {
        abi?: never
        functionName?: 'failed'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof testHelperABI, 'failed'>({
    abi: testHelperABI,
    functionName: 'failed',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testHelperABI}__ and `functionName` set to `"mintCallback"`.
 */
export function useTestHelperMintCallback<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof testHelperABI, 'mintCallback'>['abi'],
        'mintCallback'
      > & { functionName?: 'mintCallback' }
    : UseContractWriteConfig<TMode, typeof testHelperABI, 'mintCallback'> & {
        abi?: never
        functionName?: 'mintCallback'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof testHelperABI, 'mintCallback'>({
    abi: testHelperABI,
    functionName: 'mintCallback',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testHelperABI}__ and `functionName` set to `"mkaddr"`.
 */
export function useTestHelperMkaddr<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof testHelperABI, 'mkaddr'>['abi'],
        'mkaddr'
      > & { functionName?: 'mkaddr' }
    : UseContractWriteConfig<TMode, typeof testHelperABI, 'mkaddr'> & {
        abi?: never
        functionName?: 'mkaddr'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof testHelperABI, 'mkaddr'>({
    abi: testHelperABI,
    functionName: 'mkaddr',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testHelperABI}__ and `functionName` set to `"pairMintCallback"`.
 */
export function useTestHelperPairMintCallback<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof testHelperABI,
          'pairMintCallback'
        >['abi'],
        'pairMintCallback'
      > & { functionName?: 'pairMintCallback' }
    : UseContractWriteConfig<
        TMode,
        typeof testHelperABI,
        'pairMintCallback'
      > & {
        abi?: never
        functionName?: 'pairMintCallback'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof testHelperABI, 'pairMintCallback'>({
    abi: testHelperABI,
    functionName: 'pairMintCallback',
    ...config,
  } as any)
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link testHelperABI}__ and `functionName` set to `"swapCallback"`.
 */
export function useTestHelperSwapCallback<TMode extends WriteContractMode>(
  config: TMode extends 'prepared'
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof testHelperABI, 'swapCallback'>['abi'],
        'swapCallback'
      > & { functionName?: 'swapCallback' }
    : UseContractWriteConfig<TMode, typeof testHelperABI, 'swapCallback'> & {
        abi?: never
        functionName?: 'swapCallback'
      } = {} as any,
) {
  return useContractWrite<TMode, typeof testHelperABI, 'swapCallback'>({
    abi: testHelperABI,
    functionName: 'swapCallback',
    ...config,
  } as any)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testHelperABI}__.
 */
export function usePrepareTestHelperWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof testHelperABI, TFunctionName>,
    'abi'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: testHelperABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof testHelperABI, TFunctionName>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testHelperABI}__ and `functionName` set to `"failed"`.
 */
export function usePrepareTestHelperFailed(
  config: Omit<
    UsePrepareContractWriteConfig<typeof testHelperABI, 'failed'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: testHelperABI,
    functionName: 'failed',
    ...config,
  } as UsePrepareContractWriteConfig<typeof testHelperABI, 'failed'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testHelperABI}__ and `functionName` set to `"mintCallback"`.
 */
export function usePrepareTestHelperMintCallback(
  config: Omit<
    UsePrepareContractWriteConfig<typeof testHelperABI, 'mintCallback'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: testHelperABI,
    functionName: 'mintCallback',
    ...config,
  } as UsePrepareContractWriteConfig<typeof testHelperABI, 'mintCallback'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testHelperABI}__ and `functionName` set to `"mkaddr"`.
 */
export function usePrepareTestHelperMkaddr(
  config: Omit<
    UsePrepareContractWriteConfig<typeof testHelperABI, 'mkaddr'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: testHelperABI,
    functionName: 'mkaddr',
    ...config,
  } as UsePrepareContractWriteConfig<typeof testHelperABI, 'mkaddr'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testHelperABI}__ and `functionName` set to `"pairMintCallback"`.
 */
export function usePrepareTestHelperPairMintCallback(
  config: Omit<
    UsePrepareContractWriteConfig<typeof testHelperABI, 'pairMintCallback'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: testHelperABI,
    functionName: 'pairMintCallback',
    ...config,
  } as UsePrepareContractWriteConfig<typeof testHelperABI, 'pairMintCallback'>)
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link testHelperABI}__ and `functionName` set to `"swapCallback"`.
 */
export function usePrepareTestHelperSwapCallback(
  config: Omit<
    UsePrepareContractWriteConfig<typeof testHelperABI, 'swapCallback'>,
    'abi' | 'functionName'
  > = {} as any,
) {
  return usePrepareContractWrite({
    abi: testHelperABI,
    functionName: 'swapCallback',
    ...config,
  } as UsePrepareContractWriteConfig<typeof testHelperABI, 'swapCallback'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testHelperABI}__.
 */
export function useTestHelperEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof testHelperABI, TEventName>,
    'abi'
  > = {} as any,
) {
  return useContractEvent({
    abi: testHelperABI,
    ...config,
  } as UseContractEventConfig<typeof testHelperABI, TEventName>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testHelperABI}__ and `eventName` set to `"log"`.
 */
export function useTestHelperLogEvent(
  config: Omit<
    UseContractEventConfig<typeof testHelperABI, 'log'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testHelperABI,
    eventName: 'log',
    ...config,
  } as UseContractEventConfig<typeof testHelperABI, 'log'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testHelperABI}__ and `eventName` set to `"log_address"`.
 */
export function useTestHelperLogAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof testHelperABI, 'log_address'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testHelperABI,
    eventName: 'log_address',
    ...config,
  } as UseContractEventConfig<typeof testHelperABI, 'log_address'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testHelperABI}__ and `eventName` set to `"log_array"`.
 */
export function useTestHelperLogArrayEvent(
  config: Omit<
    UseContractEventConfig<typeof testHelperABI, 'log_array'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testHelperABI,
    eventName: 'log_array',
    ...config,
  } as UseContractEventConfig<typeof testHelperABI, 'log_array'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testHelperABI}__ and `eventName` set to `"log_bytes"`.
 */
export function useTestHelperLogBytesEvent(
  config: Omit<
    UseContractEventConfig<typeof testHelperABI, 'log_bytes'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testHelperABI,
    eventName: 'log_bytes',
    ...config,
  } as UseContractEventConfig<typeof testHelperABI, 'log_bytes'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testHelperABI}__ and `eventName` set to `"log_bytes32"`.
 */
export function useTestHelperLogBytes32Event(
  config: Omit<
    UseContractEventConfig<typeof testHelperABI, 'log_bytes32'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testHelperABI,
    eventName: 'log_bytes32',
    ...config,
  } as UseContractEventConfig<typeof testHelperABI, 'log_bytes32'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testHelperABI}__ and `eventName` set to `"log_int"`.
 */
export function useTestHelperLogIntEvent(
  config: Omit<
    UseContractEventConfig<typeof testHelperABI, 'log_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testHelperABI,
    eventName: 'log_int',
    ...config,
  } as UseContractEventConfig<typeof testHelperABI, 'log_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testHelperABI}__ and `eventName` set to `"log_named_address"`.
 */
export function useTestHelperLogNamedAddressEvent(
  config: Omit<
    UseContractEventConfig<typeof testHelperABI, 'log_named_address'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testHelperABI,
    eventName: 'log_named_address',
    ...config,
  } as UseContractEventConfig<typeof testHelperABI, 'log_named_address'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testHelperABI}__ and `eventName` set to `"log_named_array"`.
 */
export function useTestHelperLogNamedArrayEvent(
  config: Omit<
    UseContractEventConfig<typeof testHelperABI, 'log_named_array'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testHelperABI,
    eventName: 'log_named_array',
    ...config,
  } as UseContractEventConfig<typeof testHelperABI, 'log_named_array'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testHelperABI}__ and `eventName` set to `"log_named_bytes"`.
 */
export function useTestHelperLogNamedBytesEvent(
  config: Omit<
    UseContractEventConfig<typeof testHelperABI, 'log_named_bytes'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testHelperABI,
    eventName: 'log_named_bytes',
    ...config,
  } as UseContractEventConfig<typeof testHelperABI, 'log_named_bytes'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testHelperABI}__ and `eventName` set to `"log_named_bytes32"`.
 */
export function useTestHelperLogNamedBytes32Event(
  config: Omit<
    UseContractEventConfig<typeof testHelperABI, 'log_named_bytes32'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testHelperABI,
    eventName: 'log_named_bytes32',
    ...config,
  } as UseContractEventConfig<typeof testHelperABI, 'log_named_bytes32'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testHelperABI}__ and `eventName` set to `"log_named_decimal_int"`.
 */
export function useTestHelperLogNamedDecimalIntEvent(
  config: Omit<
    UseContractEventConfig<typeof testHelperABI, 'log_named_decimal_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testHelperABI,
    eventName: 'log_named_decimal_int',
    ...config,
  } as UseContractEventConfig<typeof testHelperABI, 'log_named_decimal_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testHelperABI}__ and `eventName` set to `"log_named_decimal_uint"`.
 */
export function useTestHelperLogNamedDecimalUintEvent(
  config: Omit<
    UseContractEventConfig<typeof testHelperABI, 'log_named_decimal_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testHelperABI,
    eventName: 'log_named_decimal_uint',
    ...config,
  } as UseContractEventConfig<typeof testHelperABI, 'log_named_decimal_uint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testHelperABI}__ and `eventName` set to `"log_named_int"`.
 */
export function useTestHelperLogNamedIntEvent(
  config: Omit<
    UseContractEventConfig<typeof testHelperABI, 'log_named_int'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testHelperABI,
    eventName: 'log_named_int',
    ...config,
  } as UseContractEventConfig<typeof testHelperABI, 'log_named_int'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testHelperABI}__ and `eventName` set to `"log_named_string"`.
 */
export function useTestHelperLogNamedStringEvent(
  config: Omit<
    UseContractEventConfig<typeof testHelperABI, 'log_named_string'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testHelperABI,
    eventName: 'log_named_string',
    ...config,
  } as UseContractEventConfig<typeof testHelperABI, 'log_named_string'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testHelperABI}__ and `eventName` set to `"log_named_uint"`.
 */
export function useTestHelperLogNamedUintEvent(
  config: Omit<
    UseContractEventConfig<typeof testHelperABI, 'log_named_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testHelperABI,
    eventName: 'log_named_uint',
    ...config,
  } as UseContractEventConfig<typeof testHelperABI, 'log_named_uint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testHelperABI}__ and `eventName` set to `"log_string"`.
 */
export function useTestHelperLogStringEvent(
  config: Omit<
    UseContractEventConfig<typeof testHelperABI, 'log_string'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testHelperABI,
    eventName: 'log_string',
    ...config,
  } as UseContractEventConfig<typeof testHelperABI, 'log_string'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testHelperABI}__ and `eventName` set to `"log_uint"`.
 */
export function useTestHelperLogUintEvent(
  config: Omit<
    UseContractEventConfig<typeof testHelperABI, 'log_uint'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testHelperABI,
    eventName: 'log_uint',
    ...config,
  } as UseContractEventConfig<typeof testHelperABI, 'log_uint'>)
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link testHelperABI}__ and `eventName` set to `"logs"`.
 */
export function useTestHelperLogsEvent(
  config: Omit<
    UseContractEventConfig<typeof testHelperABI, 'logs'>,
    'abi' | 'eventName'
  > = {} as any,
) {
  return useContractEvent({
    abi: testHelperABI,
    eventName: 'logs',
    ...config,
  } as UseContractEventConfig<typeof testHelperABI, 'logs'>)
}
